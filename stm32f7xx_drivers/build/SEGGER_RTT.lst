ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"SEGGER_RTT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.data._aTerminalId,"aw"
  19              		.align	2
  22              	_aTerminalId:
  23 0000 30313233 		.ascii	"0123456789ABCDEF"
  23      34353637 
  23      38394142 
  23      43444546 
  24              		.global	_SEGGER_RTT
  25              		.section	.bss._SEGGER_RTT,"aw",%nobits
  26              		.align	2
  29              	_SEGGER_RTT:
  30 0000 00000000 		.space	168
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss._acUpBuffer,"aw",%nobits
  32              		.align	2
  35              	_acUpBuffer:
  36 0000 00000000 		.space	1024
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss._acDownBuffer,"aw",%nobits
  38              		.align	2
  41              	_acDownBuffer:
  42 0000 00000000 		.space	16
  42      00000000 
  42      00000000 
  42      00000000 
  43              		.section	.bss._ActiveTerminal,"aw",%nobits
  46              	_ActiveTerminal:
  47 0000 00       		.space	1
  48              		.section	.rodata
  49              		.align	2
  50              	.LC0:
  51 0000 5465726D 		.ascii	"Terminal\000"
  51      696E616C 
  51      00
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 2


  52              		.section	.text._DoInit,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  58              	_DoInit:
  59              	.LFB0:
  60              		.file 1 "Src/SEGGER_RTT.c"
   1:Src/SEGGER_RTT.c **** /*********************************************************************
   2:Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Src/SEGGER_RTT.c **** **********************************************************************
   5:Src/SEGGER_RTT.c **** *                                                                    *
   6:Src/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:Src/SEGGER_RTT.c **** *                                                                    *
   8:Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Src/SEGGER_RTT.c **** *                                                                    *
  10:Src/SEGGER_RTT.c **** **********************************************************************
  11:Src/SEGGER_RTT.c **** *                                                                    *
  12:Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Src/SEGGER_RTT.c **** *                                                                    *
  14:Src/SEGGER_RTT.c **** **********************************************************************
  15:Src/SEGGER_RTT.c **** *                                                                    *
  16:Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Src/SEGGER_RTT.c **** *                                                                    *
  18:Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Src/SEGGER_RTT.c **** *                                                                    *
  22:Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Src/SEGGER_RTT.c **** *                                                                    *
  26:Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Src/SEGGER_RTT.c **** *                                                                    *
  29:Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Src/SEGGER_RTT.c **** *                                                                    *
  43:Src/SEGGER_RTT.c **** **********************************************************************
  44:Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  45:Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  46:Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  47:Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  48:Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  49:Src/SEGGER_RTT.c **** Revision: $Rev: 26642 $
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 3


  50:Src/SEGGER_RTT.c **** 
  51:Src/SEGGER_RTT.c **** Additional information:
  52:Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  53:Src/SEGGER_RTT.c ****           H->T    Host to target communication
  54:Src/SEGGER_RTT.c ****           T->H    Target to host communication
  55:Src/SEGGER_RTT.c **** 
  56:Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  57:Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  58:Src/SEGGER_RTT.c **** 
  59:Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  60:Src/SEGGER_RTT.c **** 
  61:Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  62:Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  63:Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  64:Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  65:Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  66:Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  67:Src/SEGGER_RTT.c **** 
  68:Src/SEGGER_RTT.c **** 
  69:Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  70:Src/SEGGER_RTT.c **** */
  71:Src/SEGGER_RTT.c **** 
  72:Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  73:Src/SEGGER_RTT.c **** 
  74:Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  75:Src/SEGGER_RTT.c **** 
  76:Src/SEGGER_RTT.c **** /*********************************************************************
  77:Src/SEGGER_RTT.c **** *
  78:Src/SEGGER_RTT.c **** *       Configuration, default values
  79:Src/SEGGER_RTT.c **** *
  80:Src/SEGGER_RTT.c **** **********************************************************************
  81:Src/SEGGER_RTT.c **** */
  82:Src/SEGGER_RTT.c **** 
  83:Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  84:Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  85:Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  86:Src/SEGGER_RTT.c ****   #endif
  87:Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  88:Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  89:Src/SEGGER_RTT.c ****   #endif
  90:Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  91:Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  92:Src/SEGGER_RTT.c ****   #endif
  93:Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  94:Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
  95:Src/SEGGER_RTT.c ****   #endif
  96:Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
  97:Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  98:Src/SEGGER_RTT.c ****   #endif
  99:Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 100:Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 101:Src/SEGGER_RTT.c ****   #endif
 102:Src/SEGGER_RTT.c **** #endif
 103:Src/SEGGER_RTT.c **** 
 104:Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 105:Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 106:Src/SEGGER_RTT.c **** #endif
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 4


 107:Src/SEGGER_RTT.c **** 
 108:Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 109:Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 110:Src/SEGGER_RTT.c **** #endif
 111:Src/SEGGER_RTT.c **** 
 112:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 113:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 114:Src/SEGGER_RTT.c **** #endif
 115:Src/SEGGER_RTT.c **** 
 116:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 117:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 118:Src/SEGGER_RTT.c **** #endif
 119:Src/SEGGER_RTT.c **** 
 120:Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 121:Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 122:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 123:Src/SEGGER_RTT.c ****   #endif
 124:Src/SEGGER_RTT.c **** #endif
 125:Src/SEGGER_RTT.c **** 
 126:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 127:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 128:Src/SEGGER_RTT.c **** #endif
 129:Src/SEGGER_RTT.c **** 
 130:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 131:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 132:Src/SEGGER_RTT.c **** #endif
 133:Src/SEGGER_RTT.c **** 
 134:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 135:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 136:Src/SEGGER_RTT.c **** #endif
 137:Src/SEGGER_RTT.c **** 
 138:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 139:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 140:Src/SEGGER_RTT.c **** #endif
 141:Src/SEGGER_RTT.c **** 
 142:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 143:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 144:Src/SEGGER_RTT.c **** #endif
 145:Src/SEGGER_RTT.c **** 
 146:Src/SEGGER_RTT.c **** #ifndef   STRLEN
 147:Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 148:Src/SEGGER_RTT.c **** #endif
 149:Src/SEGGER_RTT.c **** 
 150:Src/SEGGER_RTT.c **** #ifndef   STRCPY
 151:Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 152:Src/SEGGER_RTT.c **** #endif
 153:Src/SEGGER_RTT.c **** 
 154:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 155:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 156:Src/SEGGER_RTT.c **** #endif
 157:Src/SEGGER_RTT.c **** 
 158:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 159:Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 160:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 161:Src/SEGGER_RTT.c ****   #else
 162:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 163:Src/SEGGER_RTT.c ****   #endif
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 5


 164:Src/SEGGER_RTT.c **** #endif
 165:Src/SEGGER_RTT.c **** 
 166:Src/SEGGER_RTT.c **** #ifndef   MIN
 167:Src/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 168:Src/SEGGER_RTT.c **** #endif
 169:Src/SEGGER_RTT.c **** 
 170:Src/SEGGER_RTT.c **** #ifndef   MAX
 171:Src/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 172:Src/SEGGER_RTT.c **** #endif
 173:Src/SEGGER_RTT.c **** //
 174:Src/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 175:Src/SEGGER_RTT.c **** //
 176:Src/SEGGER_RTT.c **** #ifndef NULL
 177:Src/SEGGER_RTT.c ****   #define NULL 0
 178:Src/SEGGER_RTT.c **** #endif
 179:Src/SEGGER_RTT.c **** 
 180:Src/SEGGER_RTT.c **** /*********************************************************************
 181:Src/SEGGER_RTT.c **** *
 182:Src/SEGGER_RTT.c **** *       Defines, fixed
 183:Src/SEGGER_RTT.c **** *
 184:Src/SEGGER_RTT.c **** **********************************************************************
 185:Src/SEGGER_RTT.c **** */
 186:Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 187:Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 188:Src/SEGGER_RTT.c **** #endif
 189:Src/SEGGER_RTT.c **** 
 190:Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 191:Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 192:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 193:Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 194:Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 195:Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 196:Src/SEGGER_RTT.c ****                                   Var
 197:Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 198:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 199:Src/SEGGER_RTT.c ****   #else
 200:Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 201:Src/SEGGER_RTT.c ****   #endif
 202:Src/SEGGER_RTT.c **** #else
 203:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 204:Src/SEGGER_RTT.c **** #endif
 205:Src/SEGGER_RTT.c **** 
 206:Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 207:Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 208:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 209:Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 210:Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 211:Src/SEGGER_RTT.c ****                                         Var
 212:Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 213:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 214:Src/SEGGER_RTT.c ****   #else
 215:Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 216:Src/SEGGER_RTT.c ****   #endif
 217:Src/SEGGER_RTT.c **** #else
 218:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 219:Src/SEGGER_RTT.c **** #endif
 220:Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 6


 221:Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 222:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 223:Src/SEGGER_RTT.c **** #else
 224:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 225:Src/SEGGER_RTT.c **** #endif
 226:Src/SEGGER_RTT.c **** 
 227:Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 228:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 229:Src/SEGGER_RTT.c **** #else
 230:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 231:Src/SEGGER_RTT.c **** #endif
 232:Src/SEGGER_RTT.c **** 
 233:Src/SEGGER_RTT.c **** 
 234:Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 235:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 236:Src/SEGGER_RTT.c **** #else
 237:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 238:Src/SEGGER_RTT.c **** #endif
 239:Src/SEGGER_RTT.c **** 
 240:Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 241:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 242:Src/SEGGER_RTT.c **** #else
 243:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 244:Src/SEGGER_RTT.c **** #endif
 245:Src/SEGGER_RTT.c **** 
 246:Src/SEGGER_RTT.c **** /*********************************************************************
 247:Src/SEGGER_RTT.c **** *
 248:Src/SEGGER_RTT.c **** *       Static const data
 249:Src/SEGGER_RTT.c **** *
 250:Src/SEGGER_RTT.c **** **********************************************************************
 251:Src/SEGGER_RTT.c **** */
 252:Src/SEGGER_RTT.c **** 
 253:Src/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 254:Src/SEGGER_RTT.c **** 
 255:Src/SEGGER_RTT.c **** /*********************************************************************
 256:Src/SEGGER_RTT.c **** *
 257:Src/SEGGER_RTT.c **** *       Static data
 258:Src/SEGGER_RTT.c **** *
 259:Src/SEGGER_RTT.c **** **********************************************************************
 260:Src/SEGGER_RTT.c **** */
 261:Src/SEGGER_RTT.c **** 
 262:Src/SEGGER_RTT.c **** //
 263:Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 264:Src/SEGGER_RTT.c **** //
 265:Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 266:Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 267:Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 268:Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 269:Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 270:Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 271:Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 272:Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT;
 273:Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 274:Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)];
 275:Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 276:Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)];
 277:Src/SEGGER_RTT.c ****   #else
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 7


 278:Src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 279:Src/SEGGER_RTT.c ****   #endif
 280:Src/SEGGER_RTT.c **** #else
 281:Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 282:Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 283:Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 284:Src/SEGGER_RTT.c **** #endif
 285:Src/SEGGER_RTT.c **** 
 286:Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 287:Src/SEGGER_RTT.c **** 
 288:Src/SEGGER_RTT.c **** /*********************************************************************
 289:Src/SEGGER_RTT.c **** *
 290:Src/SEGGER_RTT.c **** *       Static functions
 291:Src/SEGGER_RTT.c **** *
 292:Src/SEGGER_RTT.c **** **********************************************************************
 293:Src/SEGGER_RTT.c **** */
 294:Src/SEGGER_RTT.c **** 
 295:Src/SEGGER_RTT.c **** /*********************************************************************
 296:Src/SEGGER_RTT.c **** *
 297:Src/SEGGER_RTT.c **** *       _DoInit()
 298:Src/SEGGER_RTT.c **** *
 299:Src/SEGGER_RTT.c **** *  Function description
 300:Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 301:Src/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 302:Src/SEGGER_RTT.c **** *
 303:Src/SEGGER_RTT.c **** */
 304:Src/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 305:Src/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 306:Src/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 307:Src/SEGGER_RTT.c ****                   do {                                                                             
 308:Src/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 309:Src/SEGGER_RTT.c ****                       _DoInit();                                                                   
 310:Src/SEGGER_RTT.c ****                     }                                                                              
 311:Src/SEGGER_RTT.c ****                   } while (0);                                                                     
 312:Src/SEGGER_RTT.c ****                 }
 313:Src/SEGGER_RTT.c **** 
 314:Src/SEGGER_RTT.c **** static void _DoInit(void) {
  61              		.loc 1 314 27
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 8
  64              		@ frame_needed = 1, uses_anonymous_args = 0
  65 0000 80B5     		push	{r7, lr}
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 7, -8
  68              		.cfi_offset 14, -4
  69 0002 82B0     		sub	sp, sp, #8
  70              		.cfi_def_cfa_offset 16
  71 0004 00AF     		add	r7, sp, #0
  72              		.cfi_def_cfa_register 7
 315:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 316:Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 317:Src/SEGGER_RTT.c ****   unsigned i;
 318:Src/SEGGER_RTT.c ****   //
 319:Src/SEGGER_RTT.c ****   // Initialize control block
 320:Src/SEGGER_RTT.c ****   //
 321:Src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
  73              		.loc 1 321 25
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 8


  74 0006 264B     		ldr	r3, .L4
  75 0008 3B60     		str	r3, [r7]
 322:Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
  76              		.loc 1 322 3
  77 000a A822     		movs	r2, #168
  78 000c 0021     		movs	r1, #0
  79 000e 3868     		ldr	r0, [r7]
  80 0010 FFF7FEFF 		bl	memset
 323:Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
  81              		.loc 1 323 25
  82 0014 3B68     		ldr	r3, [r7]
  83 0016 0322     		movs	r2, #3
  84 0018 1A61     		str	r2, [r3, #16]
 324:Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  85              		.loc 1 324 25
  86 001a 3B68     		ldr	r3, [r7]
  87 001c 0322     		movs	r2, #3
  88 001e 5A61     		str	r2, [r3, #20]
 325:Src/SEGGER_RTT.c ****   //
 326:Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 327:Src/SEGGER_RTT.c ****   //
 328:Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
  89              		.loc 1 328 27
  90 0020 3B68     		ldr	r3, [r7]
  91 0022 204A     		ldr	r2, .L4+4
  92 0024 9A61     		str	r2, [r3, #24]
 329:Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
  93              		.loc 1 329 27
  94 0026 3B68     		ldr	r3, [r7]
  95 0028 1F4A     		ldr	r2, .L4+8
  96 002a DA61     		str	r2, [r3, #28]
 330:Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
  97              		.loc 1 330 27
  98 002c 3B68     		ldr	r3, [r7]
  99 002e 4FF48062 		mov	r2, #1024
 100 0032 1A62     		str	r2, [r3, #32]
 331:Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 101              		.loc 1 331 27
 102 0034 3B68     		ldr	r3, [r7]
 103 0036 0022     		movs	r2, #0
 104 0038 9A62     		str	r2, [r3, #40]
 332:Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 105              		.loc 1 332 27
 106 003a 3B68     		ldr	r3, [r7]
 107 003c 0022     		movs	r2, #0
 108 003e 5A62     		str	r2, [r3, #36]
 333:Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 109              		.loc 1 333 27
 110 0040 3B68     		ldr	r3, [r7]
 111 0042 0022     		movs	r2, #0
 112 0044 DA62     		str	r2, [r3, #44]
 334:Src/SEGGER_RTT.c ****   //
 335:Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 336:Src/SEGGER_RTT.c ****   //
 337:Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 113              		.loc 1 337 29
 114 0046 3B68     		ldr	r3, [r7]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 9


 115 0048 164A     		ldr	r2, .L4+4
 116 004a 1A66     		str	r2, [r3, #96]
 338:Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 117              		.loc 1 338 29
 118 004c 3B68     		ldr	r3, [r7]
 119 004e 174A     		ldr	r2, .L4+12
 120 0050 5A66     		str	r2, [r3, #100]
 339:Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 121              		.loc 1 339 29
 122 0052 3B68     		ldr	r3, [r7]
 123 0054 1022     		movs	r2, #16
 124 0056 9A66     		str	r2, [r3, #104]
 340:Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 125              		.loc 1 340 29
 126 0058 3B68     		ldr	r3, [r7]
 127 005a 0022     		movs	r2, #0
 128 005c 1A67     		str	r2, [r3, #112]
 341:Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 129              		.loc 1 341 29
 130 005e 3B68     		ldr	r3, [r7]
 131 0060 0022     		movs	r2, #0
 132 0062 DA66     		str	r2, [r3, #108]
 342:Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 133              		.loc 1 342 29
 134 0064 3B68     		ldr	r3, [r7]
 135 0066 0022     		movs	r2, #0
 136 0068 5A67     		str	r2, [r3, #116]
 343:Src/SEGGER_RTT.c ****   //
 344:Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 345:Src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 346:Src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 347:Src/SEGGER_RTT.c ****   //
 348:Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 137              		.loc 1 348 3
 138              		.syntax unified
 139              	@ 348 "Src/SEGGER_RTT.c" 1
 140 006a BFF35F8F 		dmb
 141              	
 142              	@ 0 "" 2
 349:Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 143              		.loc 1 349 10
 144              		.thumb
 145              		.syntax unified
 146 006e 0023     		movs	r3, #0
 147 0070 7B60     		str	r3, [r7, #4]
 148              		.loc 1 349 3
 149 0072 0CE0     		b	.L2
 150              	.L3:
 350:Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 151              		.loc 1 350 50 discriminator 3
 152 0074 7B68     		ldr	r3, [r7, #4]
 153 0076 C3F10F03 		rsb	r3, r3, #15
 154              		.loc 1 350 27 discriminator 3
 155 007a 0D4A     		ldr	r2, .L4+16
 156 007c D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 157              		.loc 1 350 16 discriminator 3
 158 007e 3A68     		ldr	r2, [r7]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 10


 159 0080 7B68     		ldr	r3, [r7, #4]
 160 0082 1344     		add	r3, r3, r2
 161 0084 0A46     		mov	r2, r1
 162 0086 1A70     		strb	r2, [r3]
 349:Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 163              		.loc 1 349 42 discriminator 3
 164 0088 7B68     		ldr	r3, [r7, #4]
 165 008a 0133     		adds	r3, r3, #1
 166 008c 7B60     		str	r3, [r7, #4]
 167              	.L2:
 349:Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 168              		.loc 1 349 17 discriminator 1
 169 008e 7B68     		ldr	r3, [r7, #4]
 170 0090 0F2B     		cmp	r3, #15
 171 0092 EFD9     		bls	.L3
 351:Src/SEGGER_RTT.c ****   }
 352:Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 172              		.loc 1 352 3
 173              		.syntax unified
 174              	@ 352 "Src/SEGGER_RTT.c" 1
 175 0094 BFF35F8F 		dmb
 176              	
 177              	@ 0 "" 2
 353:Src/SEGGER_RTT.c **** }
 178              		.loc 1 353 1
 179              		.thumb
 180              		.syntax unified
 181 0098 00BF     		nop
 182 009a 0837     		adds	r7, r7, #8
 183              		.cfi_def_cfa_offset 8
 184 009c BD46     		mov	sp, r7
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 009e 80BD     		pop	{r7, pc}
 188              	.L5:
 189              		.align	2
 190              	.L4:
 191 00a0 00000000 		.word	_SEGGER_RTT
 192 00a4 00000000 		.word	.LC0
 193 00a8 00000000 		.word	_acUpBuffer
 194 00ac 00000000 		.word	_acDownBuffer
 195 00b0 00000000 		.word	_aInitStr.0
 196              		.cfi_endproc
 197              	.LFE0:
 199              		.section	.text._WriteBlocking,"ax",%progbits
 200              		.align	1
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 205              	_WriteBlocking:
 206              	.LFB1:
 354:Src/SEGGER_RTT.c **** 
 355:Src/SEGGER_RTT.c **** /*********************************************************************
 356:Src/SEGGER_RTT.c **** *
 357:Src/SEGGER_RTT.c **** *       _WriteBlocking()
 358:Src/SEGGER_RTT.c **** *
 359:Src/SEGGER_RTT.c **** *  Function description
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 11


 360:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 361:Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 362:Src/SEGGER_RTT.c **** *    read by the host.
 363:Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 364:Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 365:Src/SEGGER_RTT.c **** *
 366:Src/SEGGER_RTT.c **** *  Parameters
 367:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 368:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 369:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 370:Src/SEGGER_RTT.c **** *
 371:Src/SEGGER_RTT.c **** *  Return value
 372:Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 373:Src/SEGGER_RTT.c **** */
 374:Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 207              		.loc 1 374 101
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 40
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211 0000 80B5     		push	{r7, lr}
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 7, -8
 214              		.cfi_offset 14, -4
 215 0002 8AB0     		sub	sp, sp, #40
 216              		.cfi_def_cfa_offset 48
 217 0004 00AF     		add	r7, sp, #0
 218              		.cfi_def_cfa_register 7
 219 0006 F860     		str	r0, [r7, #12]
 220 0008 B960     		str	r1, [r7, #8]
 221 000a 7A60     		str	r2, [r7, #4]
 375:Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 376:Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 377:Src/SEGGER_RTT.c ****   unsigned RdOff;
 378:Src/SEGGER_RTT.c ****   unsigned WrOff;
 379:Src/SEGGER_RTT.c ****   volatile char* pDst;
 380:Src/SEGGER_RTT.c ****   //
 381:Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 382:Src/SEGGER_RTT.c ****   //
 383:Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 222              		.loc 1 383 19
 223 000c 0023     		movs	r3, #0
 224 000e 3B62     		str	r3, [r7, #32]
 384:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 225              		.loc 1 384 9
 226 0010 FB68     		ldr	r3, [r7, #12]
 227 0012 DB68     		ldr	r3, [r3, #12]
 228 0014 FB61     		str	r3, [r7, #28]
 229              	.L10:
 385:Src/SEGGER_RTT.c ****   do {
 386:Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 230              		.loc 1 386 11
 231 0016 FB68     		ldr	r3, [r7, #12]
 232 0018 1B69     		ldr	r3, [r3, #16]
 233 001a BB61     		str	r3, [r7, #24]
 387:Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 234              		.loc 1 387 8
 235 001c BA69     		ldr	r2, [r7, #24]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 12


 236 001e FB69     		ldr	r3, [r7, #28]
 237 0020 9A42     		cmp	r2, r3
 238 0022 05D9     		bls	.L7
 388:Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 239              		.loc 1 388 31
 240 0024 BA69     		ldr	r2, [r7, #24]
 241 0026 FB69     		ldr	r3, [r7, #28]
 242 0028 D31A     		subs	r3, r2, r3
 243              		.loc 1 388 23
 244 002a 013B     		subs	r3, r3, #1
 245 002c 7B62     		str	r3, [r7, #36]
 246 002e 07E0     		b	.L8
 247              	.L7:
 389:Src/SEGGER_RTT.c ****     } else {
 390:Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 248              		.loc 1 390 30
 249 0030 FB68     		ldr	r3, [r7, #12]
 250 0032 9A68     		ldr	r2, [r3, #8]
 251              		.loc 1 390 62
 252 0034 B969     		ldr	r1, [r7, #24]
 253 0036 FB69     		ldr	r3, [r7, #28]
 254 0038 CB1A     		subs	r3, r1, r3
 255              		.loc 1 390 45
 256 003a 1344     		add	r3, r3, r2
 257              		.loc 1 390 23
 258 003c 013B     		subs	r3, r3, #1
 259 003e 7B62     		str	r3, [r7, #36]
 260              	.L8:
 391:Src/SEGGER_RTT.c ****     }
 392:Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 261              		.loc 1 392 23
 262 0040 FB68     		ldr	r3, [r7, #12]
 263 0042 9A68     		ldr	r2, [r3, #8]
 264 0044 FB69     		ldr	r3, [r7, #28]
 265 0046 D31A     		subs	r3, r2, r3
 266              		.loc 1 392 21
 267 0048 7A6A     		ldr	r2, [r7, #36]
 268 004a 9342     		cmp	r3, r2
 269 004c 28BF     		it	cs
 270 004e 1346     		movcs	r3, r2
 271 0050 7B62     		str	r3, [r7, #36]
 393:Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 272              		.loc 1 393 21
 273 0052 7A6A     		ldr	r2, [r7, #36]
 274 0054 7B68     		ldr	r3, [r7, #4]
 275 0056 9342     		cmp	r3, r2
 276 0058 28BF     		it	cs
 277 005a 1346     		movcs	r3, r2
 278 005c 7B62     		str	r3, [r7, #36]
 394:Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 279              		.loc 1 394 18
 280 005e FB68     		ldr	r3, [r7, #12]
 281 0060 5A68     		ldr	r2, [r3, #4]
 282              		.loc 1 394 10
 283 0062 FB69     		ldr	r3, [r7, #28]
 284 0064 1344     		add	r3, r3, r2
 285 0066 7B61     		str	r3, [r7, #20]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 13


 395:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 396:Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 397:Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 398:Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 399:Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 400:Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 401:Src/SEGGER_RTT.c ****     };
 402:Src/SEGGER_RTT.c **** #else
 403:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 286              		.loc 1 403 5
 287 0068 7A6A     		ldr	r2, [r7, #36]
 288 006a B968     		ldr	r1, [r7, #8]
 289 006c 7869     		ldr	r0, [r7, #20]
 290 006e FFF7FEFF 		bl	memcpy
 404:Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 291              		.loc 1 404 21
 292 0072 3A6A     		ldr	r2, [r7, #32]
 293 0074 7B6A     		ldr	r3, [r7, #36]
 294 0076 1344     		add	r3, r3, r2
 295 0078 3B62     		str	r3, [r7, #32]
 405:Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 296              		.loc 1 405 21
 297 007a BA68     		ldr	r2, [r7, #8]
 298 007c 7B6A     		ldr	r3, [r7, #36]
 299 007e 1344     		add	r3, r3, r2
 300 0080 BB60     		str	r3, [r7, #8]
 406:Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 301              		.loc 1 406 21
 302 0082 7A68     		ldr	r2, [r7, #4]
 303 0084 7B6A     		ldr	r3, [r7, #36]
 304 0086 D31A     		subs	r3, r2, r3
 305 0088 7B60     		str	r3, [r7, #4]
 407:Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 306              		.loc 1 407 21
 307 008a FA69     		ldr	r2, [r7, #28]
 308 008c 7B6A     		ldr	r3, [r7, #36]
 309 008e 1344     		add	r3, r3, r2
 310 0090 FB61     		str	r3, [r7, #28]
 408:Src/SEGGER_RTT.c **** #endif
 409:Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 311              		.loc 1 409 23
 312 0092 FB68     		ldr	r3, [r7, #12]
 313 0094 9B68     		ldr	r3, [r3, #8]
 314              		.loc 1 409 8
 315 0096 FA69     		ldr	r2, [r7, #28]
 316 0098 9A42     		cmp	r2, r3
 317 009a 01D1     		bne	.L9
 410:Src/SEGGER_RTT.c ****       WrOff = 0u;
 318              		.loc 1 410 13
 319 009c 0023     		movs	r3, #0
 320 009e FB61     		str	r3, [r7, #28]
 321              	.L9:
 411:Src/SEGGER_RTT.c ****     }
 412:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 322              		.loc 1 412 5
 323              		.syntax unified
 324              	@ 412 "Src/SEGGER_RTT.c" 1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 14


 325 00a0 BFF35F8F 		dmb
 326              	
 327              	@ 0 "" 2
 413:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 328              		.loc 1 413 18
 329              		.thumb
 330              		.syntax unified
 331 00a4 FB68     		ldr	r3, [r7, #12]
 332 00a6 FA69     		ldr	r2, [r7, #28]
 333 00a8 DA60     		str	r2, [r3, #12]
 414:Src/SEGGER_RTT.c ****   } while (NumBytes);
 334              		.loc 1 414 12
 335 00aa 7B68     		ldr	r3, [r7, #4]
 336 00ac 002B     		cmp	r3, #0
 337 00ae B2D1     		bne	.L10
 415:Src/SEGGER_RTT.c ****   return NumBytesWritten;
 338              		.loc 1 415 10
 339 00b0 3B6A     		ldr	r3, [r7, #32]
 416:Src/SEGGER_RTT.c **** }
 340              		.loc 1 416 1
 341 00b2 1846     		mov	r0, r3
 342 00b4 2837     		adds	r7, r7, #40
 343              		.cfi_def_cfa_offset 8
 344 00b6 BD46     		mov	sp, r7
 345              		.cfi_def_cfa_register 13
 346              		@ sp needed
 347 00b8 80BD     		pop	{r7, pc}
 348              		.cfi_endproc
 349              	.LFE1:
 351              		.section	.text._WriteNoCheck,"ax",%progbits
 352              		.align	1
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 357              	_WriteNoCheck:
 358              	.LFB2:
 417:Src/SEGGER_RTT.c **** 
 418:Src/SEGGER_RTT.c **** /*********************************************************************
 419:Src/SEGGER_RTT.c **** *
 420:Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 421:Src/SEGGER_RTT.c **** *
 422:Src/SEGGER_RTT.c **** *  Function description
 423:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 424:Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 425:Src/SEGGER_RTT.c **** *    read by the host.
 426:Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 427:Src/SEGGER_RTT.c **** *
 428:Src/SEGGER_RTT.c **** *  Parameters
 429:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 430:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 431:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 432:Src/SEGGER_RTT.c **** *
 433:Src/SEGGER_RTT.c **** *  Notes
 434:Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 435:Src/SEGGER_RTT.c **** */
 436:Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 359              		.loc 1 436 94
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 15


 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 32
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363 0000 80B5     		push	{r7, lr}
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
 367 0002 88B0     		sub	sp, sp, #32
 368              		.cfi_def_cfa_offset 40
 369 0004 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
 371 0006 F860     		str	r0, [r7, #12]
 372 0008 B960     		str	r1, [r7, #8]
 373 000a 7A60     		str	r2, [r7, #4]
 437:Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 438:Src/SEGGER_RTT.c ****   unsigned WrOff;
 439:Src/SEGGER_RTT.c ****   unsigned Rem;
 440:Src/SEGGER_RTT.c ****   volatile char* pDst;
 441:Src/SEGGER_RTT.c **** 
 442:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 374              		.loc 1 442 9
 375 000c FB68     		ldr	r3, [r7, #12]
 376 000e DB68     		ldr	r3, [r3, #12]
 377 0010 FB61     		str	r3, [r7, #28]
 443:Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 378              		.loc 1 443 14
 379 0012 FB68     		ldr	r3, [r7, #12]
 380 0014 9A68     		ldr	r2, [r3, #8]
 381              		.loc 1 443 7
 382 0016 FB69     		ldr	r3, [r7, #28]
 383 0018 D31A     		subs	r3, r2, r3
 384 001a BB61     		str	r3, [r7, #24]
 444:Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 385              		.loc 1 444 6
 386 001c BA69     		ldr	r2, [r7, #24]
 387 001e 7B68     		ldr	r3, [r7, #4]
 388 0020 9A42     		cmp	r2, r3
 389 0022 11D9     		bls	.L13
 445:Src/SEGGER_RTT.c ****     //
 446:Src/SEGGER_RTT.c ****     // All data fits before wrap around
 447:Src/SEGGER_RTT.c ****     //
 448:Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 390              		.loc 1 448 18
 391 0024 FB68     		ldr	r3, [r7, #12]
 392 0026 5A68     		ldr	r2, [r3, #4]
 393              		.loc 1 448 10
 394 0028 FB69     		ldr	r3, [r7, #28]
 395 002a 1344     		add	r3, r3, r2
 396 002c 3B61     		str	r3, [r7, #16]
 449:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 450:Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 451:Src/SEGGER_RTT.c ****     while (NumBytes--) {
 452:Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 453:Src/SEGGER_RTT.c ****     };
 454:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 455:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 456:Src/SEGGER_RTT.c **** #else
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 16


 457:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 397              		.loc 1 457 5
 398 002e 7A68     		ldr	r2, [r7, #4]
 399 0030 B968     		ldr	r1, [r7, #8]
 400 0032 3869     		ldr	r0, [r7, #16]
 401 0034 FFF7FEFF 		bl	memcpy
 458:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 402              		.loc 1 458 5
 403              		.syntax unified
 404              	@ 458 "Src/SEGGER_RTT.c" 1
 405 0038 BFF35F8F 		dmb
 406              	
 407              	@ 0 "" 2
 459:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 408              		.loc 1 459 26
 409              		.thumb
 410              		.syntax unified
 411 003c FA69     		ldr	r2, [r7, #28]
 412 003e 7B68     		ldr	r3, [r7, #4]
 413 0040 1A44     		add	r2, r2, r3
 414              		.loc 1 459 18
 415 0042 FB68     		ldr	r3, [r7, #12]
 416 0044 DA60     		str	r2, [r3, #12]
 460:Src/SEGGER_RTT.c **** #endif
 461:Src/SEGGER_RTT.c ****   } else {
 462:Src/SEGGER_RTT.c ****     //
 463:Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 464:Src/SEGGER_RTT.c ****     //
 465:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 466:Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 467:Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 468:Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 469:Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 470:Src/SEGGER_RTT.c ****     };
 471:Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 472:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 473:Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 474:Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 475:Src/SEGGER_RTT.c ****     };
 476:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 477:Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 478:Src/SEGGER_RTT.c **** #else
 479:Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 480:Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 481:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 482:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 483:Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 484:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 485:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 486:Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 487:Src/SEGGER_RTT.c **** #endif
 488:Src/SEGGER_RTT.c ****   }
 489:Src/SEGGER_RTT.c **** }
 417              		.loc 1 489 1
 418 0046 1FE0     		b	.L15
 419              	.L13:
 479:Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 17


 420              		.loc 1 479 20
 421 0048 BB69     		ldr	r3, [r7, #24]
 422 004a 7B61     		str	r3, [r7, #20]
 480:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 423              		.loc 1 480 18
 424 004c FB68     		ldr	r3, [r7, #12]
 425 004e 5A68     		ldr	r2, [r3, #4]
 480:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 426              		.loc 1 480 10
 427 0050 FB69     		ldr	r3, [r7, #28]
 428 0052 1344     		add	r3, r3, r2
 429 0054 3B61     		str	r3, [r7, #16]
 481:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 430              		.loc 1 481 5
 431 0056 7A69     		ldr	r2, [r7, #20]
 432 0058 B968     		ldr	r1, [r7, #8]
 433 005a 3869     		ldr	r0, [r7, #16]
 434 005c FFF7FEFF 		bl	memcpy
 482:Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 435              		.loc 1 482 20
 436 0060 7A68     		ldr	r2, [r7, #4]
 437 0062 BB69     		ldr	r3, [r7, #24]
 438 0064 D31A     		subs	r3, r2, r3
 439 0066 7B61     		str	r3, [r7, #20]
 483:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 440              		.loc 1 483 10
 441 0068 FB68     		ldr	r3, [r7, #12]
 442 006a 5B68     		ldr	r3, [r3, #4]
 443 006c 3B61     		str	r3, [r7, #16]
 484:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 444              		.loc 1 484 5
 445 006e BA68     		ldr	r2, [r7, #8]
 446 0070 BB69     		ldr	r3, [r7, #24]
 447 0072 1344     		add	r3, r3, r2
 448 0074 7A69     		ldr	r2, [r7, #20]
 449 0076 1946     		mov	r1, r3
 450 0078 3869     		ldr	r0, [r7, #16]
 451 007a FFF7FEFF 		bl	memcpy
 485:Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 452              		.loc 1 485 5
 453              		.syntax unified
 454              	@ 485 "Src/SEGGER_RTT.c" 1
 455 007e BFF35F8F 		dmb
 456              	
 457              	@ 0 "" 2
 486:Src/SEGGER_RTT.c **** #endif
 458              		.loc 1 486 18
 459              		.thumb
 460              		.syntax unified
 461 0082 FB68     		ldr	r3, [r7, #12]
 462 0084 7A69     		ldr	r2, [r7, #20]
 463 0086 DA60     		str	r2, [r3, #12]
 464              	.L15:
 465              		.loc 1 489 1
 466 0088 00BF     		nop
 467 008a 2037     		adds	r7, r7, #32
 468              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 18


 469 008c BD46     		mov	sp, r7
 470              		.cfi_def_cfa_register 13
 471              		@ sp needed
 472 008e 80BD     		pop	{r7, pc}
 473              		.cfi_endproc
 474              	.LFE2:
 476              		.section	.text._PostTerminalSwitch,"ax",%progbits
 477              		.align	1
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 482              	_PostTerminalSwitch:
 483              	.LFB3:
 490:Src/SEGGER_RTT.c **** 
 491:Src/SEGGER_RTT.c **** /*********************************************************************
 492:Src/SEGGER_RTT.c **** *
 493:Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 494:Src/SEGGER_RTT.c **** *
 495:Src/SEGGER_RTT.c **** *  Function description
 496:Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 497:Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 498:Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 499:Src/SEGGER_RTT.c **** *
 500:Src/SEGGER_RTT.c **** *  Parameters
 501:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 502:Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 503:Src/SEGGER_RTT.c **** */
 504:Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 484              		.loc 1 504 88
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 16
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488 0000 80B5     		push	{r7, lr}
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 7, -8
 491              		.cfi_offset 14, -4
 492 0002 84B0     		sub	sp, sp, #16
 493              		.cfi_def_cfa_offset 24
 494 0004 00AF     		add	r7, sp, #0
 495              		.cfi_def_cfa_register 7
 496 0006 7860     		str	r0, [r7, #4]
 497 0008 0B46     		mov	r3, r1
 498 000a FB70     		strb	r3, [r7, #3]
 505:Src/SEGGER_RTT.c ****   unsigned char ac[2];
 506:Src/SEGGER_RTT.c **** 
 507:Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 499              		.loc 1 507 9
 500 000c FF23     		movs	r3, #255
 501 000e 3B73     		strb	r3, [r7, #12]
 508:Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 502              		.loc 1 508 23
 503 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 504 0012 074A     		ldr	r2, .L17
 505 0014 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 506              		.loc 1 508 9
 507 0016 7B73     		strb	r3, [r7, #13]
 509:Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 19


 508              		.loc 1 509 3
 509 0018 07F10C03 		add	r3, r7, #12
 510 001c 0222     		movs	r2, #2
 511 001e 1946     		mov	r1, r3
 512 0020 7868     		ldr	r0, [r7, #4]
 513 0022 FFF7FEFF 		bl	_WriteBlocking
 510:Src/SEGGER_RTT.c **** }
 514              		.loc 1 510 1
 515 0026 00BF     		nop
 516 0028 1037     		adds	r7, r7, #16
 517              		.cfi_def_cfa_offset 8
 518 002a BD46     		mov	sp, r7
 519              		.cfi_def_cfa_register 13
 520              		@ sp needed
 521 002c 80BD     		pop	{r7, pc}
 522              	.L18:
 523 002e 00BF     		.align	2
 524              	.L17:
 525 0030 00000000 		.word	_aTerminalId
 526              		.cfi_endproc
 527              	.LFE3:
 529              		.section	.text._GetAvailWriteSpace,"ax",%progbits
 530              		.align	1
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 535              	_GetAvailWriteSpace:
 536              	.LFB4:
 511:Src/SEGGER_RTT.c **** 
 512:Src/SEGGER_RTT.c **** /*********************************************************************
 513:Src/SEGGER_RTT.c **** *
 514:Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 515:Src/SEGGER_RTT.c **** *
 516:Src/SEGGER_RTT.c **** *  Function description
 517:Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 518:Src/SEGGER_RTT.c **** *    buffer without blocking.
 519:Src/SEGGER_RTT.c **** *
 520:Src/SEGGER_RTT.c **** *  Parameters
 521:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 522:Src/SEGGER_RTT.c **** *
 523:Src/SEGGER_RTT.c **** *  Return value
 524:Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 525:Src/SEGGER_RTT.c **** */
 526:Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 537              		.loc 1 526 66
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 24
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542 0000 80B4     		push	{r7}
 543              		.cfi_def_cfa_offset 4
 544              		.cfi_offset 7, -4
 545 0002 87B0     		sub	sp, sp, #28
 546              		.cfi_def_cfa_offset 32
 547 0004 00AF     		add	r7, sp, #0
 548              		.cfi_def_cfa_register 7
 549 0006 7860     		str	r0, [r7, #4]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 20


 527:Src/SEGGER_RTT.c ****   unsigned RdOff;
 528:Src/SEGGER_RTT.c ****   unsigned WrOff;
 529:Src/SEGGER_RTT.c ****   unsigned r;
 530:Src/SEGGER_RTT.c ****   //
 531:Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 532:Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 533:Src/SEGGER_RTT.c ****   //
 534:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 550              		.loc 1 534 9
 551 0008 7B68     		ldr	r3, [r7, #4]
 552 000a 1B69     		ldr	r3, [r3, #16]
 553 000c 3B61     		str	r3, [r7, #16]
 535:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 554              		.loc 1 535 9
 555 000e 7B68     		ldr	r3, [r7, #4]
 556 0010 DB68     		ldr	r3, [r3, #12]
 557 0012 FB60     		str	r3, [r7, #12]
 536:Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 558              		.loc 1 536 6
 559 0014 3A69     		ldr	r2, [r7, #16]
 560 0016 FB68     		ldr	r3, [r7, #12]
 561 0018 9A42     		cmp	r2, r3
 562 001a 08D8     		bhi	.L20
 537:Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 563              		.loc 1 537 14
 564 001c 7B68     		ldr	r3, [r7, #4]
 565 001e 9A68     		ldr	r2, [r3, #8]
 566              		.loc 1 537 34
 567 0020 FB68     		ldr	r3, [r7, #12]
 568 0022 D21A     		subs	r2, r2, r3
 569              		.loc 1 537 42
 570 0024 3B69     		ldr	r3, [r7, #16]
 571 0026 1344     		add	r3, r3, r2
 572              		.loc 1 537 7
 573 0028 013B     		subs	r3, r3, #1
 574 002a 7B61     		str	r3, [r7, #20]
 575 002c 04E0     		b	.L21
 576              	.L20:
 538:Src/SEGGER_RTT.c ****   } else {
 539:Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
 577              		.loc 1 539 15
 578 002e 3A69     		ldr	r2, [r7, #16]
 579 0030 FB68     		ldr	r3, [r7, #12]
 580 0032 D31A     		subs	r3, r2, r3
 581              		.loc 1 539 7
 582 0034 013B     		subs	r3, r3, #1
 583 0036 7B61     		str	r3, [r7, #20]
 584              	.L21:
 540:Src/SEGGER_RTT.c ****   }
 541:Src/SEGGER_RTT.c ****   return r;
 585              		.loc 1 541 10
 586 0038 7B69     		ldr	r3, [r7, #20]
 542:Src/SEGGER_RTT.c **** }
 587              		.loc 1 542 1
 588 003a 1846     		mov	r0, r3
 589 003c 1C37     		adds	r7, r7, #28
 590              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 21


 591 003e BD46     		mov	sp, r7
 592              		.cfi_def_cfa_register 13
 593              		@ sp needed
 594 0040 5DF8047B 		ldr	r7, [sp], #4
 595              		.cfi_restore 7
 596              		.cfi_def_cfa_offset 0
 597 0044 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE4:
 601              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 602              		.align	1
 603              		.global	SEGGER_RTT_ReadUpBufferNoLock
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 608              	SEGGER_RTT_ReadUpBufferNoLock:
 609              	.LFB5:
 543:Src/SEGGER_RTT.c **** 
 544:Src/SEGGER_RTT.c **** /*********************************************************************
 545:Src/SEGGER_RTT.c **** *
 546:Src/SEGGER_RTT.c **** *       Public code
 547:Src/SEGGER_RTT.c **** *
 548:Src/SEGGER_RTT.c **** **********************************************************************
 549:Src/SEGGER_RTT.c **** */
 550:Src/SEGGER_RTT.c **** 
 551:Src/SEGGER_RTT.c **** /*********************************************************************
 552:Src/SEGGER_RTT.c **** *
 553:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 554:Src/SEGGER_RTT.c **** *
 555:Src/SEGGER_RTT.c **** *  Function description
 556:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 557:Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 558:Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 559:Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 560:Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 561:Src/SEGGER_RTT.c **** *
 562:Src/SEGGER_RTT.c **** *  Parameters
 563:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 564:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 565:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 566:Src/SEGGER_RTT.c **** *
 567:Src/SEGGER_RTT.c **** *  Return value
 568:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 569:Src/SEGGER_RTT.c **** *
 570:Src/SEGGER_RTT.c **** *  Additional information
 571:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 572:Src/SEGGER_RTT.c **** */
 573:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 610              		.loc 1 573 96
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 48
 613              		@ frame_needed = 1, uses_anonymous_args = 0
 614 0000 80B5     		push	{r7, lr}
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 7, -8
 617              		.cfi_offset 14, -4
 618 0002 8CB0     		sub	sp, sp, #48
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 22


 619              		.cfi_def_cfa_offset 56
 620 0004 00AF     		add	r7, sp, #0
 621              		.cfi_def_cfa_register 7
 622 0006 F860     		str	r0, [r7, #12]
 623 0008 B960     		str	r1, [r7, #8]
 624 000a 7A60     		str	r2, [r7, #4]
 625              	.LBB2:
 574:Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 575:Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 576:Src/SEGGER_RTT.c ****   unsigned                RdOff;
 577:Src/SEGGER_RTT.c ****   unsigned                WrOff;
 578:Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 579:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 580:Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 581:Src/SEGGER_RTT.c **** 
 582:Src/SEGGER_RTT.c ****   INIT();
 626              		.loc 1 582 3
 627 000c 3E4B     		ldr	r3, .L29
 628 000e 3B62     		str	r3, [r7, #32]
 629 0010 3B6A     		ldr	r3, [r7, #32]
 630 0012 1B78     		ldrb	r3, [r3]
 631 0014 DBB2     		uxtb	r3, r3
 632 0016 002B     		cmp	r3, #0
 633 0018 01D1     		bne	.L24
 634              		.loc 1 582 3 is_stmt 0 discriminator 1
 635 001a FFF7FEFF 		bl	_DoInit
 636              	.L24:
 637              	.LBE2:
 583:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 638              		.loc 1 583 9 is_stmt 1
 639 001e FB68     		ldr	r3, [r7, #12]
 640 0020 5A1C     		adds	r2, r3, #1
 641 0022 1346     		mov	r3, r2
 642 0024 5B00     		lsls	r3, r3, #1
 643 0026 1344     		add	r3, r3, r2
 644 0028 DB00     		lsls	r3, r3, #3
 645 002a 374A     		ldr	r2, .L29
 646 002c 1344     		add	r3, r3, r2
 647 002e FB61     		str	r3, [r7, #28]
 584:Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 648              		.loc 1 584 11
 649 0030 BB68     		ldr	r3, [r7, #8]
 650 0032 7B62     		str	r3, [r7, #36]
 585:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 651              		.loc 1 585 9
 652 0034 FB69     		ldr	r3, [r7, #28]
 653 0036 1B69     		ldr	r3, [r3, #16]
 654 0038 BB62     		str	r3, [r7, #40]
 586:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 655              		.loc 1 586 9
 656 003a FB69     		ldr	r3, [r7, #28]
 657 003c DB68     		ldr	r3, [r3, #12]
 658 003e BB61     		str	r3, [r7, #24]
 587:Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 659              		.loc 1 587 16
 660 0040 0023     		movs	r3, #0
 661 0042 FB62     		str	r3, [r7, #44]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 23


 588:Src/SEGGER_RTT.c ****   //
 589:Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 590:Src/SEGGER_RTT.c ****   //
 591:Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 662              		.loc 1 591 6
 663 0044 BA6A     		ldr	r2, [r7, #40]
 664 0046 BB69     		ldr	r3, [r7, #24]
 665 0048 9A42     		cmp	r2, r3
 666 004a 2BD9     		bls	.L25
 592:Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 667              		.loc 1 592 24
 668 004c FB69     		ldr	r3, [r7, #28]
 669 004e 9A68     		ldr	r2, [r3, #8]
 670              		.loc 1 592 17
 671 0050 BB6A     		ldr	r3, [r7, #40]
 672 0052 D31A     		subs	r3, r2, r3
 673 0054 7B61     		str	r3, [r7, #20]
 593:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 674              		.loc 1 593 17
 675 0056 7A69     		ldr	r2, [r7, #20]
 676 0058 7B68     		ldr	r3, [r7, #4]
 677 005a 9342     		cmp	r3, r2
 678 005c 28BF     		it	cs
 679 005e 1346     		movcs	r3, r2
 680 0060 7B61     		str	r3, [r7, #20]
 594:Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 681              		.loc 1 594 18
 682 0062 FB69     		ldr	r3, [r7, #28]
 683 0064 5A68     		ldr	r2, [r3, #4]
 684              		.loc 1 594 10
 685 0066 BB6A     		ldr	r3, [r7, #40]
 686 0068 1344     		add	r3, r3, r2
 687 006a 3B61     		str	r3, [r7, #16]
 595:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 596:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 597:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 598:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 599:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 600:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 601:Src/SEGGER_RTT.c ****     };
 602:Src/SEGGER_RTT.c **** #else
 603:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 688              		.loc 1 603 5
 689 006c 7A69     		ldr	r2, [r7, #20]
 690 006e 3969     		ldr	r1, [r7, #16]
 691 0070 786A     		ldr	r0, [r7, #36]
 692 0072 FFF7FEFF 		bl	memcpy
 604:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 693              		.loc 1 604 18
 694 0076 FA6A     		ldr	r2, [r7, #44]
 695 0078 7B69     		ldr	r3, [r7, #20]
 696 007a 1344     		add	r3, r3, r2
 697 007c FB62     		str	r3, [r7, #44]
 605:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 698              		.loc 1 605 18
 699 007e 7A6A     		ldr	r2, [r7, #36]
 700 0080 7B69     		ldr	r3, [r7, #20]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 24


 701 0082 1344     		add	r3, r3, r2
 702 0084 7B62     		str	r3, [r7, #36]
 606:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 703              		.loc 1 606 18
 704 0086 7A68     		ldr	r2, [r7, #4]
 705 0088 7B69     		ldr	r3, [r7, #20]
 706 008a D31A     		subs	r3, r2, r3
 707 008c 7B60     		str	r3, [r7, #4]
 607:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 708              		.loc 1 607 18
 709 008e BA6A     		ldr	r2, [r7, #40]
 710 0090 7B69     		ldr	r3, [r7, #20]
 711 0092 1344     		add	r3, r3, r2
 712 0094 BB62     		str	r3, [r7, #40]
 608:Src/SEGGER_RTT.c **** #endif
 609:Src/SEGGER_RTT.c ****     //
 610:Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 611:Src/SEGGER_RTT.c ****     //
 612:Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 713              		.loc 1 612 23
 714 0096 FB69     		ldr	r3, [r7, #28]
 715 0098 9B68     		ldr	r3, [r3, #8]
 716              		.loc 1 612 8
 717 009a BA6A     		ldr	r2, [r7, #40]
 718 009c 9A42     		cmp	r2, r3
 719 009e 01D1     		bne	.L25
 613:Src/SEGGER_RTT.c ****       RdOff = 0u;
 720              		.loc 1 613 13
 721 00a0 0023     		movs	r3, #0
 722 00a2 BB62     		str	r3, [r7, #40]
 723              	.L25:
 614:Src/SEGGER_RTT.c ****     }
 615:Src/SEGGER_RTT.c ****   }
 616:Src/SEGGER_RTT.c ****   //
 617:Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 618:Src/SEGGER_RTT.c ****   //
 619:Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 724              		.loc 1 619 15
 725 00a4 BA69     		ldr	r2, [r7, #24]
 726 00a6 BB6A     		ldr	r3, [r7, #40]
 727 00a8 D31A     		subs	r3, r2, r3
 728 00aa 7B61     		str	r3, [r7, #20]
 620:Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 729              		.loc 1 620 15
 730 00ac 7A69     		ldr	r2, [r7, #20]
 731 00ae 7B68     		ldr	r3, [r7, #4]
 732 00b0 9342     		cmp	r3, r2
 733 00b2 28BF     		it	cs
 734 00b4 1346     		movcs	r3, r2
 735 00b6 7B61     		str	r3, [r7, #20]
 621:Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 736              		.loc 1 621 6
 737 00b8 7B69     		ldr	r3, [r7, #20]
 738 00ba 002B     		cmp	r3, #0
 739 00bc 19D0     		beq	.L26
 622:Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 740              		.loc 1 622 18
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 25


 741 00be FB69     		ldr	r3, [r7, #28]
 742 00c0 5A68     		ldr	r2, [r3, #4]
 743              		.loc 1 622 10
 744 00c2 BB6A     		ldr	r3, [r7, #40]
 745 00c4 1344     		add	r3, r3, r2
 746 00c6 3B61     		str	r3, [r7, #16]
 623:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 624:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 625:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 626:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 627:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 628:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 629:Src/SEGGER_RTT.c ****     };
 630:Src/SEGGER_RTT.c **** #else
 631:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 747              		.loc 1 631 5
 748 00c8 7A69     		ldr	r2, [r7, #20]
 749 00ca 3969     		ldr	r1, [r7, #16]
 750 00cc 786A     		ldr	r0, [r7, #36]
 751 00ce FFF7FEFF 		bl	memcpy
 632:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 752              		.loc 1 632 18
 753 00d2 FA6A     		ldr	r2, [r7, #44]
 754 00d4 7B69     		ldr	r3, [r7, #20]
 755 00d6 1344     		add	r3, r3, r2
 756 00d8 FB62     		str	r3, [r7, #44]
 633:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 757              		.loc 1 633 18
 758 00da 7A6A     		ldr	r2, [r7, #36]
 759 00dc 7B69     		ldr	r3, [r7, #20]
 760 00de 1344     		add	r3, r3, r2
 761 00e0 7B62     		str	r3, [r7, #36]
 634:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 762              		.loc 1 634 18
 763 00e2 7A68     		ldr	r2, [r7, #4]
 764 00e4 7B69     		ldr	r3, [r7, #20]
 765 00e6 D31A     		subs	r3, r2, r3
 766 00e8 7B60     		str	r3, [r7, #4]
 635:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 767              		.loc 1 635 18
 768 00ea BA6A     		ldr	r2, [r7, #40]
 769 00ec 7B69     		ldr	r3, [r7, #20]
 770 00ee 1344     		add	r3, r3, r2
 771 00f0 BB62     		str	r3, [r7, #40]
 772              	.L26:
 636:Src/SEGGER_RTT.c **** #endif
 637:Src/SEGGER_RTT.c ****   }
 638:Src/SEGGER_RTT.c ****   //
 639:Src/SEGGER_RTT.c ****   // Update read offset of buffer
 640:Src/SEGGER_RTT.c ****   //
 641:Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 773              		.loc 1 641 6
 774 00f2 FB6A     		ldr	r3, [r7, #44]
 775 00f4 002B     		cmp	r3, #0
 776 00f6 02D0     		beq	.L27
 642:Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 777              		.loc 1 642 18
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 26


 778 00f8 FB69     		ldr	r3, [r7, #28]
 779 00fa BA6A     		ldr	r2, [r7, #40]
 780 00fc 1A61     		str	r2, [r3, #16]
 781              	.L27:
 643:Src/SEGGER_RTT.c ****   }
 644:Src/SEGGER_RTT.c ****   //
 645:Src/SEGGER_RTT.c ****   return NumBytesRead;
 782              		.loc 1 645 10
 783 00fe FB6A     		ldr	r3, [r7, #44]
 646:Src/SEGGER_RTT.c **** }
 784              		.loc 1 646 1
 785 0100 1846     		mov	r0, r3
 786 0102 3037     		adds	r7, r7, #48
 787              		.cfi_def_cfa_offset 8
 788 0104 BD46     		mov	sp, r7
 789              		.cfi_def_cfa_register 13
 790              		@ sp needed
 791 0106 80BD     		pop	{r7, pc}
 792              	.L30:
 793              		.align	2
 794              	.L29:
 795 0108 00000000 		.word	_SEGGER_RTT
 796              		.cfi_endproc
 797              	.LFE5:
 799              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 800              		.align	1
 801              		.global	SEGGER_RTT_ReadNoLock
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 806              	SEGGER_RTT_ReadNoLock:
 807              	.LFB6:
 647:Src/SEGGER_RTT.c **** 
 648:Src/SEGGER_RTT.c **** /*********************************************************************
 649:Src/SEGGER_RTT.c **** *
 650:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 651:Src/SEGGER_RTT.c **** *
 652:Src/SEGGER_RTT.c **** *  Function description
 653:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 654:Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 655:Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 656:Src/SEGGER_RTT.c **** *
 657:Src/SEGGER_RTT.c **** *  Parameters
 658:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 659:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 660:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 661:Src/SEGGER_RTT.c **** *
 662:Src/SEGGER_RTT.c **** *  Return value
 663:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 664:Src/SEGGER_RTT.c **** */
 665:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 808              		.loc 1 665 88
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 48
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812 0000 80B5     		push	{r7, lr}
 813              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 27


 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 0002 8CB0     		sub	sp, sp, #48
 817              		.cfi_def_cfa_offset 56
 818 0004 00AF     		add	r7, sp, #0
 819              		.cfi_def_cfa_register 7
 820 0006 F860     		str	r0, [r7, #12]
 821 0008 B960     		str	r1, [r7, #8]
 822 000a 7A60     		str	r2, [r7, #4]
 823              	.LBB3:
 666:Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 667:Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 668:Src/SEGGER_RTT.c ****   unsigned                RdOff;
 669:Src/SEGGER_RTT.c ****   unsigned                WrOff;
 670:Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 671:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 672:Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 673:Src/SEGGER_RTT.c ****   //
 674:Src/SEGGER_RTT.c ****   INIT();
 824              		.loc 1 674 3
 825 000c 3E4B     		ldr	r3, .L37
 826 000e 3B62     		str	r3, [r7, #32]
 827 0010 3B6A     		ldr	r3, [r7, #32]
 828 0012 1B78     		ldrb	r3, [r3]
 829 0014 DBB2     		uxtb	r3, r3
 830 0016 002B     		cmp	r3, #0
 831 0018 01D1     		bne	.L32
 832              		.loc 1 674 3 is_stmt 0 discriminator 1
 833 001a FFF7FEFF 		bl	_DoInit
 834              	.L32:
 835              	.LBE3:
 675:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 836              		.loc 1 675 9 is_stmt 1
 837 001e FA68     		ldr	r2, [r7, #12]
 838 0020 1346     		mov	r3, r2
 839 0022 5B00     		lsls	r3, r3, #1
 840 0024 1344     		add	r3, r3, r2
 841 0026 DB00     		lsls	r3, r3, #3
 842 0028 6033     		adds	r3, r3, #96
 843 002a 374A     		ldr	r2, .L37
 844 002c 1344     		add	r3, r3, r2
 845 002e FB61     		str	r3, [r7, #28]
 676:Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 846              		.loc 1 676 11
 847 0030 BB68     		ldr	r3, [r7, #8]
 848 0032 7B62     		str	r3, [r7, #36]
 677:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 849              		.loc 1 677 9
 850 0034 FB69     		ldr	r3, [r7, #28]
 851 0036 1B69     		ldr	r3, [r3, #16]
 852 0038 BB62     		str	r3, [r7, #40]
 678:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 853              		.loc 1 678 9
 854 003a FB69     		ldr	r3, [r7, #28]
 855 003c DB68     		ldr	r3, [r3, #12]
 856 003e BB61     		str	r3, [r7, #24]
 679:Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 28


 857              		.loc 1 679 16
 858 0040 0023     		movs	r3, #0
 859 0042 FB62     		str	r3, [r7, #44]
 680:Src/SEGGER_RTT.c ****   //
 681:Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 682:Src/SEGGER_RTT.c ****   //
 683:Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 860              		.loc 1 683 6
 861 0044 BA6A     		ldr	r2, [r7, #40]
 862 0046 BB69     		ldr	r3, [r7, #24]
 863 0048 9A42     		cmp	r2, r3
 864 004a 2BD9     		bls	.L33
 684:Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 865              		.loc 1 684 24
 866 004c FB69     		ldr	r3, [r7, #28]
 867 004e 9A68     		ldr	r2, [r3, #8]
 868              		.loc 1 684 17
 869 0050 BB6A     		ldr	r3, [r7, #40]
 870 0052 D31A     		subs	r3, r2, r3
 871 0054 7B61     		str	r3, [r7, #20]
 685:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 872              		.loc 1 685 17
 873 0056 7A69     		ldr	r2, [r7, #20]
 874 0058 7B68     		ldr	r3, [r7, #4]
 875 005a 9342     		cmp	r3, r2
 876 005c 28BF     		it	cs
 877 005e 1346     		movcs	r3, r2
 878 0060 7B61     		str	r3, [r7, #20]
 686:Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 879              		.loc 1 686 18
 880 0062 FB69     		ldr	r3, [r7, #28]
 881 0064 5A68     		ldr	r2, [r3, #4]
 882              		.loc 1 686 10
 883 0066 BB6A     		ldr	r3, [r7, #40]
 884 0068 1344     		add	r3, r3, r2
 885 006a 3B61     		str	r3, [r7, #16]
 687:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 688:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 689:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 690:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 691:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 692:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 693:Src/SEGGER_RTT.c ****     };
 694:Src/SEGGER_RTT.c **** #else
 695:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 886              		.loc 1 695 5
 887 006c 7A69     		ldr	r2, [r7, #20]
 888 006e 3969     		ldr	r1, [r7, #16]
 889 0070 786A     		ldr	r0, [r7, #36]
 890 0072 FFF7FEFF 		bl	memcpy
 696:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 891              		.loc 1 696 18
 892 0076 FA6A     		ldr	r2, [r7, #44]
 893 0078 7B69     		ldr	r3, [r7, #20]
 894 007a 1344     		add	r3, r3, r2
 895 007c FB62     		str	r3, [r7, #44]
 697:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 29


 896              		.loc 1 697 18
 897 007e 7A6A     		ldr	r2, [r7, #36]
 898 0080 7B69     		ldr	r3, [r7, #20]
 899 0082 1344     		add	r3, r3, r2
 900 0084 7B62     		str	r3, [r7, #36]
 698:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 901              		.loc 1 698 18
 902 0086 7A68     		ldr	r2, [r7, #4]
 903 0088 7B69     		ldr	r3, [r7, #20]
 904 008a D31A     		subs	r3, r2, r3
 905 008c 7B60     		str	r3, [r7, #4]
 699:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 906              		.loc 1 699 18
 907 008e BA6A     		ldr	r2, [r7, #40]
 908 0090 7B69     		ldr	r3, [r7, #20]
 909 0092 1344     		add	r3, r3, r2
 910 0094 BB62     		str	r3, [r7, #40]
 700:Src/SEGGER_RTT.c **** #endif
 701:Src/SEGGER_RTT.c ****     //
 702:Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 703:Src/SEGGER_RTT.c ****     //
 704:Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 911              		.loc 1 704 23
 912 0096 FB69     		ldr	r3, [r7, #28]
 913 0098 9B68     		ldr	r3, [r3, #8]
 914              		.loc 1 704 8
 915 009a BA6A     		ldr	r2, [r7, #40]
 916 009c 9A42     		cmp	r2, r3
 917 009e 01D1     		bne	.L33
 705:Src/SEGGER_RTT.c ****       RdOff = 0u;
 918              		.loc 1 705 13
 919 00a0 0023     		movs	r3, #0
 920 00a2 BB62     		str	r3, [r7, #40]
 921              	.L33:
 706:Src/SEGGER_RTT.c ****     }
 707:Src/SEGGER_RTT.c ****   }
 708:Src/SEGGER_RTT.c ****   //
 709:Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 710:Src/SEGGER_RTT.c ****   //
 711:Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 922              		.loc 1 711 15
 923 00a4 BA69     		ldr	r2, [r7, #24]
 924 00a6 BB6A     		ldr	r3, [r7, #40]
 925 00a8 D31A     		subs	r3, r2, r3
 926 00aa 7B61     		str	r3, [r7, #20]
 712:Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 927              		.loc 1 712 15
 928 00ac 7A69     		ldr	r2, [r7, #20]
 929 00ae 7B68     		ldr	r3, [r7, #4]
 930 00b0 9342     		cmp	r3, r2
 931 00b2 28BF     		it	cs
 932 00b4 1346     		movcs	r3, r2
 933 00b6 7B61     		str	r3, [r7, #20]
 713:Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 934              		.loc 1 713 6
 935 00b8 7B69     		ldr	r3, [r7, #20]
 936 00ba 002B     		cmp	r3, #0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 30


 937 00bc 19D0     		beq	.L34
 714:Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 938              		.loc 1 714 18
 939 00be FB69     		ldr	r3, [r7, #28]
 940 00c0 5A68     		ldr	r2, [r3, #4]
 941              		.loc 1 714 10
 942 00c2 BB6A     		ldr	r3, [r7, #40]
 943 00c4 1344     		add	r3, r3, r2
 944 00c6 3B61     		str	r3, [r7, #16]
 715:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 716:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 717:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 718:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 719:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 720:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 721:Src/SEGGER_RTT.c ****     };
 722:Src/SEGGER_RTT.c **** #else
 723:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 945              		.loc 1 723 5
 946 00c8 7A69     		ldr	r2, [r7, #20]
 947 00ca 3969     		ldr	r1, [r7, #16]
 948 00cc 786A     		ldr	r0, [r7, #36]
 949 00ce FFF7FEFF 		bl	memcpy
 724:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 950              		.loc 1 724 18
 951 00d2 FA6A     		ldr	r2, [r7, #44]
 952 00d4 7B69     		ldr	r3, [r7, #20]
 953 00d6 1344     		add	r3, r3, r2
 954 00d8 FB62     		str	r3, [r7, #44]
 725:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 955              		.loc 1 725 18
 956 00da 7A6A     		ldr	r2, [r7, #36]
 957 00dc 7B69     		ldr	r3, [r7, #20]
 958 00de 1344     		add	r3, r3, r2
 959 00e0 7B62     		str	r3, [r7, #36]
 726:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 960              		.loc 1 726 18
 961 00e2 7A68     		ldr	r2, [r7, #4]
 962 00e4 7B69     		ldr	r3, [r7, #20]
 963 00e6 D31A     		subs	r3, r2, r3
 964 00e8 7B60     		str	r3, [r7, #4]
 727:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 965              		.loc 1 727 18
 966 00ea BA6A     		ldr	r2, [r7, #40]
 967 00ec 7B69     		ldr	r3, [r7, #20]
 968 00ee 1344     		add	r3, r3, r2
 969 00f0 BB62     		str	r3, [r7, #40]
 970              	.L34:
 728:Src/SEGGER_RTT.c **** #endif
 729:Src/SEGGER_RTT.c ****   }
 730:Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 971              		.loc 1 730 6
 972 00f2 FB6A     		ldr	r3, [r7, #44]
 973 00f4 002B     		cmp	r3, #0
 974 00f6 02D0     		beq	.L35
 731:Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 975              		.loc 1 731 18
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 31


 976 00f8 FB69     		ldr	r3, [r7, #28]
 977 00fa BA6A     		ldr	r2, [r7, #40]
 978 00fc 1A61     		str	r2, [r3, #16]
 979              	.L35:
 732:Src/SEGGER_RTT.c ****   }
 733:Src/SEGGER_RTT.c ****   //
 734:Src/SEGGER_RTT.c ****   return NumBytesRead;
 980              		.loc 1 734 10
 981 00fe FB6A     		ldr	r3, [r7, #44]
 735:Src/SEGGER_RTT.c **** }
 982              		.loc 1 735 1
 983 0100 1846     		mov	r0, r3
 984 0102 3037     		adds	r7, r7, #48
 985              		.cfi_def_cfa_offset 8
 986 0104 BD46     		mov	sp, r7
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 0106 80BD     		pop	{r7, pc}
 990              	.L38:
 991              		.align	2
 992              	.L37:
 993 0108 00000000 		.word	_SEGGER_RTT
 994              		.cfi_endproc
 995              	.LFE6:
 997              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 998              		.align	1
 999              		.global	SEGGER_RTT_ReadUpBuffer
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1004              	SEGGER_RTT_ReadUpBuffer:
 1005              	.LFB7:
 736:Src/SEGGER_RTT.c **** 
 737:Src/SEGGER_RTT.c **** /*********************************************************************
 738:Src/SEGGER_RTT.c **** *
 739:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 740:Src/SEGGER_RTT.c **** *
 741:Src/SEGGER_RTT.c **** *  Function description
 742:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 743:Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 744:Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 745:Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 746:Src/SEGGER_RTT.c **** *
 747:Src/SEGGER_RTT.c **** *  Parameters
 748:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 749:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 750:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 751:Src/SEGGER_RTT.c **** *
 752:Src/SEGGER_RTT.c **** *  Return value
 753:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 754:Src/SEGGER_RTT.c **** *
 755:Src/SEGGER_RTT.c **** *  Additional information
 756:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 757:Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 758:Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 759:Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 760:Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 32


 761:Src/SEGGER_RTT.c **** */
 762:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1006              		.loc 1 762 92
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 24
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014 0002 86B0     		sub	sp, sp, #24
 1015              		.cfi_def_cfa_offset 32
 1016 0004 00AF     		add	r7, sp, #0
 1017              		.cfi_def_cfa_register 7
 1018 0006 F860     		str	r0, [r7, #12]
 1019 0008 B960     		str	r1, [r7, #8]
 1020 000a 7A60     		str	r2, [r7, #4]
 1021              	.LBB4:
 763:Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 764:Src/SEGGER_RTT.c **** 
 765:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1022              		.loc 1 765 3
 1023              		.syntax unified
 1024              	@ 765 "Src/SEGGER_RTT.c" 1
 1025 000c EFF31183 		mrs   r3, basepri  
 1026 0010 4FF02001 		mov   r1, #32       
 1027 0014 81F31188 		msr   basepri, r1  
 1028              		
 1029              	@ 0 "" 2
 1030              		.thumb
 1031              		.syntax unified
 1032 0018 7B61     		str	r3, [r7, #20]
 766:Src/SEGGER_RTT.c ****   //
 767:Src/SEGGER_RTT.c ****   // Call the non-locking read function
 768:Src/SEGGER_RTT.c ****   //
 769:Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 1033              		.loc 1 769 18
 1034 001a 7A68     		ldr	r2, [r7, #4]
 1035 001c B968     		ldr	r1, [r7, #8]
 1036 001e F868     		ldr	r0, [r7, #12]
 1037 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 1038 0024 3861     		str	r0, [r7, #16]
 770:Src/SEGGER_RTT.c ****   //
 771:Src/SEGGER_RTT.c ****   // Finish up.
 772:Src/SEGGER_RTT.c ****   //
 773:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1039              		.loc 1 773 3
 1040 0026 7B69     		ldr	r3, [r7, #20]
 1041              		.syntax unified
 1042              	@ 773 "Src/SEGGER_RTT.c" 1
 1043 0028 83F31188 		msr   basepri, r3  
 1044              		
 1045              	@ 0 "" 2
 1046              		.thumb
 1047              		.syntax unified
 1048              	.LBE4:
 774:Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 33


 775:Src/SEGGER_RTT.c ****   return NumBytesRead;
 1049              		.loc 1 775 10
 1050 002c 3B69     		ldr	r3, [r7, #16]
 776:Src/SEGGER_RTT.c **** }
 1051              		.loc 1 776 1
 1052 002e 1846     		mov	r0, r3
 1053 0030 1837     		adds	r7, r7, #24
 1054              		.cfi_def_cfa_offset 8
 1055 0032 BD46     		mov	sp, r7
 1056              		.cfi_def_cfa_register 13
 1057              		@ sp needed
 1058 0034 80BD     		pop	{r7, pc}
 1059              		.cfi_endproc
 1060              	.LFE7:
 1062              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 1063              		.align	1
 1064              		.global	SEGGER_RTT_Read
 1065              		.syntax unified
 1066              		.thumb
 1067              		.thumb_func
 1069              	SEGGER_RTT_Read:
 1070              	.LFB8:
 777:Src/SEGGER_RTT.c **** 
 778:Src/SEGGER_RTT.c **** /*********************************************************************
 779:Src/SEGGER_RTT.c **** *
 780:Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 781:Src/SEGGER_RTT.c **** *
 782:Src/SEGGER_RTT.c **** *  Function description
 783:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 784:Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 785:Src/SEGGER_RTT.c **** *
 786:Src/SEGGER_RTT.c **** *  Parameters
 787:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 788:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 789:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 790:Src/SEGGER_RTT.c **** *
 791:Src/SEGGER_RTT.c **** *  Return value
 792:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 793:Src/SEGGER_RTT.c **** */
 794:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1071              		.loc 1 794 84
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 24
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 80B5     		push	{r7, lr}
 1076              		.cfi_def_cfa_offset 8
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 1079 0002 86B0     		sub	sp, sp, #24
 1080              		.cfi_def_cfa_offset 32
 1081 0004 00AF     		add	r7, sp, #0
 1082              		.cfi_def_cfa_register 7
 1083 0006 F860     		str	r0, [r7, #12]
 1084 0008 B960     		str	r1, [r7, #8]
 1085 000a 7A60     		str	r2, [r7, #4]
 1086              	.LBB5:
 795:Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 34


 796:Src/SEGGER_RTT.c **** 
 797:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1087              		.loc 1 797 3
 1088              		.syntax unified
 1089              	@ 797 "Src/SEGGER_RTT.c" 1
 1090 000c EFF31183 		mrs   r3, basepri  
 1091 0010 4FF02001 		mov   r1, #32       
 1092 0014 81F31188 		msr   basepri, r1  
 1093              		
 1094              	@ 0 "" 2
 1095              		.thumb
 1096              		.syntax unified
 1097 0018 7B61     		str	r3, [r7, #20]
 798:Src/SEGGER_RTT.c ****   //
 799:Src/SEGGER_RTT.c ****   // Call the non-locking read function
 800:Src/SEGGER_RTT.c ****   //
 801:Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1098              		.loc 1 801 18
 1099 001a 7A68     		ldr	r2, [r7, #4]
 1100 001c B968     		ldr	r1, [r7, #8]
 1101 001e F868     		ldr	r0, [r7, #12]
 1102 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1103 0024 3861     		str	r0, [r7, #16]
 802:Src/SEGGER_RTT.c ****   //
 803:Src/SEGGER_RTT.c ****   // Finish up.
 804:Src/SEGGER_RTT.c ****   //
 805:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1104              		.loc 1 805 3
 1105 0026 7B69     		ldr	r3, [r7, #20]
 1106              		.syntax unified
 1107              	@ 805 "Src/SEGGER_RTT.c" 1
 1108 0028 83F31188 		msr   basepri, r3  
 1109              		
 1110              	@ 0 "" 2
 1111              		.thumb
 1112              		.syntax unified
 1113              	.LBE5:
 806:Src/SEGGER_RTT.c ****   //
 807:Src/SEGGER_RTT.c ****   return NumBytesRead;
 1114              		.loc 1 807 10
 1115 002c 3B69     		ldr	r3, [r7, #16]
 808:Src/SEGGER_RTT.c **** }
 1116              		.loc 1 808 1
 1117 002e 1846     		mov	r0, r3
 1118 0030 1837     		adds	r7, r7, #24
 1119              		.cfi_def_cfa_offset 8
 1120 0032 BD46     		mov	sp, r7
 1121              		.cfi_def_cfa_register 13
 1122              		@ sp needed
 1123 0034 80BD     		pop	{r7, pc}
 1124              		.cfi_endproc
 1125              	.LFE8:
 1127              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1128              		.align	1
 1129              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1130              		.syntax unified
 1131              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 35


 1132              		.thumb_func
 1134              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1135              	.LFB9:
 809:Src/SEGGER_RTT.c **** 
 810:Src/SEGGER_RTT.c **** /*********************************************************************
 811:Src/SEGGER_RTT.c **** *
 812:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 813:Src/SEGGER_RTT.c **** *
 814:Src/SEGGER_RTT.c **** *  Function description
 815:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 816:Src/SEGGER_RTT.c **** *    control block.
 817:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 818:Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 819:Src/SEGGER_RTT.c **** *
 820:Src/SEGGER_RTT.c **** *  Parameters
 821:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 822:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 823:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 824:Src/SEGGER_RTT.c **** *
 825:Src/SEGGER_RTT.c **** *  Notes
 826:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 827:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 828:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 829:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 830:Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 831:Src/SEGGER_RTT.c **** *        connection reads RTT data.
 832:Src/SEGGER_RTT.c **** */
 833:Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1136              		.loc 1 833 104
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 32
 1139              		@ frame_needed = 1, uses_anonymous_args = 0
 1140 0000 80B5     		push	{r7, lr}
 1141              		.cfi_def_cfa_offset 8
 1142              		.cfi_offset 7, -8
 1143              		.cfi_offset 14, -4
 1144 0002 88B0     		sub	sp, sp, #32
 1145              		.cfi_def_cfa_offset 40
 1146 0004 00AF     		add	r7, sp, #0
 1147              		.cfi_def_cfa_register 7
 1148 0006 F860     		str	r0, [r7, #12]
 1149 0008 B960     		str	r1, [r7, #8]
 1150 000a 7A60     		str	r2, [r7, #4]
 834:Src/SEGGER_RTT.c ****   const char*           pData;
 835:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 836:Src/SEGGER_RTT.c ****   unsigned              Avail;
 837:Src/SEGGER_RTT.c ****   volatile char*        pDst;
 838:Src/SEGGER_RTT.c ****   //
 839:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 840:Src/SEGGER_RTT.c ****   //
 841:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1151              		.loc 1 841 9
 1152 000c BB68     		ldr	r3, [r7, #8]
 1153 000e FB61     		str	r3, [r7, #28]
 842:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1154              		.loc 1 842 9
 1155 0010 FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 36


 1156 0012 5A1C     		adds	r2, r3, #1
 1157 0014 1346     		mov	r3, r2
 1158 0016 5B00     		lsls	r3, r3, #1
 1159 0018 1344     		add	r3, r3, r2
 1160 001a DB00     		lsls	r3, r3, #3
 1161 001c 404A     		ldr	r2, .L53
 1162 001e 1344     		add	r3, r3, r2
 1163 0020 7B61     		str	r3, [r7, #20]
 843:Src/SEGGER_RTT.c ****   //
 844:Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 845:Src/SEGGER_RTT.c ****   //
 846:Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1164              		.loc 1 846 12
 1165 0022 7B69     		ldr	r3, [r7, #20]
 1166 0024 DA68     		ldr	r2, [r3, #12]
 1167              		.loc 1 846 28
 1168 0026 7B69     		ldr	r3, [r7, #20]
 1169 0028 1B69     		ldr	r3, [r3, #16]
 1170              		.loc 1 846 6
 1171 002a 9A42     		cmp	r2, r3
 1172 002c 04D1     		bne	.L44
 847:Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1173              		.loc 1 847 18
 1174 002e 7B69     		ldr	r3, [r7, #20]
 1175 0030 9B68     		ldr	r3, [r3, #8]
 1176              		.loc 1 847 11
 1177 0032 013B     		subs	r3, r3, #1
 1178 0034 BB61     		str	r3, [r7, #24]
 1179 0036 17E0     		b	.L45
 1180              	.L44:
 848:Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1181              		.loc 1 848 20
 1182 0038 7B69     		ldr	r3, [r7, #20]
 1183 003a DA68     		ldr	r2, [r3, #12]
 1184              		.loc 1 848 35
 1185 003c 7B69     		ldr	r3, [r7, #20]
 1186 003e 1B69     		ldr	r3, [r3, #16]
 1187              		.loc 1 848 13
 1188 0040 9A42     		cmp	r2, r3
 1189 0042 07D2     		bcs	.L46
 849:Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1190              		.loc 1 849 18
 1191 0044 7B69     		ldr	r3, [r7, #20]
 1192 0046 1A69     		ldr	r2, [r3, #16]
 1193              		.loc 1 849 33
 1194 0048 7B69     		ldr	r3, [r7, #20]
 1195 004a DB68     		ldr	r3, [r3, #12]
 1196              		.loc 1 849 26
 1197 004c D31A     		subs	r3, r2, r3
 1198              		.loc 1 849 11
 1199 004e 013B     		subs	r3, r3, #1
 1200 0050 BB61     		str	r3, [r7, #24]
 1201 0052 09E0     		b	.L45
 1202              	.L46:
 850:Src/SEGGER_RTT.c ****   } else {
 851:Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 1203              		.loc 1 851 18
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 37


 1204 0054 7B69     		ldr	r3, [r7, #20]
 1205 0056 1A69     		ldr	r2, [r3, #16]
 1206              		.loc 1 851 33
 1207 0058 7B69     		ldr	r3, [r7, #20]
 1208 005a DB68     		ldr	r3, [r3, #12]
 1209              		.loc 1 851 26
 1210 005c D21A     		subs	r2, r2, r3
 1211              		.loc 1 851 53
 1212 005e 7B69     		ldr	r3, [r7, #20]
 1213 0060 9B68     		ldr	r3, [r3, #8]
 1214              		.loc 1 851 46
 1215 0062 1344     		add	r3, r3, r2
 1216              		.loc 1 851 11
 1217 0064 013B     		subs	r3, r3, #1
 1218 0066 BB61     		str	r3, [r7, #24]
 1219              	.L45:
 852:Src/SEGGER_RTT.c ****   }
 853:Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1220              		.loc 1 853 6
 1221 0068 7A68     		ldr	r2, [r7, #4]
 1222 006a BB69     		ldr	r3, [r7, #24]
 1223 006c 9A42     		cmp	r2, r3
 1224 006e 15D9     		bls	.L47
 854:Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1225              		.loc 1 854 18
 1226 0070 7B69     		ldr	r3, [r7, #20]
 1227 0072 1A69     		ldr	r2, [r3, #16]
 1228              		.loc 1 854 31
 1229 0074 7968     		ldr	r1, [r7, #4]
 1230 0076 BB69     		ldr	r3, [r7, #24]
 1231 0078 CB1A     		subs	r3, r1, r3
 1232              		.loc 1 854 18
 1233 007a 1A44     		add	r2, r2, r3
 1234 007c 7B69     		ldr	r3, [r7, #20]
 1235 007e 1A61     		str	r2, [r3, #16]
 855:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1236              		.loc 1 855 11
 1237 0080 06E0     		b	.L48
 1238              	.L49:
 856:Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1239              		.loc 1 856 20
 1240 0082 7B69     		ldr	r3, [r7, #20]
 1241 0084 1A69     		ldr	r2, [r3, #16]
 1242              		.loc 1 856 28
 1243 0086 7B69     		ldr	r3, [r7, #20]
 1244 0088 9B68     		ldr	r3, [r3, #8]
 1245              		.loc 1 856 20
 1246 008a D21A     		subs	r2, r2, r3
 1247 008c 7B69     		ldr	r3, [r7, #20]
 1248 008e 1A61     		str	r2, [r3, #16]
 1249              	.L48:
 855:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1250              		.loc 1 855 17
 1251 0090 7B69     		ldr	r3, [r7, #20]
 1252 0092 1A69     		ldr	r2, [r3, #16]
 855:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1253              		.loc 1 855 33
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 38


 1254 0094 7B69     		ldr	r3, [r7, #20]
 1255 0096 9B68     		ldr	r3, [r3, #8]
 855:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1256              		.loc 1 855 25
 1257 0098 9A42     		cmp	r2, r3
 1258 009a F2D2     		bcs	.L49
 1259              	.L47:
 857:Src/SEGGER_RTT.c ****     }
 858:Src/SEGGER_RTT.c ****   }
 859:Src/SEGGER_RTT.c ****   //
 860:Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 861:Src/SEGGER_RTT.c ****   //
 862:Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1260              		.loc 1 862 16
 1261 009c 7B69     		ldr	r3, [r7, #20]
 1262 009e 9A68     		ldr	r2, [r3, #8]
 1263              		.loc 1 862 38
 1264 00a0 7B69     		ldr	r3, [r7, #20]
 1265 00a2 DB68     		ldr	r3, [r3, #12]
 1266              		.loc 1 862 9
 1267 00a4 D31A     		subs	r3, r2, r3
 1268 00a6 BB61     		str	r3, [r7, #24]
 1269              	.L52:
 863:Src/SEGGER_RTT.c ****   do {
 864:Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1270              		.loc 1 864 8
 1271 00a8 BA69     		ldr	r2, [r7, #24]
 1272 00aa 7B68     		ldr	r3, [r7, #4]
 1273 00ac 9A42     		cmp	r2, r3
 1274 00ae 13D9     		bls	.L50
 865:Src/SEGGER_RTT.c ****       //
 866:Src/SEGGER_RTT.c ****       // Last round
 867:Src/SEGGER_RTT.c ****       //
 868:Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1275              		.loc 1 868 20
 1276 00b0 7B69     		ldr	r3, [r7, #20]
 1277 00b2 5A68     		ldr	r2, [r3, #4]
 1278              		.loc 1 868 37
 1279 00b4 7B69     		ldr	r3, [r7, #20]
 1280 00b6 DB68     		ldr	r3, [r3, #12]
 1281              		.loc 1 868 12
 1282 00b8 1344     		add	r3, r3, r2
 1283 00ba 3B61     		str	r3, [r7, #16]
 869:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 870:Src/SEGGER_RTT.c ****       Avail = NumBytes;
 871:Src/SEGGER_RTT.c ****       while (NumBytes--) {
 872:Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 873:Src/SEGGER_RTT.c ****       };
 874:Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 875:Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 876:Src/SEGGER_RTT.c **** #else
 877:Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 1284              		.loc 1 877 7
 1285 00bc 7A68     		ldr	r2, [r7, #4]
 1286 00be F969     		ldr	r1, [r7, #28]
 1287 00c0 3869     		ldr	r0, [r7, #16]
 1288 00c2 FFF7FEFF 		bl	memcpy
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 39


 878:Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1289              		.loc 1 878 7
 1290              		.syntax unified
 1291              	@ 878 "Src/SEGGER_RTT.c" 1
 1292 00c6 BFF35F8F 		dmb
 1293              	
 1294              	@ 0 "" 2
 879:Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1295              		.loc 1 879 20
 1296              		.thumb
 1297              		.syntax unified
 1298 00ca 7B69     		ldr	r3, [r7, #20]
 1299 00cc DA68     		ldr	r2, [r3, #12]
 1300 00ce 7B68     		ldr	r3, [r7, #4]
 1301 00d0 1A44     		add	r2, r2, r3
 1302 00d2 7B69     		ldr	r3, [r7, #20]
 1303 00d4 DA60     		str	r2, [r3, #12]
 880:Src/SEGGER_RTT.c **** #endif
 881:Src/SEGGER_RTT.c ****       break;
 1304              		.loc 1 881 7
 1305 00d6 1FE0     		b	.L51
 1306              	.L50:
 882:Src/SEGGER_RTT.c ****     } else {
 883:Src/SEGGER_RTT.c ****       //
 884:Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 885:Src/SEGGER_RTT.c ****       //
 886:Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1307              		.loc 1 886 20
 1308 00d8 7B69     		ldr	r3, [r7, #20]
 1309 00da 5A68     		ldr	r2, [r3, #4]
 1310              		.loc 1 886 37
 1311 00dc 7B69     		ldr	r3, [r7, #20]
 1312 00de DB68     		ldr	r3, [r3, #12]
 1313              		.loc 1 886 12
 1314 00e0 1344     		add	r3, r3, r2
 1315 00e2 3B61     		str	r3, [r7, #16]
 887:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 888:Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 889:Src/SEGGER_RTT.c ****       while (Avail--) {
 890:Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 891:Src/SEGGER_RTT.c ****       };
 892:Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 893:Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 894:Src/SEGGER_RTT.c **** #else
 895:Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1316              		.loc 1 895 7
 1317 00e4 BA69     		ldr	r2, [r7, #24]
 1318 00e6 F969     		ldr	r1, [r7, #28]
 1319 00e8 3869     		ldr	r0, [r7, #16]
 1320 00ea FFF7FEFF 		bl	memcpy
 896:Src/SEGGER_RTT.c ****       pData += Avail;
 1321              		.loc 1 896 13
 1322 00ee FA69     		ldr	r2, [r7, #28]
 1323 00f0 BB69     		ldr	r3, [r7, #24]
 1324 00f2 1344     		add	r3, r3, r2
 1325 00f4 FB61     		str	r3, [r7, #28]
 897:Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 40


 1326              		.loc 1 897 7
 1327              		.syntax unified
 1328              	@ 897 "Src/SEGGER_RTT.c" 1
 1329 00f6 BFF35F8F 		dmb
 1330              	
 1331              	@ 0 "" 2
 898:Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1332              		.loc 1 898 20
 1333              		.thumb
 1334              		.syntax unified
 1335 00fa 7B69     		ldr	r3, [r7, #20]
 1336 00fc 0022     		movs	r2, #0
 1337 00fe DA60     		str	r2, [r3, #12]
 899:Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1338              		.loc 1 899 16
 1339 0100 7A68     		ldr	r2, [r7, #4]
 1340 0102 BB69     		ldr	r3, [r7, #24]
 1341 0104 D31A     		subs	r3, r2, r3
 1342 0106 7B60     		str	r3, [r7, #4]
 900:Src/SEGGER_RTT.c **** #endif
 901:Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1343              		.loc 1 901 21
 1344 0108 7B69     		ldr	r3, [r7, #20]
 1345 010a 9B68     		ldr	r3, [r3, #8]
 1346              		.loc 1 901 13
 1347 010c 013B     		subs	r3, r3, #1
 1348 010e BB61     		str	r3, [r7, #24]
 902:Src/SEGGER_RTT.c ****     }
 903:Src/SEGGER_RTT.c ****   } while (NumBytes);
 1349              		.loc 1 903 12
 1350 0110 7B68     		ldr	r3, [r7, #4]
 1351 0112 002B     		cmp	r3, #0
 1352 0114 C8D1     		bne	.L52
 904:Src/SEGGER_RTT.c **** }
 1353              		.loc 1 904 1
 1354 0116 00BF     		nop
 1355              	.L51:
 1356 0118 00BF     		nop
 1357 011a 2037     		adds	r7, r7, #32
 1358              		.cfi_def_cfa_offset 8
 1359 011c BD46     		mov	sp, r7
 1360              		.cfi_def_cfa_register 13
 1361              		@ sp needed
 1362 011e 80BD     		pop	{r7, pc}
 1363              	.L54:
 1364              		.align	2
 1365              	.L53:
 1366 0120 00000000 		.word	_SEGGER_RTT
 1367              		.cfi_endproc
 1368              	.LFE9:
 1370              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1371              		.align	1
 1372              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1373              		.syntax unified
 1374              		.thumb
 1375              		.thumb_func
 1377              	SEGGER_RTT_WriteDownBufferNoLock:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 41


 1378              	.LFB10:
 905:Src/SEGGER_RTT.c **** 
 906:Src/SEGGER_RTT.c **** /*********************************************************************
 907:Src/SEGGER_RTT.c **** *
 908:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 909:Src/SEGGER_RTT.c **** *
 910:Src/SEGGER_RTT.c **** *  Function description
 911:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 912:Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 913:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 914:Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 915:Src/SEGGER_RTT.c **** *
 916:Src/SEGGER_RTT.c **** *  Parameters
 917:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 918:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 919:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 920:Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 921:Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 922:Src/SEGGER_RTT.c **** *
 923:Src/SEGGER_RTT.c **** *  Return value
 924:Src/SEGGER_RTT.c **** *    1: Data has been copied
 925:Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 926:Src/SEGGER_RTT.c **** *
 927:Src/SEGGER_RTT.c **** *  Notes
 928:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 929:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 930:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 931:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 932:Src/SEGGER_RTT.c **** */
 933:Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 934:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 935:Src/SEGGER_RTT.c ****   const char*           pData;
 936:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 937:Src/SEGGER_RTT.c ****   unsigned              Avail;
 938:Src/SEGGER_RTT.c ****   unsigned              RdOff;
 939:Src/SEGGER_RTT.c ****   unsigned              WrOff;
 940:Src/SEGGER_RTT.c ****   unsigned              Rem;
 941:Src/SEGGER_RTT.c ****   volatile char*        pDst;
 942:Src/SEGGER_RTT.c ****   //
 943:Src/SEGGER_RTT.c ****   // Cases:
 944:Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 945:Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 946:Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 947:Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 948:Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 949:Src/SEGGER_RTT.c ****   //
 950:Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 951:Src/SEGGER_RTT.c ****   //
 952:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 953:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 954:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 955:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 956:Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 957:Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 958:Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 959:Src/SEGGER_RTT.c **** CopyStraight:
 960:Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 42


 961:Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 962:Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 963:Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 964:Src/SEGGER_RTT.c ****       return 1;
 965:Src/SEGGER_RTT.c ****     }
 966:Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 967:Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 968:Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 969:Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 970:Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 971:Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 972:Src/SEGGER_RTT.c ****       //
 973:Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 974:Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 975:Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 976:Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 977:Src/SEGGER_RTT.c ****       //
 978:Src/SEGGER_RTT.c ****       if (NumBytes) {
 979:Src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 980:Src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 981:Src/SEGGER_RTT.c ****       }
 982:Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 983:Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 984:Src/SEGGER_RTT.c ****       return 1;
 985:Src/SEGGER_RTT.c ****     }
 986:Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 987:Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 988:Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 989:Src/SEGGER_RTT.c ****       goto CopyStraight;
 990:Src/SEGGER_RTT.c ****     }
 991:Src/SEGGER_RTT.c ****   }
 992:Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 993:Src/SEGGER_RTT.c **** }
 994:Src/SEGGER_RTT.c **** #endif
 995:Src/SEGGER_RTT.c **** 
 996:Src/SEGGER_RTT.c **** /*********************************************************************
 997:Src/SEGGER_RTT.c **** *
 998:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 999:Src/SEGGER_RTT.c **** *
1000:Src/SEGGER_RTT.c **** *  Function description
1001:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1002:Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1003:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1004:Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
1005:Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1006:Src/SEGGER_RTT.c **** *
1007:Src/SEGGER_RTT.c **** *  Parameters
1008:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1009:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1010:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1011:Src/SEGGER_RTT.c **** *
1012:Src/SEGGER_RTT.c **** *  Return value
1013:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1014:Src/SEGGER_RTT.c **** *
1015:Src/SEGGER_RTT.c **** *  Notes
1016:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1017:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 43


1018:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1019:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1020:Src/SEGGER_RTT.c **** *
1021:Src/SEGGER_RTT.c **** *  Additional information
1022:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1023:Src/SEGGER_RTT.c **** */
1024:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1379              		.loc 1 1024 105
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 32
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383 0000 80B5     		push	{r7, lr}
 1384              		.cfi_def_cfa_offset 8
 1385              		.cfi_offset 7, -8
 1386              		.cfi_offset 14, -4
 1387 0002 88B0     		sub	sp, sp, #32
 1388              		.cfi_def_cfa_offset 40
 1389 0004 00AF     		add	r7, sp, #0
 1390              		.cfi_def_cfa_register 7
 1391 0006 F860     		str	r0, [r7, #12]
 1392 0008 B960     		str	r1, [r7, #8]
 1393 000a 7A60     		str	r2, [r7, #4]
1025:Src/SEGGER_RTT.c ****   unsigned                Status;
1026:Src/SEGGER_RTT.c ****   unsigned                Avail;
1027:Src/SEGGER_RTT.c ****   const char*             pData;
1028:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
1029:Src/SEGGER_RTT.c ****   //
1030:Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1031:Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1032:Src/SEGGER_RTT.c ****   //
1033:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1394              		.loc 1 1033 9
 1395 000c BB68     		ldr	r3, [r7, #8]
 1396 000e BB61     		str	r3, [r7, #24]
1034:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1397              		.loc 1 1034 9
 1398 0010 FA68     		ldr	r2, [r7, #12]
 1399 0012 1346     		mov	r3, r2
 1400 0014 5B00     		lsls	r3, r3, #1
 1401 0016 1344     		add	r3, r3, r2
 1402 0018 DB00     		lsls	r3, r3, #3
 1403 001a 6033     		adds	r3, r3, #96
 1404 001c 1F4A     		ldr	r2, .L64
 1405 001e 1344     		add	r3, r3, r2
 1406 0020 7B61     		str	r3, [r7, #20]
1035:Src/SEGGER_RTT.c ****   //
1036:Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1037:Src/SEGGER_RTT.c ****   //
1038:Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1407              		.loc 1 1038 16
 1408 0022 7B69     		ldr	r3, [r7, #20]
 1409 0024 5B69     		ldr	r3, [r3, #20]
 1410              		.loc 1 1038 3
 1411 0026 022B     		cmp	r3, #2
 1412 0028 29D0     		beq	.L56
 1413 002a 022B     		cmp	r3, #2
 1414 002c 2ED8     		bhi	.L57
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 44


 1415 002e 002B     		cmp	r3, #0
 1416 0030 02D0     		beq	.L58
 1417 0032 012B     		cmp	r3, #1
 1418 0034 13D0     		beq	.L59
 1419 0036 29E0     		b	.L57
 1420              	.L58:
1039:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1040:Src/SEGGER_RTT.c ****     //
1041:Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1042:Src/SEGGER_RTT.c ****     // of this output, don't bother.
1043:Src/SEGGER_RTT.c ****     //
1044:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1421              		.loc 1 1044 13
 1422 0038 7869     		ldr	r0, [r7, #20]
 1423 003a FFF7FEFF 		bl	_GetAvailWriteSpace
 1424 003e 3861     		str	r0, [r7, #16]
1045:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1425              		.loc 1 1045 8
 1426 0040 3A69     		ldr	r2, [r7, #16]
 1427 0042 7B68     		ldr	r3, [r7, #4]
 1428 0044 9A42     		cmp	r2, r3
 1429 0046 02D2     		bcs	.L60
1046:Src/SEGGER_RTT.c ****       Status = 0u;
 1430              		.loc 1 1046 14
 1431 0048 0023     		movs	r3, #0
 1432 004a FB61     		str	r3, [r7, #28]
1047:Src/SEGGER_RTT.c ****     } else {
1048:Src/SEGGER_RTT.c ****       Status = NumBytes;
1049:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1050:Src/SEGGER_RTT.c ****     }
1051:Src/SEGGER_RTT.c ****     break;
 1433              		.loc 1 1051 5
 1434 004c 21E0     		b	.L62
 1435              	.L60:
1048:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1436              		.loc 1 1048 14
 1437 004e 7B68     		ldr	r3, [r7, #4]
 1438 0050 FB61     		str	r3, [r7, #28]
1049:Src/SEGGER_RTT.c ****     }
 1439              		.loc 1 1049 7
 1440 0052 7A68     		ldr	r2, [r7, #4]
 1441 0054 B969     		ldr	r1, [r7, #24]
 1442 0056 7869     		ldr	r0, [r7, #20]
 1443 0058 FFF7FEFF 		bl	_WriteNoCheck
 1444              		.loc 1 1051 5
 1445 005c 19E0     		b	.L62
 1446              	.L59:
1052:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1053:Src/SEGGER_RTT.c ****     //
1054:Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1055:Src/SEGGER_RTT.c ****     //
1056:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1447              		.loc 1 1056 13
 1448 005e 7869     		ldr	r0, [r7, #20]
 1449 0060 FFF7FEFF 		bl	_GetAvailWriteSpace
 1450 0064 3861     		str	r0, [r7, #16]
1057:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 45


 1451              		.loc 1 1057 12
 1452 0066 7A68     		ldr	r2, [r7, #4]
 1453 0068 3B69     		ldr	r3, [r7, #16]
 1454 006a 9342     		cmp	r3, r2
 1455 006c 28BF     		it	cs
 1456 006e 1346     		movcs	r3, r2
 1457 0070 FB61     		str	r3, [r7, #28]
1058:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1458              		.loc 1 1058 5
 1459 0072 FA69     		ldr	r2, [r7, #28]
 1460 0074 B969     		ldr	r1, [r7, #24]
 1461 0076 7869     		ldr	r0, [r7, #20]
 1462 0078 FFF7FEFF 		bl	_WriteNoCheck
1059:Src/SEGGER_RTT.c ****     break;
 1463              		.loc 1 1059 5
 1464 007c 09E0     		b	.L62
 1465              	.L56:
1060:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1061:Src/SEGGER_RTT.c ****     //
1062:Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1063:Src/SEGGER_RTT.c ****     //
1064:Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1466              		.loc 1 1064 14
 1467 007e 7A68     		ldr	r2, [r7, #4]
 1468 0080 B969     		ldr	r1, [r7, #24]
 1469 0082 7869     		ldr	r0, [r7, #20]
 1470 0084 FFF7FEFF 		bl	_WriteBlocking
 1471 0088 F861     		str	r0, [r7, #28]
1065:Src/SEGGER_RTT.c ****     break;
 1472              		.loc 1 1065 5
 1473 008a 02E0     		b	.L62
 1474              	.L57:
1066:Src/SEGGER_RTT.c ****   default:
1067:Src/SEGGER_RTT.c ****     Status = 0u;
 1475              		.loc 1 1067 12
 1476 008c 0023     		movs	r3, #0
 1477 008e FB61     		str	r3, [r7, #28]
1068:Src/SEGGER_RTT.c ****     break;
 1478              		.loc 1 1068 5
 1479 0090 00BF     		nop
 1480              	.L62:
1069:Src/SEGGER_RTT.c ****   }
1070:Src/SEGGER_RTT.c ****   //
1071:Src/SEGGER_RTT.c ****   // Finish up.
1072:Src/SEGGER_RTT.c ****   //
1073:Src/SEGGER_RTT.c ****   return Status;
 1481              		.loc 1 1073 10
 1482 0092 FB69     		ldr	r3, [r7, #28]
1074:Src/SEGGER_RTT.c **** }
 1483              		.loc 1 1074 1
 1484 0094 1846     		mov	r0, r3
 1485 0096 2037     		adds	r7, r7, #32
 1486              		.cfi_def_cfa_offset 8
 1487 0098 BD46     		mov	sp, r7
 1488              		.cfi_def_cfa_register 13
 1489              		@ sp needed
 1490 009a 80BD     		pop	{r7, pc}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 46


 1491              	.L65:
 1492              		.align	2
 1493              	.L64:
 1494 009c 00000000 		.word	_SEGGER_RTT
 1495              		.cfi_endproc
 1496              	.LFE10:
 1498              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1499              		.align	1
 1500              		.global	SEGGER_RTT_WriteNoLock
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1505              	SEGGER_RTT_WriteNoLock:
 1506              	.LFB11:
1075:Src/SEGGER_RTT.c **** 
1076:Src/SEGGER_RTT.c **** /*********************************************************************
1077:Src/SEGGER_RTT.c **** *
1078:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1079:Src/SEGGER_RTT.c **** *
1080:Src/SEGGER_RTT.c **** *  Function description
1081:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1082:Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1083:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1084:Src/SEGGER_RTT.c **** *
1085:Src/SEGGER_RTT.c **** *  Parameters
1086:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1087:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1088:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1089:Src/SEGGER_RTT.c **** *
1090:Src/SEGGER_RTT.c **** *  Return value
1091:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1092:Src/SEGGER_RTT.c **** *
1093:Src/SEGGER_RTT.c **** *  Notes
1094:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1095:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1096:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1097:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1098:Src/SEGGER_RTT.c **** */
1099:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1507              		.loc 1 1099 95
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 32
 1510              		@ frame_needed = 1, uses_anonymous_args = 0
 1511 0000 80B5     		push	{r7, lr}
 1512              		.cfi_def_cfa_offset 8
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 88B0     		sub	sp, sp, #32
 1516              		.cfi_def_cfa_offset 40
 1517 0004 00AF     		add	r7, sp, #0
 1518              		.cfi_def_cfa_register 7
 1519 0006 F860     		str	r0, [r7, #12]
 1520 0008 B960     		str	r1, [r7, #8]
 1521 000a 7A60     		str	r2, [r7, #4]
1100:Src/SEGGER_RTT.c ****   unsigned              Status;
1101:Src/SEGGER_RTT.c ****   unsigned              Avail;
1102:Src/SEGGER_RTT.c ****   const char*           pData;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 47


1103:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1104:Src/SEGGER_RTT.c ****   //
1105:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1106:Src/SEGGER_RTT.c ****   //
1107:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1522              		.loc 1 1107 9
 1523 000c BB68     		ldr	r3, [r7, #8]
 1524 000e BB61     		str	r3, [r7, #24]
1108:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1525              		.loc 1 1108 9
 1526 0010 FB68     		ldr	r3, [r7, #12]
 1527 0012 5A1C     		adds	r2, r3, #1
 1528 0014 1346     		mov	r3, r2
 1529 0016 5B00     		lsls	r3, r3, #1
 1530 0018 1344     		add	r3, r3, r2
 1531 001a DB00     		lsls	r3, r3, #3
 1532 001c 1F4A     		ldr	r2, .L75
 1533 001e 1344     		add	r3, r3, r2
 1534 0020 7B61     		str	r3, [r7, #20]
1109:Src/SEGGER_RTT.c ****   //
1110:Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1111:Src/SEGGER_RTT.c ****   //
1112:Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1535              		.loc 1 1112 16
 1536 0022 7B69     		ldr	r3, [r7, #20]
 1537 0024 5B69     		ldr	r3, [r3, #20]
 1538              		.loc 1 1112 3
 1539 0026 022B     		cmp	r3, #2
 1540 0028 29D0     		beq	.L67
 1541 002a 022B     		cmp	r3, #2
 1542 002c 2ED8     		bhi	.L68
 1543 002e 002B     		cmp	r3, #0
 1544 0030 02D0     		beq	.L69
 1545 0032 012B     		cmp	r3, #1
 1546 0034 13D0     		beq	.L70
 1547 0036 29E0     		b	.L68
 1548              	.L69:
1113:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1114:Src/SEGGER_RTT.c ****     //
1115:Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1116:Src/SEGGER_RTT.c ****     // of this output, don't bother.
1117:Src/SEGGER_RTT.c ****     //
1118:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1549              		.loc 1 1118 13
 1550 0038 7869     		ldr	r0, [r7, #20]
 1551 003a FFF7FEFF 		bl	_GetAvailWriteSpace
 1552 003e 3861     		str	r0, [r7, #16]
1119:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1553              		.loc 1 1119 8
 1554 0040 3A69     		ldr	r2, [r7, #16]
 1555 0042 7B68     		ldr	r3, [r7, #4]
 1556 0044 9A42     		cmp	r2, r3
 1557 0046 02D2     		bcs	.L71
1120:Src/SEGGER_RTT.c ****       Status = 0u;
 1558              		.loc 1 1120 14
 1559 0048 0023     		movs	r3, #0
 1560 004a FB61     		str	r3, [r7, #28]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 48


1121:Src/SEGGER_RTT.c ****     } else {
1122:Src/SEGGER_RTT.c ****       Status = NumBytes;
1123:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1124:Src/SEGGER_RTT.c ****     }
1125:Src/SEGGER_RTT.c ****     break;
 1561              		.loc 1 1125 5
 1562 004c 21E0     		b	.L73
 1563              	.L71:
1122:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1564              		.loc 1 1122 14
 1565 004e 7B68     		ldr	r3, [r7, #4]
 1566 0050 FB61     		str	r3, [r7, #28]
1123:Src/SEGGER_RTT.c ****     }
 1567              		.loc 1 1123 7
 1568 0052 7A68     		ldr	r2, [r7, #4]
 1569 0054 B969     		ldr	r1, [r7, #24]
 1570 0056 7869     		ldr	r0, [r7, #20]
 1571 0058 FFF7FEFF 		bl	_WriteNoCheck
 1572              		.loc 1 1125 5
 1573 005c 19E0     		b	.L73
 1574              	.L70:
1126:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1127:Src/SEGGER_RTT.c ****     //
1128:Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1129:Src/SEGGER_RTT.c ****     //
1130:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1575              		.loc 1 1130 13
 1576 005e 7869     		ldr	r0, [r7, #20]
 1577 0060 FFF7FEFF 		bl	_GetAvailWriteSpace
 1578 0064 3861     		str	r0, [r7, #16]
1131:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1579              		.loc 1 1131 12
 1580 0066 7A68     		ldr	r2, [r7, #4]
 1581 0068 3B69     		ldr	r3, [r7, #16]
 1582 006a 9342     		cmp	r3, r2
 1583 006c 28BF     		it	cs
 1584 006e 1346     		movcs	r3, r2
 1585 0070 FB61     		str	r3, [r7, #28]
1132:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1586              		.loc 1 1132 5
 1587 0072 FA69     		ldr	r2, [r7, #28]
 1588 0074 B969     		ldr	r1, [r7, #24]
 1589 0076 7869     		ldr	r0, [r7, #20]
 1590 0078 FFF7FEFF 		bl	_WriteNoCheck
1133:Src/SEGGER_RTT.c ****     break;
 1591              		.loc 1 1133 5
 1592 007c 09E0     		b	.L73
 1593              	.L67:
1134:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1135:Src/SEGGER_RTT.c ****     //
1136:Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1137:Src/SEGGER_RTT.c ****     //
1138:Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1594              		.loc 1 1138 14
 1595 007e 7A68     		ldr	r2, [r7, #4]
 1596 0080 B969     		ldr	r1, [r7, #24]
 1597 0082 7869     		ldr	r0, [r7, #20]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 49


 1598 0084 FFF7FEFF 		bl	_WriteBlocking
 1599 0088 F861     		str	r0, [r7, #28]
1139:Src/SEGGER_RTT.c ****     break;
 1600              		.loc 1 1139 5
 1601 008a 02E0     		b	.L73
 1602              	.L68:
1140:Src/SEGGER_RTT.c ****   default:
1141:Src/SEGGER_RTT.c ****     Status = 0u;
 1603              		.loc 1 1141 12
 1604 008c 0023     		movs	r3, #0
 1605 008e FB61     		str	r3, [r7, #28]
1142:Src/SEGGER_RTT.c ****     break;
 1606              		.loc 1 1142 5
 1607 0090 00BF     		nop
 1608              	.L73:
1143:Src/SEGGER_RTT.c ****   }
1144:Src/SEGGER_RTT.c ****   //
1145:Src/SEGGER_RTT.c ****   // Finish up.
1146:Src/SEGGER_RTT.c ****   //
1147:Src/SEGGER_RTT.c ****   return Status;
 1609              		.loc 1 1147 10
 1610 0092 FB69     		ldr	r3, [r7, #28]
1148:Src/SEGGER_RTT.c **** }
 1611              		.loc 1 1148 1
 1612 0094 1846     		mov	r0, r3
 1613 0096 2037     		adds	r7, r7, #32
 1614              		.cfi_def_cfa_offset 8
 1615 0098 BD46     		mov	sp, r7
 1616              		.cfi_def_cfa_register 13
 1617              		@ sp needed
 1618 009a 80BD     		pop	{r7, pc}
 1619              	.L76:
 1620              		.align	2
 1621              	.L75:
 1622 009c 00000000 		.word	_SEGGER_RTT
 1623              		.cfi_endproc
 1624              	.LFE11:
 1626              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1627              		.align	1
 1628              		.global	SEGGER_RTT_WriteDownBuffer
 1629              		.syntax unified
 1630              		.thumb
 1631              		.thumb_func
 1633              	SEGGER_RTT_WriteDownBuffer:
 1634              	.LFB12:
1149:Src/SEGGER_RTT.c **** 
1150:Src/SEGGER_RTT.c **** /*********************************************************************
1151:Src/SEGGER_RTT.c **** *
1152:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1153:Src/SEGGER_RTT.c **** *
1154:Src/SEGGER_RTT.c **** *  Function description
1155:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1156:Src/SEGGER_RTT.c **** *
1157:Src/SEGGER_RTT.c **** *  Parameters
1158:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1159:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1160:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 50


1161:Src/SEGGER_RTT.c **** *
1162:Src/SEGGER_RTT.c **** *  Return value
1163:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1164:Src/SEGGER_RTT.c **** *
1165:Src/SEGGER_RTT.c **** *  Notes
1166:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1167:Src/SEGGER_RTT.c **** *
1168:Src/SEGGER_RTT.c **** *  Additional information
1169:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1170:Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1171:Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1172:Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1173:Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1174:Src/SEGGER_RTT.c **** */
1175:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1635              		.loc 1 1175 99
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 32
 1638              		@ frame_needed = 1, uses_anonymous_args = 0
 1639 0000 80B5     		push	{r7, lr}
 1640              		.cfi_def_cfa_offset 8
 1641              		.cfi_offset 7, -8
 1642              		.cfi_offset 14, -4
 1643 0002 88B0     		sub	sp, sp, #32
 1644              		.cfi_def_cfa_offset 40
 1645 0004 00AF     		add	r7, sp, #0
 1646              		.cfi_def_cfa_register 7
 1647 0006 F860     		str	r0, [r7, #12]
 1648 0008 B960     		str	r1, [r7, #8]
 1649 000a 7A60     		str	r2, [r7, #4]
 1650              	.LBB6:
1176:Src/SEGGER_RTT.c ****   unsigned Status;
1177:Src/SEGGER_RTT.c **** 
1178:Src/SEGGER_RTT.c ****   INIT();
 1651              		.loc 1 1178 3
 1652 000c 0E4B     		ldr	r3, .L80
 1653 000e FB61     		str	r3, [r7, #28]
 1654 0010 FB69     		ldr	r3, [r7, #28]
 1655 0012 1B78     		ldrb	r3, [r3]
 1656 0014 DBB2     		uxtb	r3, r3
 1657 0016 002B     		cmp	r3, #0
 1658 0018 01D1     		bne	.L78
 1659              		.loc 1 1178 3 is_stmt 0 discriminator 1
 1660 001a FFF7FEFF 		bl	_DoInit
 1661              	.L78:
 1662              	.LBE6:
 1663              	.LBB7:
1179:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1664              		.loc 1 1179 3 is_stmt 1
 1665              		.syntax unified
 1666              	@ 1179 "Src/SEGGER_RTT.c" 1
 1667 001e EFF31183 		mrs   r3, basepri  
 1668 0022 4FF02001 		mov   r1, #32       
 1669 0026 81F31188 		msr   basepri, r1  
 1670              		
 1671              	@ 0 "" 2
 1672              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 51


 1673              		.syntax unified
 1674 002a BB61     		str	r3, [r7, #24]
1180:Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1675              		.loc 1 1180 12
 1676 002c 7A68     		ldr	r2, [r7, #4]
 1677 002e B968     		ldr	r1, [r7, #8]
 1678 0030 F868     		ldr	r0, [r7, #12]
 1679 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1680 0036 7861     		str	r0, [r7, #20]
1181:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1681              		.loc 1 1181 3
 1682 0038 BB69     		ldr	r3, [r7, #24]
 1683              		.syntax unified
 1684              	@ 1181 "Src/SEGGER_RTT.c" 1
 1685 003a 83F31188 		msr   basepri, r3  
 1686              		
 1687              	@ 0 "" 2
 1688              		.thumb
 1689              		.syntax unified
 1690              	.LBE7:
1182:Src/SEGGER_RTT.c ****   return Status;
 1691              		.loc 1 1182 10
 1692 003e 7B69     		ldr	r3, [r7, #20]
1183:Src/SEGGER_RTT.c **** }
 1693              		.loc 1 1183 1
 1694 0040 1846     		mov	r0, r3
 1695 0042 2037     		adds	r7, r7, #32
 1696              		.cfi_def_cfa_offset 8
 1697 0044 BD46     		mov	sp, r7
 1698              		.cfi_def_cfa_register 13
 1699              		@ sp needed
 1700 0046 80BD     		pop	{r7, pc}
 1701              	.L81:
 1702              		.align	2
 1703              	.L80:
 1704 0048 00000000 		.word	_SEGGER_RTT
 1705              		.cfi_endproc
 1706              	.LFE12:
 1708              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1709              		.align	1
 1710              		.global	SEGGER_RTT_Write
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1715              	SEGGER_RTT_Write:
 1716              	.LFB13:
1184:Src/SEGGER_RTT.c **** 
1185:Src/SEGGER_RTT.c **** /*********************************************************************
1186:Src/SEGGER_RTT.c **** *
1187:Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1188:Src/SEGGER_RTT.c **** *
1189:Src/SEGGER_RTT.c **** *  Function description
1190:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1191:Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1192:Src/SEGGER_RTT.c **** *
1193:Src/SEGGER_RTT.c **** *  Parameters
1194:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 52


1195:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1196:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1197:Src/SEGGER_RTT.c **** *
1198:Src/SEGGER_RTT.c **** *  Return value
1199:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1200:Src/SEGGER_RTT.c **** *
1201:Src/SEGGER_RTT.c **** *  Notes
1202:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1203:Src/SEGGER_RTT.c **** */
1204:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1717              		.loc 1 1204 89
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 32
 1720              		@ frame_needed = 1, uses_anonymous_args = 0
 1721 0000 80B5     		push	{r7, lr}
 1722              		.cfi_def_cfa_offset 8
 1723              		.cfi_offset 7, -8
 1724              		.cfi_offset 14, -4
 1725 0002 88B0     		sub	sp, sp, #32
 1726              		.cfi_def_cfa_offset 40
 1727 0004 00AF     		add	r7, sp, #0
 1728              		.cfi_def_cfa_register 7
 1729 0006 F860     		str	r0, [r7, #12]
 1730 0008 B960     		str	r1, [r7, #8]
 1731 000a 7A60     		str	r2, [r7, #4]
 1732              	.LBB8:
1205:Src/SEGGER_RTT.c ****   unsigned Status;
1206:Src/SEGGER_RTT.c **** 
1207:Src/SEGGER_RTT.c ****   INIT();
 1733              		.loc 1 1207 3
 1734 000c 0E4B     		ldr	r3, .L85
 1735 000e FB61     		str	r3, [r7, #28]
 1736 0010 FB69     		ldr	r3, [r7, #28]
 1737 0012 1B78     		ldrb	r3, [r3]
 1738 0014 DBB2     		uxtb	r3, r3
 1739 0016 002B     		cmp	r3, #0
 1740 0018 01D1     		bne	.L83
 1741              		.loc 1 1207 3 is_stmt 0 discriminator 1
 1742 001a FFF7FEFF 		bl	_DoInit
 1743              	.L83:
 1744              	.LBE8:
 1745              	.LBB9:
1208:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1746              		.loc 1 1208 3 is_stmt 1
 1747              		.syntax unified
 1748              	@ 1208 "Src/SEGGER_RTT.c" 1
 1749 001e EFF31183 		mrs   r3, basepri  
 1750 0022 4FF02001 		mov   r1, #32       
 1751 0026 81F31188 		msr   basepri, r1  
 1752              		
 1753              	@ 0 "" 2
 1754              		.thumb
 1755              		.syntax unified
 1756 002a BB61     		str	r3, [r7, #24]
1209:Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1757              		.loc 1 1209 12
 1758 002c 7A68     		ldr	r2, [r7, #4]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 53


 1759 002e B968     		ldr	r1, [r7, #8]
 1760 0030 F868     		ldr	r0, [r7, #12]
 1761 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1762 0036 7861     		str	r0, [r7, #20]
1210:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1763              		.loc 1 1210 3
 1764 0038 BB69     		ldr	r3, [r7, #24]
 1765              		.syntax unified
 1766              	@ 1210 "Src/SEGGER_RTT.c" 1
 1767 003a 83F31188 		msr   basepri, r3  
 1768              		
 1769              	@ 0 "" 2
 1770              		.thumb
 1771              		.syntax unified
 1772              	.LBE9:
1211:Src/SEGGER_RTT.c ****   return Status;
 1773              		.loc 1 1211 10
 1774 003e 7B69     		ldr	r3, [r7, #20]
1212:Src/SEGGER_RTT.c **** }
 1775              		.loc 1 1212 1
 1776 0040 1846     		mov	r0, r3
 1777 0042 2037     		adds	r7, r7, #32
 1778              		.cfi_def_cfa_offset 8
 1779 0044 BD46     		mov	sp, r7
 1780              		.cfi_def_cfa_register 13
 1781              		@ sp needed
 1782 0046 80BD     		pop	{r7, pc}
 1783              	.L86:
 1784              		.align	2
 1785              	.L85:
 1786 0048 00000000 		.word	_SEGGER_RTT
 1787              		.cfi_endproc
 1788              	.LFE13:
 1790              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1791              		.align	1
 1792              		.global	SEGGER_RTT_WriteString
 1793              		.syntax unified
 1794              		.thumb
 1795              		.thumb_func
 1797              	SEGGER_RTT_WriteString:
 1798              	.LFB14:
1213:Src/SEGGER_RTT.c **** 
1214:Src/SEGGER_RTT.c **** /*********************************************************************
1215:Src/SEGGER_RTT.c **** *
1216:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1217:Src/SEGGER_RTT.c **** *
1218:Src/SEGGER_RTT.c **** *  Function description
1219:Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1220:Src/SEGGER_RTT.c **** *    This data is read by the host.
1221:Src/SEGGER_RTT.c **** *
1222:Src/SEGGER_RTT.c **** *  Parameters
1223:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1224:Src/SEGGER_RTT.c **** *    s            Pointer to string.
1225:Src/SEGGER_RTT.c **** *
1226:Src/SEGGER_RTT.c **** *  Return value
1227:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1228:Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 54


1229:Src/SEGGER_RTT.c **** *  Notes
1230:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1231:Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1232:Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1233:Src/SEGGER_RTT.c **** */
1234:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1799              		.loc 1 1234 70
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 16
 1802              		@ frame_needed = 1, uses_anonymous_args = 0
 1803 0000 80B5     		push	{r7, lr}
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 7, -8
 1806              		.cfi_offset 14, -4
 1807 0002 84B0     		sub	sp, sp, #16
 1808              		.cfi_def_cfa_offset 24
 1809 0004 00AF     		add	r7, sp, #0
 1810              		.cfi_def_cfa_register 7
 1811 0006 7860     		str	r0, [r7, #4]
 1812 0008 3960     		str	r1, [r7]
1235:Src/SEGGER_RTT.c ****   unsigned Len;
1236:Src/SEGGER_RTT.c **** 
1237:Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1813              		.loc 1 1237 9
 1814 000a 3868     		ldr	r0, [r7]
 1815 000c FFF7FEFF 		bl	strlen
 1816 0010 F860     		str	r0, [r7, #12]
1238:Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1817              		.loc 1 1238 10
 1818 0012 FA68     		ldr	r2, [r7, #12]
 1819 0014 3968     		ldr	r1, [r7]
 1820 0016 7868     		ldr	r0, [r7, #4]
 1821 0018 FFF7FEFF 		bl	SEGGER_RTT_Write
 1822 001c 0346     		mov	r3, r0
1239:Src/SEGGER_RTT.c **** }
 1823              		.loc 1 1239 1
 1824 001e 1846     		mov	r0, r3
 1825 0020 1037     		adds	r7, r7, #16
 1826              		.cfi_def_cfa_offset 8
 1827 0022 BD46     		mov	sp, r7
 1828              		.cfi_def_cfa_register 13
 1829              		@ sp needed
 1830 0024 80BD     		pop	{r7, pc}
 1831              		.cfi_endproc
 1832              	.LFE14:
 1834              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1835              		.align	1
 1836              		.global	SEGGER_RTT_PutCharSkipNoLock
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1841              	SEGGER_RTT_PutCharSkipNoLock:
 1842              	.LFB15:
1240:Src/SEGGER_RTT.c **** 
1241:Src/SEGGER_RTT.c **** /*********************************************************************
1242:Src/SEGGER_RTT.c **** *
1243:Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 55


1244:Src/SEGGER_RTT.c **** *
1245:Src/SEGGER_RTT.c **** *  Function description
1246:Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1247:Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1248:Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1249:Src/SEGGER_RTT.c **** *
1250:Src/SEGGER_RTT.c **** *  Parameters
1251:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1252:Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1253:Src/SEGGER_RTT.c **** *
1254:Src/SEGGER_RTT.c **** *  Return value
1255:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1256:Src/SEGGER_RTT.c **** *
1257:Src/SEGGER_RTT.c **** *  Notes
1258:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1259:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1260:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1261:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1262:Src/SEGGER_RTT.c **** */
1263:Src/SEGGER_RTT.c **** 
1264:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1843              		.loc 1 1264 69
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 24
 1846              		@ frame_needed = 1, uses_anonymous_args = 0
 1847              		@ link register save eliminated.
 1848 0000 80B4     		push	{r7}
 1849              		.cfi_def_cfa_offset 4
 1850              		.cfi_offset 7, -4
 1851 0002 87B0     		sub	sp, sp, #28
 1852              		.cfi_def_cfa_offset 32
 1853 0004 00AF     		add	r7, sp, #0
 1854              		.cfi_def_cfa_register 7
 1855 0006 7860     		str	r0, [r7, #4]
 1856 0008 0B46     		mov	r3, r1
 1857 000a FB70     		strb	r3, [r7, #3]
1265:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1266:Src/SEGGER_RTT.c ****   unsigned              WrOff;
1267:Src/SEGGER_RTT.c ****   unsigned              Status;
1268:Src/SEGGER_RTT.c ****   volatile char*        pDst;
1269:Src/SEGGER_RTT.c ****   //
1270:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1271:Src/SEGGER_RTT.c ****   //
1272:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1858              		.loc 1 1272 9
 1859 000c 7B68     		ldr	r3, [r7, #4]
 1860 000e 5A1C     		adds	r2, r3, #1
 1861 0010 1346     		mov	r3, r2
 1862 0012 5B00     		lsls	r3, r3, #1
 1863 0014 1344     		add	r3, r3, r2
 1864 0016 DB00     		lsls	r3, r3, #3
 1865 0018 164A     		ldr	r2, .L94
 1866 001a 1344     		add	r3, r3, r2
 1867 001c FB60     		str	r3, [r7, #12]
1273:Src/SEGGER_RTT.c ****   //
1274:Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1275:Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 56


1276:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1868              		.loc 1 1276 16
 1869 001e FB68     		ldr	r3, [r7, #12]
 1870 0020 DB68     		ldr	r3, [r3, #12]
 1871              		.loc 1 1276 9
 1872 0022 0133     		adds	r3, r3, #1
 1873 0024 7B61     		str	r3, [r7, #20]
1277:Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1874              		.loc 1 1277 21
 1875 0026 FB68     		ldr	r3, [r7, #12]
 1876 0028 9B68     		ldr	r3, [r3, #8]
 1877              		.loc 1 1277 6
 1878 002a 7A69     		ldr	r2, [r7, #20]
 1879 002c 9A42     		cmp	r2, r3
 1880 002e 01D1     		bne	.L90
1278:Src/SEGGER_RTT.c ****     WrOff = 0;
 1881              		.loc 1 1278 11
 1882 0030 0023     		movs	r3, #0
 1883 0032 7B61     		str	r3, [r7, #20]
 1884              	.L90:
1279:Src/SEGGER_RTT.c ****   }
1280:Src/SEGGER_RTT.c ****   //
1281:Src/SEGGER_RTT.c ****   // Output byte if free space is available
1282:Src/SEGGER_RTT.c ****   //
1283:Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1885              		.loc 1 1283 21
 1886 0034 FB68     		ldr	r3, [r7, #12]
 1887 0036 1B69     		ldr	r3, [r3, #16]
 1888              		.loc 1 1283 6
 1889 0038 7A69     		ldr	r2, [r7, #20]
 1890 003a 9A42     		cmp	r2, r3
 1891 003c 10D0     		beq	.L91
1284:Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1892              		.loc 1 1284 18
 1893 003e FB68     		ldr	r3, [r7, #12]
 1894 0040 5A68     		ldr	r2, [r3, #4]
 1895              		.loc 1 1284 35
 1896 0042 FB68     		ldr	r3, [r7, #12]
 1897 0044 DB68     		ldr	r3, [r3, #12]
 1898              		.loc 1 1284 10
 1899 0046 1344     		add	r3, r3, r2
 1900 0048 BB60     		str	r3, [r7, #8]
1285:Src/SEGGER_RTT.c ****     *pDst = c;
 1901              		.loc 1 1285 11
 1902 004a BB68     		ldr	r3, [r7, #8]
 1903 004c FA78     		ldrb	r2, [r7, #3]
 1904 004e 1A70     		strb	r2, [r3]
1286:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1905              		.loc 1 1286 5
 1906              		.syntax unified
 1907              	@ 1286 "Src/SEGGER_RTT.c" 1
 1908 0050 BFF35F8F 		dmb
 1909              	
 1910              	@ 0 "" 2
1287:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1911              		.loc 1 1287 18
 1912              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 57


 1913              		.syntax unified
 1914 0054 FB68     		ldr	r3, [r7, #12]
 1915 0056 7A69     		ldr	r2, [r7, #20]
 1916 0058 DA60     		str	r2, [r3, #12]
1288:Src/SEGGER_RTT.c ****     Status = 1;
 1917              		.loc 1 1288 12
 1918 005a 0123     		movs	r3, #1
 1919 005c 3B61     		str	r3, [r7, #16]
 1920 005e 01E0     		b	.L92
 1921              	.L91:
1289:Src/SEGGER_RTT.c ****   } else {
1290:Src/SEGGER_RTT.c ****     Status = 0;
 1922              		.loc 1 1290 12
 1923 0060 0023     		movs	r3, #0
 1924 0062 3B61     		str	r3, [r7, #16]
 1925              	.L92:
1291:Src/SEGGER_RTT.c ****   }
1292:Src/SEGGER_RTT.c ****   //
1293:Src/SEGGER_RTT.c ****   return Status;
 1926              		.loc 1 1293 10
 1927 0064 3B69     		ldr	r3, [r7, #16]
1294:Src/SEGGER_RTT.c **** }
 1928              		.loc 1 1294 1
 1929 0066 1846     		mov	r0, r3
 1930 0068 1C37     		adds	r7, r7, #28
 1931              		.cfi_def_cfa_offset 4
 1932 006a BD46     		mov	sp, r7
 1933              		.cfi_def_cfa_register 13
 1934              		@ sp needed
 1935 006c 5DF8047B 		ldr	r7, [sp], #4
 1936              		.cfi_restore 7
 1937              		.cfi_def_cfa_offset 0
 1938 0070 7047     		bx	lr
 1939              	.L95:
 1940 0072 00BF     		.align	2
 1941              	.L94:
 1942 0074 00000000 		.word	_SEGGER_RTT
 1943              		.cfi_endproc
 1944              	.LFE15:
 1946              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1947              		.align	1
 1948              		.global	SEGGER_RTT_PutCharSkip
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1953              	SEGGER_RTT_PutCharSkip:
 1954              	.LFB16:
1295:Src/SEGGER_RTT.c **** 
1296:Src/SEGGER_RTT.c **** /*********************************************************************
1297:Src/SEGGER_RTT.c **** *
1298:Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1299:Src/SEGGER_RTT.c **** *
1300:Src/SEGGER_RTT.c **** *  Function description
1301:Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1302:Src/SEGGER_RTT.c **** *
1303:Src/SEGGER_RTT.c **** *  Parameters
1304:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 58


1305:Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1306:Src/SEGGER_RTT.c **** *
1307:Src/SEGGER_RTT.c **** *  Return value
1308:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1309:Src/SEGGER_RTT.c **** *
1310:Src/SEGGER_RTT.c **** *  Notes
1311:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1312:Src/SEGGER_RTT.c **** */
1313:Src/SEGGER_RTT.c **** 
1314:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1955              		.loc 1 1314 63
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 32
 1958              		@ frame_needed = 1, uses_anonymous_args = 0
 1959 0000 80B5     		push	{r7, lr}
 1960              		.cfi_def_cfa_offset 8
 1961              		.cfi_offset 7, -8
 1962              		.cfi_offset 14, -4
 1963 0002 88B0     		sub	sp, sp, #32
 1964              		.cfi_def_cfa_offset 40
 1965 0004 00AF     		add	r7, sp, #0
 1966              		.cfi_def_cfa_register 7
 1967 0006 7860     		str	r0, [r7, #4]
 1968 0008 0B46     		mov	r3, r1
 1969 000a FB70     		strb	r3, [r7, #3]
 1970              	.LBB10:
1315:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1316:Src/SEGGER_RTT.c ****   unsigned              WrOff;
1317:Src/SEGGER_RTT.c ****   unsigned              Status;
1318:Src/SEGGER_RTT.c ****   volatile char*        pDst;
1319:Src/SEGGER_RTT.c ****   //
1320:Src/SEGGER_RTT.c ****   // Prepare
1321:Src/SEGGER_RTT.c ****   //
1322:Src/SEGGER_RTT.c ****   INIT();
 1971              		.loc 1 1322 3
 1972 000c 214B     		ldr	r3, .L102
 1973 000e 7B61     		str	r3, [r7, #20]
 1974 0010 7B69     		ldr	r3, [r7, #20]
 1975 0012 1B78     		ldrb	r3, [r3]
 1976 0014 DBB2     		uxtb	r3, r3
 1977 0016 002B     		cmp	r3, #0
 1978 0018 01D1     		bne	.L97
 1979              		.loc 1 1322 3 is_stmt 0 discriminator 1
 1980 001a FFF7FEFF 		bl	_DoInit
 1981              	.L97:
 1982              	.LBE10:
 1983              	.LBB11:
1323:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1984              		.loc 1 1323 3 is_stmt 1
 1985              		.syntax unified
 1986              	@ 1323 "Src/SEGGER_RTT.c" 1
 1987 001e EFF31183 		mrs   r3, basepri  
 1988 0022 4FF02001 		mov   r1, #32       
 1989 0026 81F31188 		msr   basepri, r1  
 1990              		
 1991              	@ 0 "" 2
 1992              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 59


 1993              		.syntax unified
 1994 002a 3B61     		str	r3, [r7, #16]
1324:Src/SEGGER_RTT.c ****   //
1325:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1326:Src/SEGGER_RTT.c ****   //
1327:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1995              		.loc 1 1327 9
 1996 002c 7B68     		ldr	r3, [r7, #4]
 1997 002e 5A1C     		adds	r2, r3, #1
 1998 0030 1346     		mov	r3, r2
 1999 0032 5B00     		lsls	r3, r3, #1
 2000 0034 1344     		add	r3, r3, r2
 2001 0036 DB00     		lsls	r3, r3, #3
 2002 0038 164A     		ldr	r2, .L102
 2003 003a 1344     		add	r3, r3, r2
 2004 003c FB60     		str	r3, [r7, #12]
1328:Src/SEGGER_RTT.c ****   //
1329:Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1330:Src/SEGGER_RTT.c ****   //
1331:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2005              		.loc 1 1331 16
 2006 003e FB68     		ldr	r3, [r7, #12]
 2007 0040 DB68     		ldr	r3, [r3, #12]
 2008              		.loc 1 1331 9
 2009 0042 0133     		adds	r3, r3, #1
 2010 0044 FB61     		str	r3, [r7, #28]
1332:Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2011              		.loc 1 1332 21
 2012 0046 FB68     		ldr	r3, [r7, #12]
 2013 0048 9B68     		ldr	r3, [r3, #8]
 2014              		.loc 1 1332 6
 2015 004a FA69     		ldr	r2, [r7, #28]
 2016 004c 9A42     		cmp	r2, r3
 2017 004e 01D1     		bne	.L98
1333:Src/SEGGER_RTT.c ****     WrOff = 0;
 2018              		.loc 1 1333 11
 2019 0050 0023     		movs	r3, #0
 2020 0052 FB61     		str	r3, [r7, #28]
 2021              	.L98:
1334:Src/SEGGER_RTT.c ****   }
1335:Src/SEGGER_RTT.c ****   //
1336:Src/SEGGER_RTT.c ****   // Output byte if free space is available
1337:Src/SEGGER_RTT.c ****   //
1338:Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2022              		.loc 1 1338 21
 2023 0054 FB68     		ldr	r3, [r7, #12]
 2024 0056 1B69     		ldr	r3, [r3, #16]
 2025              		.loc 1 1338 6
 2026 0058 FA69     		ldr	r2, [r7, #28]
 2027 005a 9A42     		cmp	r2, r3
 2028 005c 10D0     		beq	.L99
1339:Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2029              		.loc 1 1339 19
 2030 005e FB68     		ldr	r3, [r7, #12]
 2031 0060 5A68     		ldr	r2, [r3, #4]
 2032              		.loc 1 1339 36
 2033 0062 FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 60


 2034 0064 DB68     		ldr	r3, [r3, #12]
 2035              		.loc 1 1339 11
 2036 0066 1344     		add	r3, r3, r2
 2037 0068 BB60     		str	r3, [r7, #8]
1340:Src/SEGGER_RTT.c ****     *pDst = c;
 2038              		.loc 1 1340 11
 2039 006a BB68     		ldr	r3, [r7, #8]
 2040 006c FA78     		ldrb	r2, [r7, #3]
 2041 006e 1A70     		strb	r2, [r3]
1341:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2042              		.loc 1 1341 5
 2043              		.syntax unified
 2044              	@ 1341 "Src/SEGGER_RTT.c" 1
 2045 0070 BFF35F8F 		dmb
 2046              	
 2047              	@ 0 "" 2
1342:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2048              		.loc 1 1342 18
 2049              		.thumb
 2050              		.syntax unified
 2051 0074 FB68     		ldr	r3, [r7, #12]
 2052 0076 FA69     		ldr	r2, [r7, #28]
 2053 0078 DA60     		str	r2, [r3, #12]
1343:Src/SEGGER_RTT.c ****     Status = 1;
 2054              		.loc 1 1343 12
 2055 007a 0123     		movs	r3, #1
 2056 007c BB61     		str	r3, [r7, #24]
 2057 007e 01E0     		b	.L100
 2058              	.L99:
1344:Src/SEGGER_RTT.c ****   } else {
1345:Src/SEGGER_RTT.c ****     Status = 0;
 2059              		.loc 1 1345 12
 2060 0080 0023     		movs	r3, #0
 2061 0082 BB61     		str	r3, [r7, #24]
 2062              	.L100:
1346:Src/SEGGER_RTT.c ****   }
1347:Src/SEGGER_RTT.c ****   //
1348:Src/SEGGER_RTT.c ****   // Finish up.
1349:Src/SEGGER_RTT.c ****   //
1350:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2063              		.loc 1 1350 3
 2064 0084 3B69     		ldr	r3, [r7, #16]
 2065              		.syntax unified
 2066              	@ 1350 "Src/SEGGER_RTT.c" 1
 2067 0086 83F31188 		msr   basepri, r3  
 2068              		
 2069              	@ 0 "" 2
 2070              		.thumb
 2071              		.syntax unified
 2072              	.LBE11:
1351:Src/SEGGER_RTT.c ****   //
1352:Src/SEGGER_RTT.c ****   return Status;
 2073              		.loc 1 1352 10
 2074 008a BB69     		ldr	r3, [r7, #24]
1353:Src/SEGGER_RTT.c **** }
 2075              		.loc 1 1353 1
 2076 008c 1846     		mov	r0, r3
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 61


 2077 008e 2037     		adds	r7, r7, #32
 2078              		.cfi_def_cfa_offset 8
 2079 0090 BD46     		mov	sp, r7
 2080              		.cfi_def_cfa_register 13
 2081              		@ sp needed
 2082 0092 80BD     		pop	{r7, pc}
 2083              	.L103:
 2084              		.align	2
 2085              	.L102:
 2086 0094 00000000 		.word	_SEGGER_RTT
 2087              		.cfi_endproc
 2088              	.LFE16:
 2090              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2091              		.align	1
 2092              		.global	SEGGER_RTT_PutChar
 2093              		.syntax unified
 2094              		.thumb
 2095              		.thumb_func
 2097              	SEGGER_RTT_PutChar:
 2098              	.LFB17:
1354:Src/SEGGER_RTT.c **** 
1355:Src/SEGGER_RTT.c ****  /*********************************************************************
1356:Src/SEGGER_RTT.c **** *
1357:Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1358:Src/SEGGER_RTT.c **** *
1359:Src/SEGGER_RTT.c **** *  Function description
1360:Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1361:Src/SEGGER_RTT.c **** *
1362:Src/SEGGER_RTT.c **** *  Parameters
1363:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1364:Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1365:Src/SEGGER_RTT.c **** *
1366:Src/SEGGER_RTT.c **** *  Return value
1367:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1368:Src/SEGGER_RTT.c **** *
1369:Src/SEGGER_RTT.c **** *  Notes
1370:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1371:Src/SEGGER_RTT.c **** */
1372:Src/SEGGER_RTT.c **** 
1373:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2099              		.loc 1 1373 59
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 32
 2102              		@ frame_needed = 1, uses_anonymous_args = 0
 2103 0000 80B5     		push	{r7, lr}
 2104              		.cfi_def_cfa_offset 8
 2105              		.cfi_offset 7, -8
 2106              		.cfi_offset 14, -4
 2107 0002 88B0     		sub	sp, sp, #32
 2108              		.cfi_def_cfa_offset 40
 2109 0004 00AF     		add	r7, sp, #0
 2110              		.cfi_def_cfa_register 7
 2111 0006 7860     		str	r0, [r7, #4]
 2112 0008 0B46     		mov	r3, r1
 2113 000a FB70     		strb	r3, [r7, #3]
 2114              	.LBB12:
1374:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 62


1375:Src/SEGGER_RTT.c ****   unsigned              WrOff;
1376:Src/SEGGER_RTT.c ****   unsigned              Status;
1377:Src/SEGGER_RTT.c ****   volatile char*        pDst;
1378:Src/SEGGER_RTT.c ****   //
1379:Src/SEGGER_RTT.c ****   // Prepare
1380:Src/SEGGER_RTT.c ****   //
1381:Src/SEGGER_RTT.c ****   INIT();
 2115              		.loc 1 1381 3
 2116 000c 264B     		ldr	r3, .L112
 2117 000e 7B61     		str	r3, [r7, #20]
 2118 0010 7B69     		ldr	r3, [r7, #20]
 2119 0012 1B78     		ldrb	r3, [r3]
 2120 0014 DBB2     		uxtb	r3, r3
 2121 0016 002B     		cmp	r3, #0
 2122 0018 01D1     		bne	.L105
 2123              		.loc 1 1381 3 is_stmt 0 discriminator 1
 2124 001a FFF7FEFF 		bl	_DoInit
 2125              	.L105:
 2126              	.LBE12:
 2127              	.LBB13:
1382:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2128              		.loc 1 1382 3 is_stmt 1
 2129              		.syntax unified
 2130              	@ 1382 "Src/SEGGER_RTT.c" 1
 2131 001e EFF31183 		mrs   r3, basepri  
 2132 0022 4FF02001 		mov   r1, #32       
 2133 0026 81F31188 		msr   basepri, r1  
 2134              		
 2135              	@ 0 "" 2
 2136              		.thumb
 2137              		.syntax unified
 2138 002a 3B61     		str	r3, [r7, #16]
1383:Src/SEGGER_RTT.c ****   //
1384:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1385:Src/SEGGER_RTT.c ****   //
1386:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2139              		.loc 1 1386 9
 2140 002c 7B68     		ldr	r3, [r7, #4]
 2141 002e 5A1C     		adds	r2, r3, #1
 2142 0030 1346     		mov	r3, r2
 2143 0032 5B00     		lsls	r3, r3, #1
 2144 0034 1344     		add	r3, r3, r2
 2145 0036 DB00     		lsls	r3, r3, #3
 2146 0038 1B4A     		ldr	r2, .L112
 2147 003a 1344     		add	r3, r3, r2
 2148 003c FB60     		str	r3, [r7, #12]
1387:Src/SEGGER_RTT.c ****   //
1388:Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1389:Src/SEGGER_RTT.c ****   //
1390:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2149              		.loc 1 1390 16
 2150 003e FB68     		ldr	r3, [r7, #12]
 2151 0040 DB68     		ldr	r3, [r3, #12]
 2152              		.loc 1 1390 9
 2153 0042 0133     		adds	r3, r3, #1
 2154 0044 FB61     		str	r3, [r7, #28]
1391:Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 63


 2155              		.loc 1 1391 21
 2156 0046 FB68     		ldr	r3, [r7, #12]
 2157 0048 9B68     		ldr	r3, [r3, #8]
 2158              		.loc 1 1391 6
 2159 004a FA69     		ldr	r2, [r7, #28]
 2160 004c 9A42     		cmp	r2, r3
 2161 004e 01D1     		bne	.L106
1392:Src/SEGGER_RTT.c ****     WrOff = 0;
 2162              		.loc 1 1392 11
 2163 0050 0023     		movs	r3, #0
 2164 0052 FB61     		str	r3, [r7, #28]
 2165              	.L106:
1393:Src/SEGGER_RTT.c ****   }
1394:Src/SEGGER_RTT.c ****   //
1395:Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1396:Src/SEGGER_RTT.c ****   //
1397:Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2166              		.loc 1 1397 12
 2167 0054 FB68     		ldr	r3, [r7, #12]
 2168 0056 5B69     		ldr	r3, [r3, #20]
 2169              		.loc 1 1397 6
 2170 0058 022B     		cmp	r3, #2
 2171 005a 05D1     		bne	.L107
1398:Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 2172              		.loc 1 1398 11
 2173 005c 00BF     		nop
 2174              	.L108:
 2175              		.loc 1 1398 26 discriminator 1
 2176 005e FB68     		ldr	r3, [r7, #12]
 2177 0060 1B69     		ldr	r3, [r3, #16]
 2178              		.loc 1 1398 18 discriminator 1
 2179 0062 FA69     		ldr	r2, [r7, #28]
 2180 0064 9A42     		cmp	r2, r3
 2181 0066 FAD0     		beq	.L108
 2182              	.L107:
1399:Src/SEGGER_RTT.c ****       ;
1400:Src/SEGGER_RTT.c ****     }
1401:Src/SEGGER_RTT.c ****   }
1402:Src/SEGGER_RTT.c ****   //
1403:Src/SEGGER_RTT.c ****   // Output byte if free space is available
1404:Src/SEGGER_RTT.c ****   //
1405:Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2183              		.loc 1 1405 21
 2184 0068 FB68     		ldr	r3, [r7, #12]
 2185 006a 1B69     		ldr	r3, [r3, #16]
 2186              		.loc 1 1405 6
 2187 006c FA69     		ldr	r2, [r7, #28]
 2188 006e 9A42     		cmp	r2, r3
 2189 0070 10D0     		beq	.L109
1406:Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2190              		.loc 1 1406 19
 2191 0072 FB68     		ldr	r3, [r7, #12]
 2192 0074 5A68     		ldr	r2, [r3, #4]
 2193              		.loc 1 1406 36
 2194 0076 FB68     		ldr	r3, [r7, #12]
 2195 0078 DB68     		ldr	r3, [r3, #12]
 2196              		.loc 1 1406 11
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 64


 2197 007a 1344     		add	r3, r3, r2
 2198 007c BB60     		str	r3, [r7, #8]
1407:Src/SEGGER_RTT.c ****     *pDst = c;
 2199              		.loc 1 1407 11
 2200 007e BB68     		ldr	r3, [r7, #8]
 2201 0080 FA78     		ldrb	r2, [r7, #3]
 2202 0082 1A70     		strb	r2, [r3]
1408:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2203              		.loc 1 1408 5
 2204              		.syntax unified
 2205              	@ 1408 "Src/SEGGER_RTT.c" 1
 2206 0084 BFF35F8F 		dmb
 2207              	
 2208              	@ 0 "" 2
1409:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2209              		.loc 1 1409 18
 2210              		.thumb
 2211              		.syntax unified
 2212 0088 FB68     		ldr	r3, [r7, #12]
 2213 008a FA69     		ldr	r2, [r7, #28]
 2214 008c DA60     		str	r2, [r3, #12]
1410:Src/SEGGER_RTT.c ****     Status = 1;
 2215              		.loc 1 1410 12
 2216 008e 0123     		movs	r3, #1
 2217 0090 BB61     		str	r3, [r7, #24]
 2218 0092 01E0     		b	.L110
 2219              	.L109:
1411:Src/SEGGER_RTT.c ****   } else {
1412:Src/SEGGER_RTT.c ****     Status = 0;
 2220              		.loc 1 1412 12
 2221 0094 0023     		movs	r3, #0
 2222 0096 BB61     		str	r3, [r7, #24]
 2223              	.L110:
1413:Src/SEGGER_RTT.c ****   }
1414:Src/SEGGER_RTT.c ****   //
1415:Src/SEGGER_RTT.c ****   // Finish up.
1416:Src/SEGGER_RTT.c ****   //
1417:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2224              		.loc 1 1417 3
 2225 0098 3B69     		ldr	r3, [r7, #16]
 2226              		.syntax unified
 2227              	@ 1417 "Src/SEGGER_RTT.c" 1
 2228 009a 83F31188 		msr   basepri, r3  
 2229              		
 2230              	@ 0 "" 2
 2231              		.thumb
 2232              		.syntax unified
 2233              	.LBE13:
1418:Src/SEGGER_RTT.c ****   return Status;
 2234              		.loc 1 1418 10
 2235 009e BB69     		ldr	r3, [r7, #24]
1419:Src/SEGGER_RTT.c **** }
 2236              		.loc 1 1419 1
 2237 00a0 1846     		mov	r0, r3
 2238 00a2 2037     		adds	r7, r7, #32
 2239              		.cfi_def_cfa_offset 8
 2240 00a4 BD46     		mov	sp, r7
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 65


 2241              		.cfi_def_cfa_register 13
 2242              		@ sp needed
 2243 00a6 80BD     		pop	{r7, pc}
 2244              	.L113:
 2245              		.align	2
 2246              	.L112:
 2247 00a8 00000000 		.word	_SEGGER_RTT
 2248              		.cfi_endproc
 2249              	.LFE17:
 2251              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2252              		.align	1
 2253              		.global	SEGGER_RTT_GetKey
 2254              		.syntax unified
 2255              		.thumb
 2256              		.thumb_func
 2258              	SEGGER_RTT_GetKey:
 2259              	.LFB18:
1420:Src/SEGGER_RTT.c **** 
1421:Src/SEGGER_RTT.c **** /*********************************************************************
1422:Src/SEGGER_RTT.c **** *
1423:Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1424:Src/SEGGER_RTT.c **** *
1425:Src/SEGGER_RTT.c **** *  Function description
1426:Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1427:Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1428:Src/SEGGER_RTT.c **** *
1429:Src/SEGGER_RTT.c **** *  Return value
1430:Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1431:Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1432:Src/SEGGER_RTT.c **** *
1433:Src/SEGGER_RTT.c **** *  Notes
1434:Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1435:Src/SEGGER_RTT.c **** */
1436:Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2260              		.loc 1 1436 29
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 8
 2263              		@ frame_needed = 1, uses_anonymous_args = 0
 2264 0000 80B5     		push	{r7, lr}
 2265              		.cfi_def_cfa_offset 8
 2266              		.cfi_offset 7, -8
 2267              		.cfi_offset 14, -4
 2268 0002 82B0     		sub	sp, sp, #8
 2269              		.cfi_def_cfa_offset 16
 2270 0004 00AF     		add	r7, sp, #0
 2271              		.cfi_def_cfa_register 7
1437:Src/SEGGER_RTT.c ****   char c;
1438:Src/SEGGER_RTT.c ****   int r;
1439:Src/SEGGER_RTT.c **** 
1440:Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2272              		.loc 1 1440 12
 2273 0006 FB1C     		adds	r3, r7, #3
 2274 0008 0122     		movs	r2, #1
 2275 000a 1946     		mov	r1, r3
 2276 000c 0020     		movs	r0, #0
 2277 000e FFF7FEFF 		bl	SEGGER_RTT_Read
 2278 0012 0346     		mov	r3, r0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 66


 2279              		.loc 1 1440 5
 2280 0014 7B60     		str	r3, [r7, #4]
1441:Src/SEGGER_RTT.c ****   if (r == 1) {
 2281              		.loc 1 1441 6
 2282 0016 7B68     		ldr	r3, [r7, #4]
 2283 0018 012B     		cmp	r3, #1
 2284 001a 02D1     		bne	.L115
1442:Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2285              		.loc 1 1442 9
 2286 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2287              		.loc 1 1442 7
 2288 001e 7B60     		str	r3, [r7, #4]
 2289 0020 02E0     		b	.L116
 2290              	.L115:
1443:Src/SEGGER_RTT.c ****   } else {
1444:Src/SEGGER_RTT.c ****     r = -1;
 2291              		.loc 1 1444 7
 2292 0022 4FF0FF33 		mov	r3, #-1
 2293 0026 7B60     		str	r3, [r7, #4]
 2294              	.L116:
1445:Src/SEGGER_RTT.c ****   }
1446:Src/SEGGER_RTT.c ****   return r;
 2295              		.loc 1 1446 10
 2296 0028 7B68     		ldr	r3, [r7, #4]
1447:Src/SEGGER_RTT.c **** }
 2297              		.loc 1 1447 1
 2298 002a 1846     		mov	r0, r3
 2299 002c 0837     		adds	r7, r7, #8
 2300              		.cfi_def_cfa_offset 8
 2301 002e BD46     		mov	sp, r7
 2302              		.cfi_def_cfa_register 13
 2303              		@ sp needed
 2304 0030 80BD     		pop	{r7, pc}
 2305              		.cfi_endproc
 2306              	.LFE18:
 2308              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2309              		.align	1
 2310              		.global	SEGGER_RTT_WaitKey
 2311              		.syntax unified
 2312              		.thumb
 2313              		.thumb_func
 2315              	SEGGER_RTT_WaitKey:
 2316              	.LFB19:
1448:Src/SEGGER_RTT.c **** 
1449:Src/SEGGER_RTT.c **** /*********************************************************************
1450:Src/SEGGER_RTT.c **** *
1451:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1452:Src/SEGGER_RTT.c **** *
1453:Src/SEGGER_RTT.c **** *  Function description
1454:Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1455:Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1456:Src/SEGGER_RTT.c **** *
1457:Src/SEGGER_RTT.c **** *  Return value
1458:Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1459:Src/SEGGER_RTT.c **** *
1460:Src/SEGGER_RTT.c **** *  Notes
1461:Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 67


1462:Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1463:Src/SEGGER_RTT.c **** */
1464:Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2317              		.loc 1 1464 30
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 8
 2320              		@ frame_needed = 1, uses_anonymous_args = 0
 2321 0000 80B5     		push	{r7, lr}
 2322              		.cfi_def_cfa_offset 8
 2323              		.cfi_offset 7, -8
 2324              		.cfi_offset 14, -4
 2325 0002 82B0     		sub	sp, sp, #8
 2326              		.cfi_def_cfa_offset 16
 2327 0004 00AF     		add	r7, sp, #0
 2328              		.cfi_def_cfa_register 7
 2329              	.L119:
1465:Src/SEGGER_RTT.c ****   int r;
1466:Src/SEGGER_RTT.c **** 
1467:Src/SEGGER_RTT.c ****   do {
1468:Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2330              		.loc 1 1468 9 discriminator 1
 2331 0006 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2332 000a 7860     		str	r0, [r7, #4]
1469:Src/SEGGER_RTT.c ****   } while (r < 0);
 2333              		.loc 1 1469 14 discriminator 1
 2334 000c 7B68     		ldr	r3, [r7, #4]
 2335 000e 002B     		cmp	r3, #0
 2336 0010 F9DB     		blt	.L119
1470:Src/SEGGER_RTT.c ****   return r;
 2337              		.loc 1 1470 10
 2338 0012 7B68     		ldr	r3, [r7, #4]
1471:Src/SEGGER_RTT.c **** }
 2339              		.loc 1 1471 1
 2340 0014 1846     		mov	r0, r3
 2341 0016 0837     		adds	r7, r7, #8
 2342              		.cfi_def_cfa_offset 8
 2343 0018 BD46     		mov	sp, r7
 2344              		.cfi_def_cfa_register 13
 2345              		@ sp needed
 2346 001a 80BD     		pop	{r7, pc}
 2347              		.cfi_endproc
 2348              	.LFE19:
 2350              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2351              		.align	1
 2352              		.global	SEGGER_RTT_HasKey
 2353              		.syntax unified
 2354              		.thumb
 2355              		.thumb_func
 2357              	SEGGER_RTT_HasKey:
 2358              	.LFB20:
1472:Src/SEGGER_RTT.c **** 
1473:Src/SEGGER_RTT.c **** /*********************************************************************
1474:Src/SEGGER_RTT.c **** *
1475:Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1476:Src/SEGGER_RTT.c **** *
1477:Src/SEGGER_RTT.c **** *  Function description
1478:Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 68


1479:Src/SEGGER_RTT.c **** *
1480:Src/SEGGER_RTT.c **** *  Return value
1481:Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1482:Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1483:Src/SEGGER_RTT.c **** *
1484:Src/SEGGER_RTT.c **** *  Notes
1485:Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1486:Src/SEGGER_RTT.c **** */
1487:Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2359              		.loc 1 1487 29
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 16
 2362              		@ frame_needed = 1, uses_anonymous_args = 0
 2363 0000 80B5     		push	{r7, lr}
 2364              		.cfi_def_cfa_offset 8
 2365              		.cfi_offset 7, -8
 2366              		.cfi_offset 14, -4
 2367 0002 84B0     		sub	sp, sp, #16
 2368              		.cfi_def_cfa_offset 24
 2369 0004 00AF     		add	r7, sp, #0
 2370              		.cfi_def_cfa_register 7
 2371              	.LBB14:
1488:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1489:Src/SEGGER_RTT.c ****   unsigned RdOff;
1490:Src/SEGGER_RTT.c ****   int r;
1491:Src/SEGGER_RTT.c **** 
1492:Src/SEGGER_RTT.c ****   INIT();
 2372              		.loc 1 1492 3
 2373 0006 0E4B     		ldr	r3, .L126
 2374 0008 BB60     		str	r3, [r7, #8]
 2375 000a BB68     		ldr	r3, [r7, #8]
 2376 000c 1B78     		ldrb	r3, [r3]
 2377 000e DBB2     		uxtb	r3, r3
 2378 0010 002B     		cmp	r3, #0
 2379 0012 01D1     		bne	.L122
 2380              		.loc 1 1492 3 is_stmt 0 discriminator 1
 2381 0014 FFF7FEFF 		bl	_DoInit
 2382              	.L122:
 2383              	.LBE14:
1493:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2384              		.loc 1 1493 9 is_stmt 1
 2385 0018 0A4B     		ldr	r3, .L126+4
 2386 001a 7B60     		str	r3, [r7, #4]
1494:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2387              		.loc 1 1494 9
 2388 001c 7B68     		ldr	r3, [r7, #4]
 2389 001e 1B69     		ldr	r3, [r3, #16]
 2390 0020 3B60     		str	r3, [r7]
1495:Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2391              		.loc 1 1495 21
 2392 0022 7B68     		ldr	r3, [r7, #4]
 2393 0024 DB68     		ldr	r3, [r3, #12]
 2394              		.loc 1 1495 6
 2395 0026 3A68     		ldr	r2, [r7]
 2396 0028 9A42     		cmp	r2, r3
 2397 002a 02D0     		beq	.L123
1496:Src/SEGGER_RTT.c ****     r = 1;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 69


 2398              		.loc 1 1496 7
 2399 002c 0123     		movs	r3, #1
 2400 002e FB60     		str	r3, [r7, #12]
 2401 0030 01E0     		b	.L124
 2402              	.L123:
1497:Src/SEGGER_RTT.c ****   } else {
1498:Src/SEGGER_RTT.c ****     r = 0;
 2403              		.loc 1 1498 7
 2404 0032 0023     		movs	r3, #0
 2405 0034 FB60     		str	r3, [r7, #12]
 2406              	.L124:
1499:Src/SEGGER_RTT.c ****   }
1500:Src/SEGGER_RTT.c ****   return r;
 2407              		.loc 1 1500 10
 2408 0036 FB68     		ldr	r3, [r7, #12]
1501:Src/SEGGER_RTT.c **** }
 2409              		.loc 1 1501 1
 2410 0038 1846     		mov	r0, r3
 2411 003a 1037     		adds	r7, r7, #16
 2412              		.cfi_def_cfa_offset 8
 2413 003c BD46     		mov	sp, r7
 2414              		.cfi_def_cfa_register 13
 2415              		@ sp needed
 2416 003e 80BD     		pop	{r7, pc}
 2417              	.L127:
 2418              		.align	2
 2419              	.L126:
 2420 0040 00000000 		.word	_SEGGER_RTT
 2421 0044 60000000 		.word	_SEGGER_RTT+96
 2422              		.cfi_endproc
 2423              	.LFE20:
 2425              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2426              		.align	1
 2427              		.global	SEGGER_RTT_HasData
 2428              		.syntax unified
 2429              		.thumb
 2430              		.thumb_func
 2432              	SEGGER_RTT_HasData:
 2433              	.LFB21:
1502:Src/SEGGER_RTT.c **** 
1503:Src/SEGGER_RTT.c **** /*********************************************************************
1504:Src/SEGGER_RTT.c **** *
1505:Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1506:Src/SEGGER_RTT.c **** *
1507:Src/SEGGER_RTT.c **** *  Function description
1508:Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1509:Src/SEGGER_RTT.c **** *
1510:Src/SEGGER_RTT.c **** *  Return value:
1511:Src/SEGGER_RTT.c **** *  ==0:  No data
1512:Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1513:Src/SEGGER_RTT.c **** *
1514:Src/SEGGER_RTT.c **** */
1515:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2434              		.loc 1 1515 51
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 16
 2437              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 70


 2438              		@ link register save eliminated.
 2439 0000 80B4     		push	{r7}
 2440              		.cfi_def_cfa_offset 4
 2441              		.cfi_offset 7, -4
 2442 0002 85B0     		sub	sp, sp, #20
 2443              		.cfi_def_cfa_offset 24
 2444 0004 00AF     		add	r7, sp, #0
 2445              		.cfi_def_cfa_register 7
 2446 0006 7860     		str	r0, [r7, #4]
1516:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1517:Src/SEGGER_RTT.c ****   unsigned                v;
1518:Src/SEGGER_RTT.c **** 
1519:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2447              		.loc 1 1519 9
 2448 0008 7A68     		ldr	r2, [r7, #4]
 2449 000a 1346     		mov	r3, r2
 2450 000c 5B00     		lsls	r3, r3, #1
 2451 000e 1344     		add	r3, r3, r2
 2452 0010 DB00     		lsls	r3, r3, #3
 2453 0012 6033     		adds	r3, r3, #96
 2454 0014 074A     		ldr	r2, .L130
 2455 0016 1344     		add	r3, r3, r2
 2456 0018 FB60     		str	r3, [r7, #12]
1520:Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2457              		.loc 1 1520 5
 2458 001a FB68     		ldr	r3, [r7, #12]
 2459 001c DB68     		ldr	r3, [r3, #12]
 2460 001e BB60     		str	r3, [r7, #8]
1521:Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2461              		.loc 1 1521 19
 2462 0020 FB68     		ldr	r3, [r7, #12]
 2463 0022 1B69     		ldr	r3, [r3, #16]
 2464              		.loc 1 1521 12
 2465 0024 BA68     		ldr	r2, [r7, #8]
 2466 0026 D31A     		subs	r3, r2, r3
1522:Src/SEGGER_RTT.c **** }
 2467              		.loc 1 1522 1
 2468 0028 1846     		mov	r0, r3
 2469 002a 1437     		adds	r7, r7, #20
 2470              		.cfi_def_cfa_offset 4
 2471 002c BD46     		mov	sp, r7
 2472              		.cfi_def_cfa_register 13
 2473              		@ sp needed
 2474 002e 5DF8047B 		ldr	r7, [sp], #4
 2475              		.cfi_restore 7
 2476              		.cfi_def_cfa_offset 0
 2477 0032 7047     		bx	lr
 2478              	.L131:
 2479              		.align	2
 2480              	.L130:
 2481 0034 00000000 		.word	_SEGGER_RTT
 2482              		.cfi_endproc
 2483              	.LFE21:
 2485              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2486              		.align	1
 2487              		.global	SEGGER_RTT_HasDataUp
 2488              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 71


 2489              		.thumb
 2490              		.thumb_func
 2492              	SEGGER_RTT_HasDataUp:
 2493              	.LFB22:
1523:Src/SEGGER_RTT.c **** 
1524:Src/SEGGER_RTT.c **** /*********************************************************************
1525:Src/SEGGER_RTT.c **** *
1526:Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1527:Src/SEGGER_RTT.c **** *
1528:Src/SEGGER_RTT.c **** *  Function description
1529:Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1530:Src/SEGGER_RTT.c **** *
1531:Src/SEGGER_RTT.c **** *  Return value:
1532:Src/SEGGER_RTT.c **** *  ==0:  No data
1533:Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1534:Src/SEGGER_RTT.c **** *
1535:Src/SEGGER_RTT.c **** */
1536:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2494              		.loc 1 1536 53
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 16
 2497              		@ frame_needed = 1, uses_anonymous_args = 0
 2498              		@ link register save eliminated.
 2499 0000 80B4     		push	{r7}
 2500              		.cfi_def_cfa_offset 4
 2501              		.cfi_offset 7, -4
 2502 0002 85B0     		sub	sp, sp, #20
 2503              		.cfi_def_cfa_offset 24
 2504 0004 00AF     		add	r7, sp, #0
 2505              		.cfi_def_cfa_register 7
 2506 0006 7860     		str	r0, [r7, #4]
1537:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1538:Src/SEGGER_RTT.c ****   unsigned                v;
1539:Src/SEGGER_RTT.c **** 
1540:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2507              		.loc 1 1540 9
 2508 0008 7B68     		ldr	r3, [r7, #4]
 2509 000a 5A1C     		adds	r2, r3, #1
 2510 000c 1346     		mov	r3, r2
 2511 000e 5B00     		lsls	r3, r3, #1
 2512 0010 1344     		add	r3, r3, r2
 2513 0012 DB00     		lsls	r3, r3, #3
 2514 0014 074A     		ldr	r2, .L134
 2515 0016 1344     		add	r3, r3, r2
 2516 0018 FB60     		str	r3, [r7, #12]
1541:Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2517              		.loc 1 1541 5
 2518 001a FB68     		ldr	r3, [r7, #12]
 2519 001c 1B69     		ldr	r3, [r3, #16]
 2520 001e BB60     		str	r3, [r7, #8]
1542:Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2521              		.loc 1 1542 15
 2522 0020 FB68     		ldr	r3, [r7, #12]
 2523 0022 DA68     		ldr	r2, [r3, #12]
 2524              		.loc 1 1542 23
 2525 0024 BB68     		ldr	r3, [r7, #8]
 2526 0026 D31A     		subs	r3, r2, r3
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 72


1543:Src/SEGGER_RTT.c **** }
 2527              		.loc 1 1543 1
 2528 0028 1846     		mov	r0, r3
 2529 002a 1437     		adds	r7, r7, #20
 2530              		.cfi_def_cfa_offset 4
 2531 002c BD46     		mov	sp, r7
 2532              		.cfi_def_cfa_register 13
 2533              		@ sp needed
 2534 002e 5DF8047B 		ldr	r7, [sp], #4
 2535              		.cfi_restore 7
 2536              		.cfi_def_cfa_offset 0
 2537 0032 7047     		bx	lr
 2538              	.L135:
 2539              		.align	2
 2540              	.L134:
 2541 0034 00000000 		.word	_SEGGER_RTT
 2542              		.cfi_endproc
 2543              	.LFE22:
 2545              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2546              		.align	1
 2547              		.global	SEGGER_RTT_AllocDownBuffer
 2548              		.syntax unified
 2549              		.thumb
 2550              		.thumb_func
 2552              	SEGGER_RTT_AllocDownBuffer:
 2553              	.LFB23:
1544:Src/SEGGER_RTT.c **** 
1545:Src/SEGGER_RTT.c **** /*********************************************************************
1546:Src/SEGGER_RTT.c **** *
1547:Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1548:Src/SEGGER_RTT.c **** *
1549:Src/SEGGER_RTT.c **** *  Function description
1550:Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1551:Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1552:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1553:Src/SEGGER_RTT.c **** *
1554:Src/SEGGER_RTT.c **** *  Parameters
1555:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1556:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1557:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1558:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1559:Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1560:Src/SEGGER_RTT.c **** *
1561:Src/SEGGER_RTT.c **** *  Return value
1562:Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1563:Src/SEGGER_RTT.c **** *     < 0 - Error
1564:Src/SEGGER_RTT.c **** */
1565:Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2554              		.loc 1 1565 103
 2555              		.cfi_startproc
 2556              		@ args = 0, pretend = 0, frame = 32
 2557              		@ frame_needed = 1, uses_anonymous_args = 0
 2558 0000 80B5     		push	{r7, lr}
 2559              		.cfi_def_cfa_offset 8
 2560              		.cfi_offset 7, -8
 2561              		.cfi_offset 14, -4
 2562 0002 88B0     		sub	sp, sp, #32
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 73


 2563              		.cfi_def_cfa_offset 40
 2564 0004 00AF     		add	r7, sp, #0
 2565              		.cfi_def_cfa_register 7
 2566 0006 F860     		str	r0, [r7, #12]
 2567 0008 B960     		str	r1, [r7, #8]
 2568 000a 7A60     		str	r2, [r7, #4]
 2569 000c 3B60     		str	r3, [r7]
 2570              	.LBB15:
1566:Src/SEGGER_RTT.c ****   int BufferIndex;
1567:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1568:Src/SEGGER_RTT.c **** 
1569:Src/SEGGER_RTT.c ****   INIT();
 2571              		.loc 1 1569 3
 2572 000e 3C4B     		ldr	r3, .L145
 2573 0010 BB61     		str	r3, [r7, #24]
 2574 0012 BB69     		ldr	r3, [r7, #24]
 2575 0014 1B78     		ldrb	r3, [r3]
 2576 0016 DBB2     		uxtb	r3, r3
 2577 0018 002B     		cmp	r3, #0
 2578 001a 01D1     		bne	.L137
 2579              		.loc 1 1569 3 is_stmt 0 discriminator 1
 2580 001c FFF7FEFF 		bl	_DoInit
 2581              	.L137:
 2582              	.LBE15:
 2583              	.LBB16:
1570:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2584              		.loc 1 1570 3 is_stmt 1
 2585              		.syntax unified
 2586              	@ 1570 "Src/SEGGER_RTT.c" 1
 2587 0020 EFF31183 		mrs   r3, basepri  
 2588 0024 4FF02001 		mov   r1, #32       
 2589 0028 81F31188 		msr   basepri, r1  
 2590              		
 2591              	@ 0 "" 2
 2592              		.thumb
 2593              		.syntax unified
 2594 002c 7B61     		str	r3, [r7, #20]
1571:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2595              		.loc 1 1571 10
 2596 002e 344B     		ldr	r3, .L145
 2597 0030 3B61     		str	r3, [r7, #16]
1572:Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2598              		.loc 1 1572 15
 2599 0032 0023     		movs	r3, #0
 2600 0034 FB61     		str	r3, [r7, #28]
 2601              	.L140:
1573:Src/SEGGER_RTT.c ****   do {
1574:Src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2602              		.loc 1 1574 35
 2603 0036 3969     		ldr	r1, [r7, #16]
 2604 0038 FA69     		ldr	r2, [r7, #28]
 2605 003a 1346     		mov	r3, r2
 2606 003c 5B00     		lsls	r3, r3, #1
 2607 003e 1344     		add	r3, r3, r2
 2608 0040 DB00     		lsls	r3, r3, #3
 2609 0042 0B44     		add	r3, r3, r1
 2610 0044 6433     		adds	r3, r3, #100
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 74


 2611 0046 1B68     		ldr	r3, [r3]
 2612              		.loc 1 1574 8
 2613 0048 002B     		cmp	r3, #0
 2614 004a 08D0     		beq	.L144
1575:Src/SEGGER_RTT.c ****       break;
1576:Src/SEGGER_RTT.c ****     }
1577:Src/SEGGER_RTT.c ****     BufferIndex++;
 2615              		.loc 1 1577 16
 2616 004c FB69     		ldr	r3, [r7, #28]
 2617 004e 0133     		adds	r3, r3, #1
 2618 0050 FB61     		str	r3, [r7, #28]
1578:Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2619              		.loc 1 1578 32
 2620 0052 3B69     		ldr	r3, [r7, #16]
 2621 0054 5B69     		ldr	r3, [r3, #20]
 2622              		.loc 1 1578 24
 2623 0056 FA69     		ldr	r2, [r7, #28]
 2624 0058 9A42     		cmp	r2, r3
 2625 005a ECDB     		blt	.L140
 2626 005c 00E0     		b	.L139
 2627              	.L144:
1575:Src/SEGGER_RTT.c ****       break;
 2628              		.loc 1 1575 7
 2629 005e 00BF     		nop
 2630              	.L139:
1579:Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2631              		.loc 1 1579 27
 2632 0060 3B69     		ldr	r3, [r7, #16]
 2633 0062 5B69     		ldr	r3, [r3, #20]
 2634              		.loc 1 1579 6
 2635 0064 FA69     		ldr	r2, [r7, #28]
 2636 0066 9A42     		cmp	r2, r3
 2637 0068 3EDA     		bge	.L141
1580:Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2638              		.loc 1 1580 45
 2639 006a 3969     		ldr	r1, [r7, #16]
 2640 006c FA69     		ldr	r2, [r7, #28]
 2641 006e 1346     		mov	r3, r2
 2642 0070 5B00     		lsls	r3, r3, #1
 2643 0072 1344     		add	r3, r3, r2
 2644 0074 DB00     		lsls	r3, r3, #3
 2645 0076 0B44     		add	r3, r3, r1
 2646 0078 6033     		adds	r3, r3, #96
 2647 007a FA68     		ldr	r2, [r7, #12]
 2648 007c 1A60     		str	r2, [r3]
1581:Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2649              		.loc 1 1581 45
 2650 007e 3969     		ldr	r1, [r7, #16]
 2651 0080 FA69     		ldr	r2, [r7, #28]
 2652 0082 1346     		mov	r3, r2
 2653 0084 5B00     		lsls	r3, r3, #1
 2654 0086 1344     		add	r3, r3, r2
 2655 0088 DB00     		lsls	r3, r3, #3
 2656 008a 0B44     		add	r3, r3, r1
 2657 008c 6433     		adds	r3, r3, #100
 2658 008e BA68     		ldr	r2, [r7, #8]
 2659 0090 1A60     		str	r2, [r3]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 75


1582:Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2660              		.loc 1 1582 45
 2661 0092 3969     		ldr	r1, [r7, #16]
 2662 0094 FA69     		ldr	r2, [r7, #28]
 2663 0096 1346     		mov	r3, r2
 2664 0098 5B00     		lsls	r3, r3, #1
 2665 009a 1344     		add	r3, r3, r2
 2666 009c DB00     		lsls	r3, r3, #3
 2667 009e 0B44     		add	r3, r3, r1
 2668 00a0 6833     		adds	r3, r3, #104
 2669 00a2 7A68     		ldr	r2, [r7, #4]
 2670 00a4 1A60     		str	r2, [r3]
1583:Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2671              		.loc 1 1583 45
 2672 00a6 3969     		ldr	r1, [r7, #16]
 2673 00a8 FA69     		ldr	r2, [r7, #28]
 2674 00aa 1346     		mov	r3, r2
 2675 00ac 5B00     		lsls	r3, r3, #1
 2676 00ae 1344     		add	r3, r3, r2
 2677 00b0 DB00     		lsls	r3, r3, #3
 2678 00b2 0B44     		add	r3, r3, r1
 2679 00b4 7033     		adds	r3, r3, #112
 2680 00b6 0022     		movs	r2, #0
 2681 00b8 1A60     		str	r2, [r3]
1584:Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2682              		.loc 1 1584 45
 2683 00ba 3969     		ldr	r1, [r7, #16]
 2684 00bc FA69     		ldr	r2, [r7, #28]
 2685 00be 1346     		mov	r3, r2
 2686 00c0 5B00     		lsls	r3, r3, #1
 2687 00c2 1344     		add	r3, r3, r2
 2688 00c4 DB00     		lsls	r3, r3, #3
 2689 00c6 0B44     		add	r3, r3, r1
 2690 00c8 6C33     		adds	r3, r3, #108
 2691 00ca 0022     		movs	r2, #0
 2692 00cc 1A60     		str	r2, [r3]
1585:Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2693              		.loc 1 1585 45
 2694 00ce 3969     		ldr	r1, [r7, #16]
 2695 00d0 FA69     		ldr	r2, [r7, #28]
 2696 00d2 1346     		mov	r3, r2
 2697 00d4 5B00     		lsls	r3, r3, #1
 2698 00d6 1344     		add	r3, r3, r2
 2699 00d8 DB00     		lsls	r3, r3, #3
 2700 00da 0B44     		add	r3, r3, r1
 2701 00dc 7433     		adds	r3, r3, #116
 2702 00de 3A68     		ldr	r2, [r7]
 2703 00e0 1A60     		str	r2, [r3]
1586:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2704              		.loc 1 1586 5
 2705              		.syntax unified
 2706              	@ 1586 "Src/SEGGER_RTT.c" 1
 2707 00e2 BFF35F8F 		dmb
 2708              	
 2709              	@ 0 "" 2
 2710              		.thumb
 2711              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 76


 2712 00e6 02E0     		b	.L142
 2713              	.L141:
1587:Src/SEGGER_RTT.c ****   } else {
1588:Src/SEGGER_RTT.c ****     BufferIndex = -1;
 2714              		.loc 1 1588 17
 2715 00e8 4FF0FF33 		mov	r3, #-1
 2716 00ec FB61     		str	r3, [r7, #28]
 2717              	.L142:
1589:Src/SEGGER_RTT.c ****   }
1590:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2718              		.loc 1 1590 3
 2719 00ee 7B69     		ldr	r3, [r7, #20]
 2720              		.syntax unified
 2721              	@ 1590 "Src/SEGGER_RTT.c" 1
 2722 00f0 83F31188 		msr   basepri, r3  
 2723              		
 2724              	@ 0 "" 2
 2725              		.thumb
 2726              		.syntax unified
 2727              	.LBE16:
1591:Src/SEGGER_RTT.c ****   return BufferIndex;
 2728              		.loc 1 1591 10
 2729 00f4 FB69     		ldr	r3, [r7, #28]
1592:Src/SEGGER_RTT.c **** }
 2730              		.loc 1 1592 1
 2731 00f6 1846     		mov	r0, r3
 2732 00f8 2037     		adds	r7, r7, #32
 2733              		.cfi_def_cfa_offset 8
 2734 00fa BD46     		mov	sp, r7
 2735              		.cfi_def_cfa_register 13
 2736              		@ sp needed
 2737 00fc 80BD     		pop	{r7, pc}
 2738              	.L146:
 2739 00fe 00BF     		.align	2
 2740              	.L145:
 2741 0100 00000000 		.word	_SEGGER_RTT
 2742              		.cfi_endproc
 2743              	.LFE23:
 2745              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2746              		.align	1
 2747              		.global	SEGGER_RTT_AllocUpBuffer
 2748              		.syntax unified
 2749              		.thumb
 2750              		.thumb_func
 2752              	SEGGER_RTT_AllocUpBuffer:
 2753              	.LFB24:
1593:Src/SEGGER_RTT.c **** 
1594:Src/SEGGER_RTT.c **** /*********************************************************************
1595:Src/SEGGER_RTT.c **** *
1596:Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1597:Src/SEGGER_RTT.c **** *
1598:Src/SEGGER_RTT.c **** *  Function description
1599:Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1600:Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1601:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1602:Src/SEGGER_RTT.c **** *
1603:Src/SEGGER_RTT.c **** *  Parameters
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 77


1604:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1605:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1606:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1607:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1608:Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1609:Src/SEGGER_RTT.c **** *
1610:Src/SEGGER_RTT.c **** *  Return value
1611:Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1612:Src/SEGGER_RTT.c **** *     < 0 - Error
1613:Src/SEGGER_RTT.c **** */
1614:Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2754              		.loc 1 1614 101
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 32
 2757              		@ frame_needed = 1, uses_anonymous_args = 0
 2758 0000 80B5     		push	{r7, lr}
 2759              		.cfi_def_cfa_offset 8
 2760              		.cfi_offset 7, -8
 2761              		.cfi_offset 14, -4
 2762 0002 88B0     		sub	sp, sp, #32
 2763              		.cfi_def_cfa_offset 40
 2764 0004 00AF     		add	r7, sp, #0
 2765              		.cfi_def_cfa_register 7
 2766 0006 F860     		str	r0, [r7, #12]
 2767 0008 B960     		str	r1, [r7, #8]
 2768 000a 7A60     		str	r2, [r7, #4]
 2769 000c 3B60     		str	r3, [r7]
 2770              	.LBB17:
1615:Src/SEGGER_RTT.c ****   int BufferIndex;
1616:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1617:Src/SEGGER_RTT.c **** 
1618:Src/SEGGER_RTT.c ****   INIT();
 2771              		.loc 1 1618 3
 2772 000e 3D4B     		ldr	r3, .L156
 2773 0010 BB61     		str	r3, [r7, #24]
 2774 0012 BB69     		ldr	r3, [r7, #24]
 2775 0014 1B78     		ldrb	r3, [r3]
 2776 0016 DBB2     		uxtb	r3, r3
 2777 0018 002B     		cmp	r3, #0
 2778 001a 01D1     		bne	.L148
 2779              		.loc 1 1618 3 is_stmt 0 discriminator 1
 2780 001c FFF7FEFF 		bl	_DoInit
 2781              	.L148:
 2782              	.LBE17:
 2783              	.LBB18:
1619:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2784              		.loc 1 1619 3 is_stmt 1
 2785              		.syntax unified
 2786              	@ 1619 "Src/SEGGER_RTT.c" 1
 2787 0020 EFF31183 		mrs   r3, basepri  
 2788 0024 4FF02001 		mov   r1, #32       
 2789 0028 81F31188 		msr   basepri, r1  
 2790              		
 2791              	@ 0 "" 2
 2792              		.thumb
 2793              		.syntax unified
 2794 002c 7B61     		str	r3, [r7, #20]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 78


1620:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2795              		.loc 1 1620 10
 2796 002e 354B     		ldr	r3, .L156
 2797 0030 3B61     		str	r3, [r7, #16]
1621:Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2798              		.loc 1 1621 15
 2799 0032 0023     		movs	r3, #0
 2800 0034 FB61     		str	r3, [r7, #28]
 2801              	.L151:
1622:Src/SEGGER_RTT.c ****   do {
1623:Src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2802              		.loc 1 1623 33
 2803 0036 3969     		ldr	r1, [r7, #16]
 2804 0038 FB69     		ldr	r3, [r7, #28]
 2805 003a 5A1C     		adds	r2, r3, #1
 2806 003c 1346     		mov	r3, r2
 2807 003e 5B00     		lsls	r3, r3, #1
 2808 0040 1344     		add	r3, r3, r2
 2809 0042 DB00     		lsls	r3, r3, #3
 2810 0044 0B44     		add	r3, r3, r1
 2811 0046 0433     		adds	r3, r3, #4
 2812 0048 1B68     		ldr	r3, [r3]
 2813              		.loc 1 1623 8
 2814 004a 002B     		cmp	r3, #0
 2815 004c 08D0     		beq	.L155
1624:Src/SEGGER_RTT.c ****       break;
1625:Src/SEGGER_RTT.c ****     }
1626:Src/SEGGER_RTT.c ****     BufferIndex++;
 2816              		.loc 1 1626 16
 2817 004e FB69     		ldr	r3, [r7, #28]
 2818 0050 0133     		adds	r3, r3, #1
 2819 0052 FB61     		str	r3, [r7, #28]
1627:Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2820              		.loc 1 1627 32
 2821 0054 3B69     		ldr	r3, [r7, #16]
 2822 0056 1B69     		ldr	r3, [r3, #16]
 2823              		.loc 1 1627 24
 2824 0058 FA69     		ldr	r2, [r7, #28]
 2825 005a 9A42     		cmp	r2, r3
 2826 005c EBDB     		blt	.L151
 2827 005e 00E0     		b	.L150
 2828              	.L155:
1624:Src/SEGGER_RTT.c ****       break;
 2829              		.loc 1 1624 7
 2830 0060 00BF     		nop
 2831              	.L150:
1628:Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2832              		.loc 1 1628 27
 2833 0062 3B69     		ldr	r3, [r7, #16]
 2834 0064 1B69     		ldr	r3, [r3, #16]
 2835              		.loc 1 1628 6
 2836 0066 FA69     		ldr	r2, [r7, #28]
 2837 0068 9A42     		cmp	r2, r3
 2838 006a 3FDA     		bge	.L152
1629:Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2839              		.loc 1 1629 43
 2840 006c 3969     		ldr	r1, [r7, #16]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 79


 2841 006e FB69     		ldr	r3, [r7, #28]
 2842 0070 5A1C     		adds	r2, r3, #1
 2843 0072 1346     		mov	r3, r2
 2844 0074 5B00     		lsls	r3, r3, #1
 2845 0076 1344     		add	r3, r3, r2
 2846 0078 DB00     		lsls	r3, r3, #3
 2847 007a 0B44     		add	r3, r3, r1
 2848 007c FA68     		ldr	r2, [r7, #12]
 2849 007e 1A60     		str	r2, [r3]
1630:Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2850              		.loc 1 1630 43
 2851 0080 3969     		ldr	r1, [r7, #16]
 2852 0082 FB69     		ldr	r3, [r7, #28]
 2853 0084 5A1C     		adds	r2, r3, #1
 2854 0086 1346     		mov	r3, r2
 2855 0088 5B00     		lsls	r3, r3, #1
 2856 008a 1344     		add	r3, r3, r2
 2857 008c DB00     		lsls	r3, r3, #3
 2858 008e 0B44     		add	r3, r3, r1
 2859 0090 0433     		adds	r3, r3, #4
 2860 0092 BA68     		ldr	r2, [r7, #8]
 2861 0094 1A60     		str	r2, [r3]
1631:Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2862              		.loc 1 1631 43
 2863 0096 3969     		ldr	r1, [r7, #16]
 2864 0098 FA69     		ldr	r2, [r7, #28]
 2865 009a 1346     		mov	r3, r2
 2866 009c 5B00     		lsls	r3, r3, #1
 2867 009e 1344     		add	r3, r3, r2
 2868 00a0 DB00     		lsls	r3, r3, #3
 2869 00a2 0B44     		add	r3, r3, r1
 2870 00a4 2033     		adds	r3, r3, #32
 2871 00a6 7A68     		ldr	r2, [r7, #4]
 2872 00a8 1A60     		str	r2, [r3]
1632:Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2873              		.loc 1 1632 43
 2874 00aa 3969     		ldr	r1, [r7, #16]
 2875 00ac FA69     		ldr	r2, [r7, #28]
 2876 00ae 1346     		mov	r3, r2
 2877 00b0 5B00     		lsls	r3, r3, #1
 2878 00b2 1344     		add	r3, r3, r2
 2879 00b4 DB00     		lsls	r3, r3, #3
 2880 00b6 0B44     		add	r3, r3, r1
 2881 00b8 2833     		adds	r3, r3, #40
 2882 00ba 0022     		movs	r2, #0
 2883 00bc 1A60     		str	r2, [r3]
1633:Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2884              		.loc 1 1633 43
 2885 00be 3969     		ldr	r1, [r7, #16]
 2886 00c0 FA69     		ldr	r2, [r7, #28]
 2887 00c2 1346     		mov	r3, r2
 2888 00c4 5B00     		lsls	r3, r3, #1
 2889 00c6 1344     		add	r3, r3, r2
 2890 00c8 DB00     		lsls	r3, r3, #3
 2891 00ca 0B44     		add	r3, r3, r1
 2892 00cc 2433     		adds	r3, r3, #36
 2893 00ce 0022     		movs	r2, #0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 80


 2894 00d0 1A60     		str	r2, [r3]
1634:Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2895              		.loc 1 1634 43
 2896 00d2 3969     		ldr	r1, [r7, #16]
 2897 00d4 FA69     		ldr	r2, [r7, #28]
 2898 00d6 1346     		mov	r3, r2
 2899 00d8 5B00     		lsls	r3, r3, #1
 2900 00da 1344     		add	r3, r3, r2
 2901 00dc DB00     		lsls	r3, r3, #3
 2902 00de 0B44     		add	r3, r3, r1
 2903 00e0 2C33     		adds	r3, r3, #44
 2904 00e2 3A68     		ldr	r2, [r7]
 2905 00e4 1A60     		str	r2, [r3]
1635:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2906              		.loc 1 1635 5
 2907              		.syntax unified
 2908              	@ 1635 "Src/SEGGER_RTT.c" 1
 2909 00e6 BFF35F8F 		dmb
 2910              	
 2911              	@ 0 "" 2
 2912              		.thumb
 2913              		.syntax unified
 2914 00ea 02E0     		b	.L153
 2915              	.L152:
1636:Src/SEGGER_RTT.c ****   } else {
1637:Src/SEGGER_RTT.c ****     BufferIndex = -1;
 2916              		.loc 1 1637 17
 2917 00ec 4FF0FF33 		mov	r3, #-1
 2918 00f0 FB61     		str	r3, [r7, #28]
 2919              	.L153:
1638:Src/SEGGER_RTT.c ****   }
1639:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2920              		.loc 1 1639 3
 2921 00f2 7B69     		ldr	r3, [r7, #20]
 2922              		.syntax unified
 2923              	@ 1639 "Src/SEGGER_RTT.c" 1
 2924 00f4 83F31188 		msr   basepri, r3  
 2925              		
 2926              	@ 0 "" 2
 2927              		.thumb
 2928              		.syntax unified
 2929              	.LBE18:
1640:Src/SEGGER_RTT.c ****   return BufferIndex;
 2930              		.loc 1 1640 10
 2931 00f8 FB69     		ldr	r3, [r7, #28]
1641:Src/SEGGER_RTT.c **** }
 2932              		.loc 1 1641 1
 2933 00fa 1846     		mov	r0, r3
 2934 00fc 2037     		adds	r7, r7, #32
 2935              		.cfi_def_cfa_offset 8
 2936 00fe BD46     		mov	sp, r7
 2937              		.cfi_def_cfa_register 13
 2938              		@ sp needed
 2939 0100 80BD     		pop	{r7, pc}
 2940              	.L157:
 2941 0102 00BF     		.align	2
 2942              	.L156:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 81


 2943 0104 00000000 		.word	_SEGGER_RTT
 2944              		.cfi_endproc
 2945              	.LFE24:
 2947              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2948              		.align	1
 2949              		.global	SEGGER_RTT_ConfigUpBuffer
 2950              		.syntax unified
 2951              		.thumb
 2952              		.thumb_func
 2954              	SEGGER_RTT_ConfigUpBuffer:
 2955              	.LFB25:
1642:Src/SEGGER_RTT.c **** 
1643:Src/SEGGER_RTT.c **** /*********************************************************************
1644:Src/SEGGER_RTT.c **** *
1645:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1646:Src/SEGGER_RTT.c **** *
1647:Src/SEGGER_RTT.c **** *  Function description
1648:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1649:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1650:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1651:Src/SEGGER_RTT.c **** *
1652:Src/SEGGER_RTT.c **** *  Parameters
1653:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1654:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1655:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1656:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1657:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1658:Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1659:Src/SEGGER_RTT.c **** *
1660:Src/SEGGER_RTT.c **** *  Return value
1661:Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1662:Src/SEGGER_RTT.c **** *     < 0 - Error
1663:Src/SEGGER_RTT.c **** *
1664:Src/SEGGER_RTT.c **** *  Additional information
1665:Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1666:Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1667:Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1668:Src/SEGGER_RTT.c **** */
1669:Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2956              		.loc 1 1669 124
 2957              		.cfi_startproc
 2958              		@ args = 4, pretend = 0, frame = 40
 2959              		@ frame_needed = 1, uses_anonymous_args = 0
 2960 0000 80B5     		push	{r7, lr}
 2961              		.cfi_def_cfa_offset 8
 2962              		.cfi_offset 7, -8
 2963              		.cfi_offset 14, -4
 2964 0002 8AB0     		sub	sp, sp, #40
 2965              		.cfi_def_cfa_offset 48
 2966 0004 00AF     		add	r7, sp, #0
 2967              		.cfi_def_cfa_register 7
 2968 0006 F860     		str	r0, [r7, #12]
 2969 0008 B960     		str	r1, [r7, #8]
 2970 000a 7A60     		str	r2, [r7, #4]
 2971 000c 3B60     		str	r3, [r7]
 2972              	.LBB19:
1670:Src/SEGGER_RTT.c ****   int r;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 82


1671:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1672:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1673:Src/SEGGER_RTT.c **** 
1674:Src/SEGGER_RTT.c ****   INIT();
 2973              		.loc 1 1674 3
 2974 000e 204B     		ldr	r3, .L164
 2975 0010 3B62     		str	r3, [r7, #32]
 2976 0012 3B6A     		ldr	r3, [r7, #32]
 2977 0014 1B78     		ldrb	r3, [r3]
 2978 0016 DBB2     		uxtb	r3, r3
 2979 0018 002B     		cmp	r3, #0
 2980 001a 01D1     		bne	.L159
 2981              		.loc 1 1674 3 is_stmt 0 discriminator 1
 2982 001c FFF7FEFF 		bl	_DoInit
 2983              	.L159:
 2984              	.LBE19:
1675:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2985              		.loc 1 1675 10 is_stmt 1
 2986 0020 1B4B     		ldr	r3, .L164
 2987 0022 FB61     		str	r3, [r7, #28]
1676:Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2988              		.loc 1 1676 6
 2989 0024 FB68     		ldr	r3, [r7, #12]
 2990 0026 022B     		cmp	r3, #2
 2991 0028 2AD8     		bhi	.L160
 2992              	.LBB20:
1677:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2993              		.loc 1 1677 5
 2994              		.syntax unified
 2995              	@ 1677 "Src/SEGGER_RTT.c" 1
 2996 002a EFF31183 		mrs   r3, basepri  
 2997 002e 4FF02001 		mov   r1, #32       
 2998 0032 81F31188 		msr   basepri, r1  
 2999              		
 3000              	@ 0 "" 2
 3001              		.thumb
 3002              		.syntax unified
 3003 0036 BB61     		str	r3, [r7, #24]
1678:Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3004              		.loc 1 1678 9
 3005 0038 FB68     		ldr	r3, [r7, #12]
 3006 003a 5A1C     		adds	r2, r3, #1
 3007 003c 1346     		mov	r3, r2
 3008 003e 5B00     		lsls	r3, r3, #1
 3009 0040 1344     		add	r3, r3, r2
 3010 0042 DB00     		lsls	r3, r3, #3
 3011 0044 FA69     		ldr	r2, [r7, #28]
 3012 0046 1344     		add	r3, r3, r2
 3013 0048 7B61     		str	r3, [r7, #20]
1679:Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3014              		.loc 1 1679 8
 3015 004a FB68     		ldr	r3, [r7, #12]
 3016 004c 002B     		cmp	r3, #0
 3017 004e 0ED0     		beq	.L161
1680:Src/SEGGER_RTT.c ****       pUp->sName        = sName;
 3018              		.loc 1 1680 25
 3019 0050 7B69     		ldr	r3, [r7, #20]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 83


 3020 0052 BA68     		ldr	r2, [r7, #8]
 3021 0054 1A60     		str	r2, [r3]
1681:Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3022              		.loc 1 1681 25
 3023 0056 7B69     		ldr	r3, [r7, #20]
 3024 0058 7A68     		ldr	r2, [r7, #4]
 3025 005a 5A60     		str	r2, [r3, #4]
1682:Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3026              		.loc 1 1682 25
 3027 005c 7B69     		ldr	r3, [r7, #20]
 3028 005e 3A68     		ldr	r2, [r7]
 3029 0060 9A60     		str	r2, [r3, #8]
1683:Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3030              		.loc 1 1683 25
 3031 0062 7B69     		ldr	r3, [r7, #20]
 3032 0064 0022     		movs	r2, #0
 3033 0066 1A61     		str	r2, [r3, #16]
1684:Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3034              		.loc 1 1684 25
 3035 0068 7B69     		ldr	r3, [r7, #20]
 3036 006a 0022     		movs	r2, #0
 3037 006c DA60     		str	r2, [r3, #12]
 3038              	.L161:
1685:Src/SEGGER_RTT.c ****     }
1686:Src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 3039              		.loc 1 1686 25
 3040 006e 7B69     		ldr	r3, [r7, #20]
 3041 0070 3A6B     		ldr	r2, [r7, #48]
 3042 0072 5A61     		str	r2, [r3, #20]
1687:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3043              		.loc 1 1687 5
 3044 0074 BB69     		ldr	r3, [r7, #24]
 3045              		.syntax unified
 3046              	@ 1687 "Src/SEGGER_RTT.c" 1
 3047 0076 83F31188 		msr   basepri, r3  
 3048              		
 3049              	@ 0 "" 2
 3050              		.thumb
 3051              		.syntax unified
 3052              	.LBE20:
1688:Src/SEGGER_RTT.c ****     r =  0;
 3053              		.loc 1 1688 7
 3054 007a 0023     		movs	r3, #0
 3055 007c 7B62     		str	r3, [r7, #36]
 3056 007e 02E0     		b	.L162
 3057              	.L160:
1689:Src/SEGGER_RTT.c ****   } else {
1690:Src/SEGGER_RTT.c ****     r = -1;
 3058              		.loc 1 1690 7
 3059 0080 4FF0FF33 		mov	r3, #-1
 3060 0084 7B62     		str	r3, [r7, #36]
 3061              	.L162:
1691:Src/SEGGER_RTT.c ****   }
1692:Src/SEGGER_RTT.c ****   return r;
 3062              		.loc 1 1692 10
 3063 0086 7B6A     		ldr	r3, [r7, #36]
1693:Src/SEGGER_RTT.c **** }
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 84


 3064              		.loc 1 1693 1
 3065 0088 1846     		mov	r0, r3
 3066 008a 2837     		adds	r7, r7, #40
 3067              		.cfi_def_cfa_offset 8
 3068 008c BD46     		mov	sp, r7
 3069              		.cfi_def_cfa_register 13
 3070              		@ sp needed
 3071 008e 80BD     		pop	{r7, pc}
 3072              	.L165:
 3073              		.align	2
 3074              	.L164:
 3075 0090 00000000 		.word	_SEGGER_RTT
 3076              		.cfi_endproc
 3077              	.LFE25:
 3079              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 3080              		.align	1
 3081              		.global	SEGGER_RTT_ConfigDownBuffer
 3082              		.syntax unified
 3083              		.thumb
 3084              		.thumb_func
 3086              	SEGGER_RTT_ConfigDownBuffer:
 3087              	.LFB26:
1694:Src/SEGGER_RTT.c **** 
1695:Src/SEGGER_RTT.c **** /*********************************************************************
1696:Src/SEGGER_RTT.c **** *
1697:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1698:Src/SEGGER_RTT.c **** *
1699:Src/SEGGER_RTT.c **** *  Function description
1700:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1701:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1702:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1703:Src/SEGGER_RTT.c **** *
1704:Src/SEGGER_RTT.c **** *  Parameters
1705:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1706:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1707:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1708:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1709:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1710:Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1711:Src/SEGGER_RTT.c **** *
1712:Src/SEGGER_RTT.c **** *  Return value
1713:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1714:Src/SEGGER_RTT.c **** *     < 0  Error
1715:Src/SEGGER_RTT.c **** *
1716:Src/SEGGER_RTT.c **** *  Additional information
1717:Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1718:Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1719:Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1720:Src/SEGGER_RTT.c **** */
1721:Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 3088              		.loc 1 1721 126
 3089              		.cfi_startproc
 3090              		@ args = 4, pretend = 0, frame = 40
 3091              		@ frame_needed = 1, uses_anonymous_args = 0
 3092 0000 80B5     		push	{r7, lr}
 3093              		.cfi_def_cfa_offset 8
 3094              		.cfi_offset 7, -8
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 85


 3095              		.cfi_offset 14, -4
 3096 0002 8AB0     		sub	sp, sp, #40
 3097              		.cfi_def_cfa_offset 48
 3098 0004 00AF     		add	r7, sp, #0
 3099              		.cfi_def_cfa_register 7
 3100 0006 F860     		str	r0, [r7, #12]
 3101 0008 B960     		str	r1, [r7, #8]
 3102 000a 7A60     		str	r2, [r7, #4]
 3103 000c 3B60     		str	r3, [r7]
 3104              	.LBB21:
1722:Src/SEGGER_RTT.c ****   int r;
1723:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1724:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1725:Src/SEGGER_RTT.c **** 
1726:Src/SEGGER_RTT.c ****   INIT();
 3105              		.loc 1 1726 3
 3106 000e 214B     		ldr	r3, .L172
 3107 0010 3B62     		str	r3, [r7, #32]
 3108 0012 3B6A     		ldr	r3, [r7, #32]
 3109 0014 1B78     		ldrb	r3, [r3]
 3110 0016 DBB2     		uxtb	r3, r3
 3111 0018 002B     		cmp	r3, #0
 3112 001a 01D1     		bne	.L167
 3113              		.loc 1 1726 3 is_stmt 0 discriminator 1
 3114 001c FFF7FEFF 		bl	_DoInit
 3115              	.L167:
 3116              	.LBE21:
1727:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3117              		.loc 1 1727 10 is_stmt 1
 3118 0020 1C4B     		ldr	r3, .L172
 3119 0022 FB61     		str	r3, [r7, #28]
1728:Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3120              		.loc 1 1728 6
 3121 0024 FB68     		ldr	r3, [r7, #12]
 3122 0026 022B     		cmp	r3, #2
 3123 0028 2CD8     		bhi	.L168
 3124              	.LBB22:
1729:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3125              		.loc 1 1729 5
 3126              		.syntax unified
 3127              	@ 1729 "Src/SEGGER_RTT.c" 1
 3128 002a EFF31183 		mrs   r3, basepri  
 3129 002e 4FF02001 		mov   r1, #32       
 3130 0032 81F31188 		msr   basepri, r1  
 3131              		
 3132              	@ 0 "" 2
 3133              		.thumb
 3134              		.syntax unified
 3135 0036 BB61     		str	r3, [r7, #24]
1730:Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3136              		.loc 1 1730 11
 3137 0038 FA68     		ldr	r2, [r7, #12]
 3138 003a 1346     		mov	r3, r2
 3139 003c 5B00     		lsls	r3, r3, #1
 3140 003e 1344     		add	r3, r3, r2
 3141 0040 DB00     		lsls	r3, r3, #3
 3142 0042 6033     		adds	r3, r3, #96
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 86


 3143 0044 FA69     		ldr	r2, [r7, #28]
 3144 0046 1344     		add	r3, r3, r2
 3145 0048 7B61     		str	r3, [r7, #20]
1731:Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3146              		.loc 1 1731 8
 3147 004a FB68     		ldr	r3, [r7, #12]
 3148 004c 002B     		cmp	r3, #0
 3149 004e 0ED0     		beq	.L169
1732:Src/SEGGER_RTT.c ****       pDown->sName        = sName;
 3150              		.loc 1 1732 27
 3151 0050 7B69     		ldr	r3, [r7, #20]
 3152 0052 BA68     		ldr	r2, [r7, #8]
 3153 0054 1A60     		str	r2, [r3]
1733:Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3154              		.loc 1 1733 27
 3155 0056 7B69     		ldr	r3, [r7, #20]
 3156 0058 7A68     		ldr	r2, [r7, #4]
 3157 005a 5A60     		str	r2, [r3, #4]
1734:Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3158              		.loc 1 1734 27
 3159 005c 7B69     		ldr	r3, [r7, #20]
 3160 005e 3A68     		ldr	r2, [r7]
 3161 0060 9A60     		str	r2, [r3, #8]
1735:Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3162              		.loc 1 1735 27
 3163 0062 7B69     		ldr	r3, [r7, #20]
 3164 0064 0022     		movs	r2, #0
 3165 0066 1A61     		str	r2, [r3, #16]
1736:Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3166              		.loc 1 1736 27
 3167 0068 7B69     		ldr	r3, [r7, #20]
 3168 006a 0022     		movs	r2, #0
 3169 006c DA60     		str	r2, [r3, #12]
 3170              	.L169:
1737:Src/SEGGER_RTT.c ****     }
1738:Src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3171              		.loc 1 1738 27
 3172 006e 7B69     		ldr	r3, [r7, #20]
 3173 0070 3A6B     		ldr	r2, [r7, #48]
 3174 0072 5A61     		str	r2, [r3, #20]
1739:Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3175              		.loc 1 1739 5
 3176              		.syntax unified
 3177              	@ 1739 "Src/SEGGER_RTT.c" 1
 3178 0074 BFF35F8F 		dmb
 3179              	
 3180              	@ 0 "" 2
1740:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3181              		.loc 1 1740 5
 3182              		.thumb
 3183              		.syntax unified
 3184 0078 BB69     		ldr	r3, [r7, #24]
 3185              		.syntax unified
 3186              	@ 1740 "Src/SEGGER_RTT.c" 1
 3187 007a 83F31188 		msr   basepri, r3  
 3188              		
 3189              	@ 0 "" 2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 87


 3190              		.thumb
 3191              		.syntax unified
 3192              	.LBE22:
1741:Src/SEGGER_RTT.c ****     r =  0;
 3193              		.loc 1 1741 7
 3194 007e 0023     		movs	r3, #0
 3195 0080 7B62     		str	r3, [r7, #36]
 3196 0082 02E0     		b	.L170
 3197              	.L168:
1742:Src/SEGGER_RTT.c ****   } else {
1743:Src/SEGGER_RTT.c ****     r = -1;
 3198              		.loc 1 1743 7
 3199 0084 4FF0FF33 		mov	r3, #-1
 3200 0088 7B62     		str	r3, [r7, #36]
 3201              	.L170:
1744:Src/SEGGER_RTT.c ****   }
1745:Src/SEGGER_RTT.c ****   return r;
 3202              		.loc 1 1745 10
 3203 008a 7B6A     		ldr	r3, [r7, #36]
1746:Src/SEGGER_RTT.c **** }
 3204              		.loc 1 1746 1
 3205 008c 1846     		mov	r0, r3
 3206 008e 2837     		adds	r7, r7, #40
 3207              		.cfi_def_cfa_offset 8
 3208 0090 BD46     		mov	sp, r7
 3209              		.cfi_def_cfa_register 13
 3210              		@ sp needed
 3211 0092 80BD     		pop	{r7, pc}
 3212              	.L173:
 3213              		.align	2
 3214              	.L172:
 3215 0094 00000000 		.word	_SEGGER_RTT
 3216              		.cfi_endproc
 3217              	.LFE26:
 3219              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3220              		.align	1
 3221              		.global	SEGGER_RTT_SetNameUpBuffer
 3222              		.syntax unified
 3223              		.thumb
 3224              		.thumb_func
 3226              	SEGGER_RTT_SetNameUpBuffer:
 3227              	.LFB27:
1747:Src/SEGGER_RTT.c **** 
1748:Src/SEGGER_RTT.c **** /*********************************************************************
1749:Src/SEGGER_RTT.c **** *
1750:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1751:Src/SEGGER_RTT.c **** *
1752:Src/SEGGER_RTT.c **** *  Function description
1753:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1754:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1755:Src/SEGGER_RTT.c **** *
1756:Src/SEGGER_RTT.c **** *  Parameters
1757:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1758:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1759:Src/SEGGER_RTT.c **** *
1760:Src/SEGGER_RTT.c **** *  Return value
1761:Src/SEGGER_RTT.c **** *    >= 0  O.K.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 88


1762:Src/SEGGER_RTT.c **** *     < 0  Error
1763:Src/SEGGER_RTT.c **** */
1764:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3228              		.loc 1 1764 73
 3229              		.cfi_startproc
 3230              		@ args = 0, pretend = 0, frame = 32
 3231              		@ frame_needed = 1, uses_anonymous_args = 0
 3232 0000 80B5     		push	{r7, lr}
 3233              		.cfi_def_cfa_offset 8
 3234              		.cfi_offset 7, -8
 3235              		.cfi_offset 14, -4
 3236 0002 88B0     		sub	sp, sp, #32
 3237              		.cfi_def_cfa_offset 40
 3238 0004 00AF     		add	r7, sp, #0
 3239              		.cfi_def_cfa_register 7
 3240 0006 7860     		str	r0, [r7, #4]
 3241 0008 3960     		str	r1, [r7]
 3242              	.LBB23:
1765:Src/SEGGER_RTT.c ****   int r;
1766:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1767:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1768:Src/SEGGER_RTT.c **** 
1769:Src/SEGGER_RTT.c ****   INIT();
 3243              		.loc 1 1769 3
 3244 000a 174B     		ldr	r3, .L179
 3245 000c BB61     		str	r3, [r7, #24]
 3246 000e BB69     		ldr	r3, [r7, #24]
 3247 0010 1B78     		ldrb	r3, [r3]
 3248 0012 DBB2     		uxtb	r3, r3
 3249 0014 002B     		cmp	r3, #0
 3250 0016 01D1     		bne	.L175
 3251              		.loc 1 1769 3 is_stmt 0 discriminator 1
 3252 0018 FFF7FEFF 		bl	_DoInit
 3253              	.L175:
 3254              	.LBE23:
1770:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3255              		.loc 1 1770 10 is_stmt 1
 3256 001c 124B     		ldr	r3, .L179
 3257 001e 7B61     		str	r3, [r7, #20]
1771:Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3258              		.loc 1 1771 6
 3259 0020 7B68     		ldr	r3, [r7, #4]
 3260 0022 022B     		cmp	r3, #2
 3261 0024 18D8     		bhi	.L176
 3262              	.LBB24:
1772:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3263              		.loc 1 1772 5
 3264              		.syntax unified
 3265              	@ 1772 "Src/SEGGER_RTT.c" 1
 3266 0026 EFF31183 		mrs   r3, basepri  
 3267 002a 4FF02001 		mov   r1, #32       
 3268 002e 81F31188 		msr   basepri, r1  
 3269              		
 3270              	@ 0 "" 2
 3271              		.thumb
 3272              		.syntax unified
 3273 0032 3B61     		str	r3, [r7, #16]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 89


1773:Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3274              		.loc 1 1773 9
 3275 0034 7B68     		ldr	r3, [r7, #4]
 3276 0036 5A1C     		adds	r2, r3, #1
 3277 0038 1346     		mov	r3, r2
 3278 003a 5B00     		lsls	r3, r3, #1
 3279 003c 1344     		add	r3, r3, r2
 3280 003e DB00     		lsls	r3, r3, #3
 3281 0040 7A69     		ldr	r2, [r7, #20]
 3282 0042 1344     		add	r3, r3, r2
 3283 0044 FB60     		str	r3, [r7, #12]
1774:Src/SEGGER_RTT.c ****     pUp->sName = sName;
 3284              		.loc 1 1774 16
 3285 0046 FB68     		ldr	r3, [r7, #12]
 3286 0048 3A68     		ldr	r2, [r7]
 3287 004a 1A60     		str	r2, [r3]
1775:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3288              		.loc 1 1775 5
 3289 004c 3B69     		ldr	r3, [r7, #16]
 3290              		.syntax unified
 3291              	@ 1775 "Src/SEGGER_RTT.c" 1
 3292 004e 83F31188 		msr   basepri, r3  
 3293              		
 3294              	@ 0 "" 2
 3295              		.thumb
 3296              		.syntax unified
 3297              	.LBE24:
1776:Src/SEGGER_RTT.c ****     r =  0;
 3298              		.loc 1 1776 7
 3299 0052 0023     		movs	r3, #0
 3300 0054 FB61     		str	r3, [r7, #28]
 3301 0056 02E0     		b	.L177
 3302              	.L176:
1777:Src/SEGGER_RTT.c ****   } else {
1778:Src/SEGGER_RTT.c ****     r = -1;
 3303              		.loc 1 1778 7
 3304 0058 4FF0FF33 		mov	r3, #-1
 3305 005c FB61     		str	r3, [r7, #28]
 3306              	.L177:
1779:Src/SEGGER_RTT.c ****   }
1780:Src/SEGGER_RTT.c ****   return r;
 3307              		.loc 1 1780 10
 3308 005e FB69     		ldr	r3, [r7, #28]
1781:Src/SEGGER_RTT.c **** }
 3309              		.loc 1 1781 1
 3310 0060 1846     		mov	r0, r3
 3311 0062 2037     		adds	r7, r7, #32
 3312              		.cfi_def_cfa_offset 8
 3313 0064 BD46     		mov	sp, r7
 3314              		.cfi_def_cfa_register 13
 3315              		@ sp needed
 3316 0066 80BD     		pop	{r7, pc}
 3317              	.L180:
 3318              		.align	2
 3319              	.L179:
 3320 0068 00000000 		.word	_SEGGER_RTT
 3321              		.cfi_endproc
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 90


 3322              	.LFE27:
 3324              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3325              		.align	1
 3326              		.global	SEGGER_RTT_SetNameDownBuffer
 3327              		.syntax unified
 3328              		.thumb
 3329              		.thumb_func
 3331              	SEGGER_RTT_SetNameDownBuffer:
 3332              	.LFB28:
1782:Src/SEGGER_RTT.c **** 
1783:Src/SEGGER_RTT.c **** /*********************************************************************
1784:Src/SEGGER_RTT.c **** *
1785:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1786:Src/SEGGER_RTT.c **** *
1787:Src/SEGGER_RTT.c **** *  Function description
1788:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1789:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1790:Src/SEGGER_RTT.c **** *
1791:Src/SEGGER_RTT.c **** *  Parameters
1792:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1793:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1794:Src/SEGGER_RTT.c **** *
1795:Src/SEGGER_RTT.c **** *  Return value
1796:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1797:Src/SEGGER_RTT.c **** *     < 0  Error
1798:Src/SEGGER_RTT.c **** */
1799:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3333              		.loc 1 1799 75
 3334              		.cfi_startproc
 3335              		@ args = 0, pretend = 0, frame = 32
 3336              		@ frame_needed = 1, uses_anonymous_args = 0
 3337 0000 80B5     		push	{r7, lr}
 3338              		.cfi_def_cfa_offset 8
 3339              		.cfi_offset 7, -8
 3340              		.cfi_offset 14, -4
 3341 0002 88B0     		sub	sp, sp, #32
 3342              		.cfi_def_cfa_offset 40
 3343 0004 00AF     		add	r7, sp, #0
 3344              		.cfi_def_cfa_register 7
 3345 0006 7860     		str	r0, [r7, #4]
 3346 0008 3960     		str	r1, [r7]
 3347              	.LBB25:
1800:Src/SEGGER_RTT.c ****   int r;
1801:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1802:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1803:Src/SEGGER_RTT.c **** 
1804:Src/SEGGER_RTT.c ****   INIT();
 3348              		.loc 1 1804 3
 3349 000a 174B     		ldr	r3, .L186
 3350 000c BB61     		str	r3, [r7, #24]
 3351 000e BB69     		ldr	r3, [r7, #24]
 3352 0010 1B78     		ldrb	r3, [r3]
 3353 0012 DBB2     		uxtb	r3, r3
 3354 0014 002B     		cmp	r3, #0
 3355 0016 01D1     		bne	.L182
 3356              		.loc 1 1804 3 is_stmt 0 discriminator 1
 3357 0018 FFF7FEFF 		bl	_DoInit
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 91


 3358              	.L182:
 3359              	.LBE25:
1805:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3360              		.loc 1 1805 10 is_stmt 1
 3361 001c 124B     		ldr	r3, .L186
 3362 001e 7B61     		str	r3, [r7, #20]
1806:Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3363              		.loc 1 1806 6
 3364 0020 7B68     		ldr	r3, [r7, #4]
 3365 0022 022B     		cmp	r3, #2
 3366 0024 18D8     		bhi	.L183
 3367              	.LBB26:
1807:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3368              		.loc 1 1807 5
 3369              		.syntax unified
 3370              	@ 1807 "Src/SEGGER_RTT.c" 1
 3371 0026 EFF31183 		mrs   r3, basepri  
 3372 002a 4FF02001 		mov   r1, #32       
 3373 002e 81F31188 		msr   basepri, r1  
 3374              		
 3375              	@ 0 "" 2
 3376              		.thumb
 3377              		.syntax unified
 3378 0032 3B61     		str	r3, [r7, #16]
1808:Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3379              		.loc 1 1808 11
 3380 0034 7A68     		ldr	r2, [r7, #4]
 3381 0036 1346     		mov	r3, r2
 3382 0038 5B00     		lsls	r3, r3, #1
 3383 003a 1344     		add	r3, r3, r2
 3384 003c DB00     		lsls	r3, r3, #3
 3385 003e 6033     		adds	r3, r3, #96
 3386 0040 7A69     		ldr	r2, [r7, #20]
 3387 0042 1344     		add	r3, r3, r2
 3388 0044 FB60     		str	r3, [r7, #12]
1809:Src/SEGGER_RTT.c ****     pDown->sName = sName;
 3389              		.loc 1 1809 18
 3390 0046 FB68     		ldr	r3, [r7, #12]
 3391 0048 3A68     		ldr	r2, [r7]
 3392 004a 1A60     		str	r2, [r3]
1810:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3393              		.loc 1 1810 5
 3394 004c 3B69     		ldr	r3, [r7, #16]
 3395              		.syntax unified
 3396              	@ 1810 "Src/SEGGER_RTT.c" 1
 3397 004e 83F31188 		msr   basepri, r3  
 3398              		
 3399              	@ 0 "" 2
 3400              		.thumb
 3401              		.syntax unified
 3402              	.LBE26:
1811:Src/SEGGER_RTT.c ****     r =  0;
 3403              		.loc 1 1811 7
 3404 0052 0023     		movs	r3, #0
 3405 0054 FB61     		str	r3, [r7, #28]
 3406 0056 02E0     		b	.L184
 3407              	.L183:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 92


1812:Src/SEGGER_RTT.c ****   } else {
1813:Src/SEGGER_RTT.c ****     r = -1;
 3408              		.loc 1 1813 7
 3409 0058 4FF0FF33 		mov	r3, #-1
 3410 005c FB61     		str	r3, [r7, #28]
 3411              	.L184:
1814:Src/SEGGER_RTT.c ****   }
1815:Src/SEGGER_RTT.c ****   return r;
 3412              		.loc 1 1815 10
 3413 005e FB69     		ldr	r3, [r7, #28]
1816:Src/SEGGER_RTT.c **** }
 3414              		.loc 1 1816 1
 3415 0060 1846     		mov	r0, r3
 3416 0062 2037     		adds	r7, r7, #32
 3417              		.cfi_def_cfa_offset 8
 3418 0064 BD46     		mov	sp, r7
 3419              		.cfi_def_cfa_register 13
 3420              		@ sp needed
 3421 0066 80BD     		pop	{r7, pc}
 3422              	.L187:
 3423              		.align	2
 3424              	.L186:
 3425 0068 00000000 		.word	_SEGGER_RTT
 3426              		.cfi_endproc
 3427              	.LFE28:
 3429              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3430              		.align	1
 3431              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3432              		.syntax unified
 3433              		.thumb
 3434              		.thumb_func
 3436              	SEGGER_RTT_SetFlagsUpBuffer:
 3437              	.LFB29:
1817:Src/SEGGER_RTT.c **** 
1818:Src/SEGGER_RTT.c **** /*********************************************************************
1819:Src/SEGGER_RTT.c **** *
1820:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1821:Src/SEGGER_RTT.c **** *
1822:Src/SEGGER_RTT.c **** *  Function description
1823:Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1824:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1825:Src/SEGGER_RTT.c **** *
1826:Src/SEGGER_RTT.c **** *  Parameters
1827:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1828:Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1829:Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1830:Src/SEGGER_RTT.c **** *
1831:Src/SEGGER_RTT.c **** *  Return value
1832:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1833:Src/SEGGER_RTT.c **** *     < 0  Error
1834:Src/SEGGER_RTT.c **** */
1835:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3438              		.loc 1 1835 71
 3439              		.cfi_startproc
 3440              		@ args = 0, pretend = 0, frame = 32
 3441              		@ frame_needed = 1, uses_anonymous_args = 0
 3442 0000 80B5     		push	{r7, lr}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 93


 3443              		.cfi_def_cfa_offset 8
 3444              		.cfi_offset 7, -8
 3445              		.cfi_offset 14, -4
 3446 0002 88B0     		sub	sp, sp, #32
 3447              		.cfi_def_cfa_offset 40
 3448 0004 00AF     		add	r7, sp, #0
 3449              		.cfi_def_cfa_register 7
 3450 0006 7860     		str	r0, [r7, #4]
 3451 0008 3960     		str	r1, [r7]
 3452              	.LBB27:
1836:Src/SEGGER_RTT.c ****   int r;
1837:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1838:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1839:Src/SEGGER_RTT.c **** 
1840:Src/SEGGER_RTT.c ****   INIT();
 3453              		.loc 1 1840 3
 3454 000a 174B     		ldr	r3, .L193
 3455 000c BB61     		str	r3, [r7, #24]
 3456 000e BB69     		ldr	r3, [r7, #24]
 3457 0010 1B78     		ldrb	r3, [r3]
 3458 0012 DBB2     		uxtb	r3, r3
 3459 0014 002B     		cmp	r3, #0
 3460 0016 01D1     		bne	.L189
 3461              		.loc 1 1840 3 is_stmt 0 discriminator 1
 3462 0018 FFF7FEFF 		bl	_DoInit
 3463              	.L189:
 3464              	.LBE27:
1841:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3465              		.loc 1 1841 10 is_stmt 1
 3466 001c 124B     		ldr	r3, .L193
 3467 001e 7B61     		str	r3, [r7, #20]
1842:Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3468              		.loc 1 1842 6
 3469 0020 7B68     		ldr	r3, [r7, #4]
 3470 0022 022B     		cmp	r3, #2
 3471 0024 18D8     		bhi	.L190
 3472              	.LBB28:
1843:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3473              		.loc 1 1843 5
 3474              		.syntax unified
 3475              	@ 1843 "Src/SEGGER_RTT.c" 1
 3476 0026 EFF31183 		mrs   r3, basepri  
 3477 002a 4FF02001 		mov   r1, #32       
 3478 002e 81F31188 		msr   basepri, r1  
 3479              		
 3480              	@ 0 "" 2
 3481              		.thumb
 3482              		.syntax unified
 3483 0032 3B61     		str	r3, [r7, #16]
1844:Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3484              		.loc 1 1844 9
 3485 0034 7B68     		ldr	r3, [r7, #4]
 3486 0036 5A1C     		adds	r2, r3, #1
 3487 0038 1346     		mov	r3, r2
 3488 003a 5B00     		lsls	r3, r3, #1
 3489 003c 1344     		add	r3, r3, r2
 3490 003e DB00     		lsls	r3, r3, #3
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 94


 3491 0040 7A69     		ldr	r2, [r7, #20]
 3492 0042 1344     		add	r3, r3, r2
 3493 0044 FB60     		str	r3, [r7, #12]
1845:Src/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3494              		.loc 1 1845 16
 3495 0046 FB68     		ldr	r3, [r7, #12]
 3496 0048 3A68     		ldr	r2, [r7]
 3497 004a 5A61     		str	r2, [r3, #20]
1846:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3498              		.loc 1 1846 5
 3499 004c 3B69     		ldr	r3, [r7, #16]
 3500              		.syntax unified
 3501              	@ 1846 "Src/SEGGER_RTT.c" 1
 3502 004e 83F31188 		msr   basepri, r3  
 3503              		
 3504              	@ 0 "" 2
 3505              		.thumb
 3506              		.syntax unified
 3507              	.LBE28:
1847:Src/SEGGER_RTT.c ****     r =  0;
 3508              		.loc 1 1847 7
 3509 0052 0023     		movs	r3, #0
 3510 0054 FB61     		str	r3, [r7, #28]
 3511 0056 02E0     		b	.L191
 3512              	.L190:
1848:Src/SEGGER_RTT.c ****   } else {
1849:Src/SEGGER_RTT.c ****     r = -1;
 3513              		.loc 1 1849 7
 3514 0058 4FF0FF33 		mov	r3, #-1
 3515 005c FB61     		str	r3, [r7, #28]
 3516              	.L191:
1850:Src/SEGGER_RTT.c ****   }
1851:Src/SEGGER_RTT.c ****   return r;
 3517              		.loc 1 1851 10
 3518 005e FB69     		ldr	r3, [r7, #28]
1852:Src/SEGGER_RTT.c **** }
 3519              		.loc 1 1852 1
 3520 0060 1846     		mov	r0, r3
 3521 0062 2037     		adds	r7, r7, #32
 3522              		.cfi_def_cfa_offset 8
 3523 0064 BD46     		mov	sp, r7
 3524              		.cfi_def_cfa_register 13
 3525              		@ sp needed
 3526 0066 80BD     		pop	{r7, pc}
 3527              	.L194:
 3528              		.align	2
 3529              	.L193:
 3530 0068 00000000 		.word	_SEGGER_RTT
 3531              		.cfi_endproc
 3532              	.LFE29:
 3534              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3535              		.align	1
 3536              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3537              		.syntax unified
 3538              		.thumb
 3539              		.thumb_func
 3541              	SEGGER_RTT_SetFlagsDownBuffer:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 95


 3542              	.LFB30:
1853:Src/SEGGER_RTT.c **** 
1854:Src/SEGGER_RTT.c **** /*********************************************************************
1855:Src/SEGGER_RTT.c **** *
1856:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1857:Src/SEGGER_RTT.c **** *
1858:Src/SEGGER_RTT.c **** *  Function description
1859:Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1860:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1861:Src/SEGGER_RTT.c **** *
1862:Src/SEGGER_RTT.c **** *  Parameters
1863:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1864:Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1865:Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1866:Src/SEGGER_RTT.c **** *
1867:Src/SEGGER_RTT.c **** *  Return value
1868:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1869:Src/SEGGER_RTT.c **** *     < 0  Error
1870:Src/SEGGER_RTT.c **** */
1871:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3543              		.loc 1 1871 73
 3544              		.cfi_startproc
 3545              		@ args = 0, pretend = 0, frame = 32
 3546              		@ frame_needed = 1, uses_anonymous_args = 0
 3547 0000 80B5     		push	{r7, lr}
 3548              		.cfi_def_cfa_offset 8
 3549              		.cfi_offset 7, -8
 3550              		.cfi_offset 14, -4
 3551 0002 88B0     		sub	sp, sp, #32
 3552              		.cfi_def_cfa_offset 40
 3553 0004 00AF     		add	r7, sp, #0
 3554              		.cfi_def_cfa_register 7
 3555 0006 7860     		str	r0, [r7, #4]
 3556 0008 3960     		str	r1, [r7]
 3557              	.LBB29:
1872:Src/SEGGER_RTT.c ****   int r;
1873:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1874:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1875:Src/SEGGER_RTT.c **** 
1876:Src/SEGGER_RTT.c ****   INIT();
 3558              		.loc 1 1876 3
 3559 000a 174B     		ldr	r3, .L200
 3560 000c BB61     		str	r3, [r7, #24]
 3561 000e BB69     		ldr	r3, [r7, #24]
 3562 0010 1B78     		ldrb	r3, [r3]
 3563 0012 DBB2     		uxtb	r3, r3
 3564 0014 002B     		cmp	r3, #0
 3565 0016 01D1     		bne	.L196
 3566              		.loc 1 1876 3 is_stmt 0 discriminator 1
 3567 0018 FFF7FEFF 		bl	_DoInit
 3568              	.L196:
 3569              	.LBE29:
1877:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3570              		.loc 1 1877 10 is_stmt 1
 3571 001c 124B     		ldr	r3, .L200
 3572 001e 7B61     		str	r3, [r7, #20]
1878:Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 96


 3573              		.loc 1 1878 6
 3574 0020 7B68     		ldr	r3, [r7, #4]
 3575 0022 022B     		cmp	r3, #2
 3576 0024 18D8     		bhi	.L197
 3577              	.LBB30:
1879:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3578              		.loc 1 1879 5
 3579              		.syntax unified
 3580              	@ 1879 "Src/SEGGER_RTT.c" 1
 3581 0026 EFF31183 		mrs   r3, basepri  
 3582 002a 4FF02001 		mov   r1, #32       
 3583 002e 81F31188 		msr   basepri, r1  
 3584              		
 3585              	@ 0 "" 2
 3586              		.thumb
 3587              		.syntax unified
 3588 0032 3B61     		str	r3, [r7, #16]
1880:Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3589              		.loc 1 1880 11
 3590 0034 7A68     		ldr	r2, [r7, #4]
 3591 0036 1346     		mov	r3, r2
 3592 0038 5B00     		lsls	r3, r3, #1
 3593 003a 1344     		add	r3, r3, r2
 3594 003c DB00     		lsls	r3, r3, #3
 3595 003e 6033     		adds	r3, r3, #96
 3596 0040 7A69     		ldr	r2, [r7, #20]
 3597 0042 1344     		add	r3, r3, r2
 3598 0044 FB60     		str	r3, [r7, #12]
1881:Src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3599              		.loc 1 1881 18
 3600 0046 FB68     		ldr	r3, [r7, #12]
 3601 0048 3A68     		ldr	r2, [r7]
 3602 004a 5A61     		str	r2, [r3, #20]
1882:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3603              		.loc 1 1882 5
 3604 004c 3B69     		ldr	r3, [r7, #16]
 3605              		.syntax unified
 3606              	@ 1882 "Src/SEGGER_RTT.c" 1
 3607 004e 83F31188 		msr   basepri, r3  
 3608              		
 3609              	@ 0 "" 2
 3610              		.thumb
 3611              		.syntax unified
 3612              	.LBE30:
1883:Src/SEGGER_RTT.c ****     r =  0;
 3613              		.loc 1 1883 7
 3614 0052 0023     		movs	r3, #0
 3615 0054 FB61     		str	r3, [r7, #28]
 3616 0056 02E0     		b	.L198
 3617              	.L197:
1884:Src/SEGGER_RTT.c ****   } else {
1885:Src/SEGGER_RTT.c ****     r = -1;
 3618              		.loc 1 1885 7
 3619 0058 4FF0FF33 		mov	r3, #-1
 3620 005c FB61     		str	r3, [r7, #28]
 3621              	.L198:
1886:Src/SEGGER_RTT.c ****   }
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 97


1887:Src/SEGGER_RTT.c ****   return r;
 3622              		.loc 1 1887 10
 3623 005e FB69     		ldr	r3, [r7, #28]
1888:Src/SEGGER_RTT.c **** }
 3624              		.loc 1 1888 1
 3625 0060 1846     		mov	r0, r3
 3626 0062 2037     		adds	r7, r7, #32
 3627              		.cfi_def_cfa_offset 8
 3628 0064 BD46     		mov	sp, r7
 3629              		.cfi_def_cfa_register 13
 3630              		@ sp needed
 3631 0066 80BD     		pop	{r7, pc}
 3632              	.L201:
 3633              		.align	2
 3634              	.L200:
 3635 0068 00000000 		.word	_SEGGER_RTT
 3636              		.cfi_endproc
 3637              	.LFE30:
 3639              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3640              		.align	1
 3641              		.global	SEGGER_RTT_Init
 3642              		.syntax unified
 3643              		.thumb
 3644              		.thumb_func
 3646              	SEGGER_RTT_Init:
 3647              	.LFB31:
1889:Src/SEGGER_RTT.c **** 
1890:Src/SEGGER_RTT.c **** /*********************************************************************
1891:Src/SEGGER_RTT.c **** *
1892:Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1893:Src/SEGGER_RTT.c **** *
1894:Src/SEGGER_RTT.c **** *  Function description
1895:Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1896:Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1897:Src/SEGGER_RTT.c **** *
1898:Src/SEGGER_RTT.c **** */
1899:Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3648              		.loc 1 1899 29
 3649              		.cfi_startproc
 3650              		@ args = 0, pretend = 0, frame = 0
 3651              		@ frame_needed = 1, uses_anonymous_args = 0
 3652 0000 80B5     		push	{r7, lr}
 3653              		.cfi_def_cfa_offset 8
 3654              		.cfi_offset 7, -8
 3655              		.cfi_offset 14, -4
 3656 0002 00AF     		add	r7, sp, #0
 3657              		.cfi_def_cfa_register 7
1900:Src/SEGGER_RTT.c ****   _DoInit();
 3658              		.loc 1 1900 3
 3659 0004 FFF7FEFF 		bl	_DoInit
1901:Src/SEGGER_RTT.c **** }
 3660              		.loc 1 1901 1
 3661 0008 00BF     		nop
 3662 000a 80BD     		pop	{r7, pc}
 3663              		.cfi_endproc
 3664              	.LFE31:
 3666              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 98


 3667              		.align	1
 3668              		.global	SEGGER_RTT_SetTerminal
 3669              		.syntax unified
 3670              		.thumb
 3671              		.thumb_func
 3673              	SEGGER_RTT_SetTerminal:
 3674              	.LFB32:
1902:Src/SEGGER_RTT.c **** 
1903:Src/SEGGER_RTT.c **** /*********************************************************************
1904:Src/SEGGER_RTT.c **** *
1905:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1906:Src/SEGGER_RTT.c **** *
1907:Src/SEGGER_RTT.c **** *  Function description
1908:Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1909:Src/SEGGER_RTT.c **** *
1910:Src/SEGGER_RTT.c **** *  Parameters
1911:Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1912:Src/SEGGER_RTT.c **** *
1913:Src/SEGGER_RTT.c **** *  Return value
1914:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1915:Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1916:Src/SEGGER_RTT.c **** *
1917:Src/SEGGER_RTT.c **** *  Notes
1918:Src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1919:Src/SEGGER_RTT.c **** */
1920:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3675              		.loc 1 1920 55
 3676              		.cfi_startproc
 3677              		@ args = 0, pretend = 0, frame = 32
 3678              		@ frame_needed = 1, uses_anonymous_args = 0
 3679 0000 80B5     		push	{r7, lr}
 3680              		.cfi_def_cfa_offset 8
 3681              		.cfi_offset 7, -8
 3682              		.cfi_offset 14, -4
 3683 0002 88B0     		sub	sp, sp, #32
 3684              		.cfi_def_cfa_offset 40
 3685 0004 00AF     		add	r7, sp, #0
 3686              		.cfi_def_cfa_register 7
 3687 0006 0346     		mov	r3, r0
 3688 0008 FB71     		strb	r3, [r7, #7]
 3689              	.LBB31:
1921:Src/SEGGER_RTT.c ****   unsigned char         ac[2];
1922:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1923:Src/SEGGER_RTT.c ****   unsigned Avail;
1924:Src/SEGGER_RTT.c ****   int r;
1925:Src/SEGGER_RTT.c **** 
1926:Src/SEGGER_RTT.c ****   INIT();
 3690              		.loc 1 1926 3
 3691 000a 274B     		ldr	r3, .L211
 3692 000c BB61     		str	r3, [r7, #24]
 3693 000e BB69     		ldr	r3, [r7, #24]
 3694 0010 1B78     		ldrb	r3, [r3]
 3695 0012 DBB2     		uxtb	r3, r3
 3696 0014 002B     		cmp	r3, #0
 3697 0016 01D1     		bne	.L204
 3698              		.loc 1 1926 3 is_stmt 0 discriminator 1
 3699 0018 FFF7FEFF 		bl	_DoInit
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 99


 3700              	.L204:
 3701              	.LBE31:
1927:Src/SEGGER_RTT.c ****   r = 0;
 3702              		.loc 1 1927 5 is_stmt 1
 3703 001c 0023     		movs	r3, #0
 3704 001e FB61     		str	r3, [r7, #28]
1928:Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3705              		.loc 1 1928 9
 3706 0020 FF23     		movs	r3, #255
 3707 0022 3B72     		strb	r3, [r7, #8]
1929:Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3708              		.loc 1 1929 6
 3709 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3710 0026 0F2B     		cmp	r3, #15
 3711 0028 36D8     		bhi	.L205
1930:Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3712              		.loc 1 1930 25
 3713 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3714 002c 1F4A     		ldr	r2, .L211+4
 3715 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3716              		.loc 1 1930 11
 3717 0030 7B72     		strb	r3, [r7, #9]
1931:Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3718              		.loc 1 1931 11
 3719 0032 1F4B     		ldr	r3, .L211+8
 3720 0034 7B61     		str	r3, [r7, #20]
 3721              	.LBB32:
1932:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3722              		.loc 1 1932 5
 3723              		.syntax unified
 3724              	@ 1932 "Src/SEGGER_RTT.c" 1
 3725 0036 EFF31183 		mrs   r3, basepri  
 3726 003a 4FF02001 		mov   r1, #32       
 3727 003e 81F31188 		msr   basepri, r1  
 3728              		
 3729              	@ 0 "" 2
 3730              		.thumb
 3731              		.syntax unified
 3732 0042 3B61     		str	r3, [r7, #16]
1933:Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3733              		.loc 1 1933 15
 3734 0044 7B69     		ldr	r3, [r7, #20]
 3735 0046 5B69     		ldr	r3, [r3, #20]
 3736              		.loc 1 1933 23
 3737 0048 03F00303 		and	r3, r3, #3
 3738              		.loc 1 1933 8
 3739 004c 022B     		cmp	r3, #2
 3740 004e 0AD1     		bne	.L206
1934:Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
 3741              		.loc 1 1934 23
 3742 0050 184A     		ldr	r2, .L211+12
 3743 0052 FB79     		ldrb	r3, [r7, #7]
 3744 0054 1370     		strb	r3, [r2]
1935:Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3745              		.loc 1 1935 7
 3746 0056 07F10803 		add	r3, r7, #8
 3747 005a 0222     		movs	r2, #2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 100


 3748 005c 1946     		mov	r1, r3
 3749 005e 7869     		ldr	r0, [r7, #20]
 3750 0060 FFF7FEFF 		bl	_WriteBlocking
 3751 0064 14E0     		b	.L207
 3752              	.L206:
1936:Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1937:Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3753              		.loc 1 1937 15
 3754 0066 7869     		ldr	r0, [r7, #20]
 3755 0068 FFF7FEFF 		bl	_GetAvailWriteSpace
 3756 006c F860     		str	r0, [r7, #12]
1938:Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3757              		.loc 1 1938 10
 3758 006e FB68     		ldr	r3, [r7, #12]
 3759 0070 012B     		cmp	r3, #1
 3760 0072 0AD9     		bls	.L208
1939:Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
 3761              		.loc 1 1939 25
 3762 0074 0F4A     		ldr	r2, .L211+12
 3763 0076 FB79     		ldrb	r3, [r7, #7]
 3764 0078 1370     		strb	r3, [r2]
1940:Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3765              		.loc 1 1940 9
 3766 007a 07F10803 		add	r3, r7, #8
 3767 007e 0222     		movs	r2, #2
 3768 0080 1946     		mov	r1, r3
 3769 0082 7869     		ldr	r0, [r7, #20]
 3770 0084 FFF7FEFF 		bl	_WriteNoCheck
 3771 0088 02E0     		b	.L207
 3772              	.L208:
1941:Src/SEGGER_RTT.c ****       } else {
1942:Src/SEGGER_RTT.c ****         r = -1;
 3773              		.loc 1 1942 11
 3774 008a 4FF0FF33 		mov	r3, #-1
 3775 008e FB61     		str	r3, [r7, #28]
 3776              	.L207:
1943:Src/SEGGER_RTT.c ****       }
1944:Src/SEGGER_RTT.c ****     }
1945:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3777              		.loc 1 1945 5
 3778 0090 3B69     		ldr	r3, [r7, #16]
 3779              		.syntax unified
 3780              	@ 1945 "Src/SEGGER_RTT.c" 1
 3781 0092 83F31188 		msr   basepri, r3  
 3782              		
 3783              	@ 0 "" 2
 3784              		.thumb
 3785              		.syntax unified
 3786              	.LBE32:
 3787 0096 02E0     		b	.L209
 3788              	.L205:
1946:Src/SEGGER_RTT.c ****   } else {
1947:Src/SEGGER_RTT.c ****     r = -1;
 3789              		.loc 1 1947 7
 3790 0098 4FF0FF33 		mov	r3, #-1
 3791 009c FB61     		str	r3, [r7, #28]
 3792              	.L209:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 101


1948:Src/SEGGER_RTT.c ****   }
1949:Src/SEGGER_RTT.c ****   return r;
 3793              		.loc 1 1949 10
 3794 009e FB69     		ldr	r3, [r7, #28]
1950:Src/SEGGER_RTT.c **** }
 3795              		.loc 1 1950 1
 3796 00a0 1846     		mov	r0, r3
 3797 00a2 2037     		adds	r7, r7, #32
 3798              		.cfi_def_cfa_offset 8
 3799 00a4 BD46     		mov	sp, r7
 3800              		.cfi_def_cfa_register 13
 3801              		@ sp needed
 3802 00a6 80BD     		pop	{r7, pc}
 3803              	.L212:
 3804              		.align	2
 3805              	.L211:
 3806 00a8 00000000 		.word	_SEGGER_RTT
 3807 00ac 00000000 		.word	_aTerminalId
 3808 00b0 18000000 		.word	_SEGGER_RTT+24
 3809 00b4 00000000 		.word	_ActiveTerminal
 3810              		.cfi_endproc
 3811              	.LFE32:
 3813              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3814              		.align	1
 3815              		.global	SEGGER_RTT_TerminalOut
 3816              		.syntax unified
 3817              		.thumb
 3818              		.thumb_func
 3820              	SEGGER_RTT_TerminalOut:
 3821              	.LFB33:
1951:Src/SEGGER_RTT.c **** 
1952:Src/SEGGER_RTT.c **** /*********************************************************************
1953:Src/SEGGER_RTT.c **** *
1954:Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1955:Src/SEGGER_RTT.c **** *
1956:Src/SEGGER_RTT.c **** *  Function description
1957:Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1958:Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1959:Src/SEGGER_RTT.c **** *
1960:Src/SEGGER_RTT.c **** *  Parameters
1961:Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1962:Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1963:Src/SEGGER_RTT.c **** *
1964:Src/SEGGER_RTT.c **** *  Return value
1965:Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1966:Src/SEGGER_RTT.c **** *     < 0 - Error.
1967:Src/SEGGER_RTT.c **** *
1968:Src/SEGGER_RTT.c **** */
1969:Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3822              		.loc 1 1969 70
 3823              		.cfi_startproc
 3824              		@ args = 0, pretend = 0, frame = 32
 3825              		@ frame_needed = 1, uses_anonymous_args = 0
 3826 0000 80B5     		push	{r7, lr}
 3827              		.cfi_def_cfa_offset 8
 3828              		.cfi_offset 7, -8
 3829              		.cfi_offset 14, -4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 102


 3830 0002 88B0     		sub	sp, sp, #32
 3831              		.cfi_def_cfa_offset 40
 3832 0004 00AF     		add	r7, sp, #0
 3833              		.cfi_def_cfa_register 7
 3834 0006 0346     		mov	r3, r0
 3835 0008 3960     		str	r1, [r7]
 3836 000a FB71     		strb	r3, [r7, #7]
 3837              	.LBB33:
1970:Src/SEGGER_RTT.c ****   int                   Status;
1971:Src/SEGGER_RTT.c ****   unsigned              FragLen;
1972:Src/SEGGER_RTT.c ****   unsigned              Avail;
1973:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1974:Src/SEGGER_RTT.c ****   //
1975:Src/SEGGER_RTT.c ****   INIT();
 3838              		.loc 1 1975 3
 3839 000c 434B     		ldr	r3, .L227
 3840 000e BB61     		str	r3, [r7, #24]
 3841 0010 BB69     		ldr	r3, [r7, #24]
 3842 0012 1B78     		ldrb	r3, [r3]
 3843 0014 DBB2     		uxtb	r3, r3
 3844 0016 002B     		cmp	r3, #0
 3845 0018 01D1     		bne	.L214
 3846              		.loc 1 1975 3 is_stmt 0 discriminator 1
 3847 001a FFF7FEFF 		bl	_DoInit
 3848              	.L214:
 3849              	.LBE33:
1976:Src/SEGGER_RTT.c ****   //
1977:Src/SEGGER_RTT.c ****   // Validate terminal ID.
1978:Src/SEGGER_RTT.c ****   //
1979:Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3850              		.loc 1 1979 6 is_stmt 1
 3851 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3852 0020 0F2B     		cmp	r3, #15
 3853 0022 73D8     		bhi	.L215
1980:Src/SEGGER_RTT.c ****     //
1981:Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1982:Src/SEGGER_RTT.c ****     //
1983:Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3854              		.loc 1 1983 11
 3855 0024 3E4B     		ldr	r3, .L227+4
 3856 0026 7B61     		str	r3, [r7, #20]
1984:Src/SEGGER_RTT.c ****     //
1985:Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1986:Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1987:Src/SEGGER_RTT.c ****     //
1988:Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3857              		.loc 1 1988 15
 3858 0028 3868     		ldr	r0, [r7]
 3859 002a FFF7FEFF 		bl	strlen
 3860 002e 3861     		str	r0, [r7, #16]
 3861              	.LBB34:
1989:Src/SEGGER_RTT.c ****     //
1990:Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1991:Src/SEGGER_RTT.c ****     //
1992:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3862              		.loc 1 1992 5
 3863              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 103


 3864              	@ 1992 "Src/SEGGER_RTT.c" 1
 3865 0030 EFF31183 		mrs   r3, basepri  
 3866 0034 4FF02001 		mov   r1, #32       
 3867 0038 81F31188 		msr   basepri, r1  
 3868              		
 3869              	@ 0 "" 2
 3870              		.thumb
 3871              		.syntax unified
 3872 003c FB60     		str	r3, [r7, #12]
1993:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3873              		.loc 1 1993 13
 3874 003e 7869     		ldr	r0, [r7, #20]
 3875 0040 FFF7FEFF 		bl	_GetAvailWriteSpace
 3876 0044 B860     		str	r0, [r7, #8]
1994:Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3877              		.loc 1 1994 18
 3878 0046 7B69     		ldr	r3, [r7, #20]
 3879 0048 5B69     		ldr	r3, [r3, #20]
 3880              		.loc 1 1994 26
 3881 004a 03F00303 		and	r3, r3, #3
 3882              		.loc 1 1994 5
 3883 004e 022B     		cmp	r3, #2
 3884 0050 41D0     		beq	.L216
 3885 0052 022B     		cmp	r3, #2
 3886 0054 52D8     		bhi	.L217
 3887 0056 002B     		cmp	r3, #0
 3888 0058 02D0     		beq	.L218
 3889 005a 012B     		cmp	r3, #1
 3890 005c 1BD0     		beq	.L219
 3891 005e 4DE0     		b	.L217
 3892              	.L218:
1995:Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1996:Src/SEGGER_RTT.c ****       //
1997:Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1998:Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1999:Src/SEGGER_RTT.c ****       //
2000:Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 3893              		.loc 1 2000 28
 3894 0060 3B69     		ldr	r3, [r7, #16]
 3895 0062 0433     		adds	r3, r3, #4
 3896              		.loc 1 2000 10
 3897 0064 BA68     		ldr	r2, [r7, #8]
 3898 0066 9A42     		cmp	r2, r3
 3899 0068 02D2     		bcs	.L220
2001:Src/SEGGER_RTT.c ****         Status = 0;
 3900              		.loc 1 2001 16
 3901 006a 0023     		movs	r3, #0
 3902 006c FB61     		str	r3, [r7, #28]
2002:Src/SEGGER_RTT.c ****       } else {
2003:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2004:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
2005:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2006:Src/SEGGER_RTT.c ****       }
2007:Src/SEGGER_RTT.c ****       break;
 3903              		.loc 1 2007 7
 3904 006e 49E0     		b	.L222
 3905              	.L220:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 104


2003:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3906              		.loc 1 2003 9
 3907 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3908 0072 1946     		mov	r1, r3
 3909 0074 7869     		ldr	r0, [r7, #20]
 3910 0076 FFF7FEFF 		bl	_PostTerminalSwitch
2004:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3911              		.loc 1 2004 23
 3912 007a 3A69     		ldr	r2, [r7, #16]
 3913 007c 3968     		ldr	r1, [r7]
 3914 007e 7869     		ldr	r0, [r7, #20]
 3915 0080 FFF7FEFF 		bl	_WriteBlocking
 3916 0084 0346     		mov	r3, r0
2004:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3917              		.loc 1 2004 16
 3918 0086 FB61     		str	r3, [r7, #28]
2005:Src/SEGGER_RTT.c ****       }
 3919              		.loc 1 2005 9
 3920 0088 264B     		ldr	r3, .L227+8
 3921 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3922 008c 1946     		mov	r1, r3
 3923 008e 7869     		ldr	r0, [r7, #20]
 3924 0090 FFF7FEFF 		bl	_PostTerminalSwitch
 3925              		.loc 1 2007 7
 3926 0094 36E0     		b	.L222
 3927              	.L219:
2008:Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2009:Src/SEGGER_RTT.c ****       //
2010:Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2011:Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2012:Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2013:Src/SEGGER_RTT.c ****       //
2014:Src/SEGGER_RTT.c ****       if (Avail < 4u) {
 3928              		.loc 1 2014 10
 3929 0096 BB68     		ldr	r3, [r7, #8]
 3930 0098 032B     		cmp	r3, #3
 3931 009a 03D8     		bhi	.L223
2015:Src/SEGGER_RTT.c ****         Status = -1;
 3932              		.loc 1 2015 16
 3933 009c 4FF0FF33 		mov	r3, #-1
 3934 00a0 FB61     		str	r3, [r7, #28]
2016:Src/SEGGER_RTT.c ****       } else {
2017:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2018:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2019:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2020:Src/SEGGER_RTT.c ****       }
2021:Src/SEGGER_RTT.c ****       break;
 3935              		.loc 1 2021 7
 3936 00a2 2FE0     		b	.L222
 3937              	.L223:
2017:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3938              		.loc 1 2017 9
 3939 00a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3940 00a6 1946     		mov	r1, r3
 3941 00a8 7869     		ldr	r0, [r7, #20]
 3942 00aa FFF7FEFF 		bl	_PostTerminalSwitch
2018:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 105


 3943              		.loc 1 2018 66
 3944 00ae BB68     		ldr	r3, [r7, #8]
 3945 00b0 1A1F     		subs	r2, r3, #4
2018:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3946              		.loc 1 2018 23
 3947 00b2 3B69     		ldr	r3, [r7, #16]
 3948 00b4 9342     		cmp	r3, r2
 3949 00b6 28BF     		it	cs
 3950 00b8 1346     		movcs	r3, r2
 3951 00ba 1A46     		mov	r2, r3
 3952 00bc 3968     		ldr	r1, [r7]
 3953 00be 7869     		ldr	r0, [r7, #20]
 3954 00c0 FFF7FEFF 		bl	_WriteBlocking
 3955 00c4 0346     		mov	r3, r0
2018:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3956              		.loc 1 2018 16
 3957 00c6 FB61     		str	r3, [r7, #28]
2019:Src/SEGGER_RTT.c ****       }
 3958              		.loc 1 2019 9
 3959 00c8 164B     		ldr	r3, .L227+8
 3960 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3961 00cc 1946     		mov	r1, r3
 3962 00ce 7869     		ldr	r0, [r7, #20]
 3963 00d0 FFF7FEFF 		bl	_PostTerminalSwitch
 3964              		.loc 1 2021 7
 3965 00d4 16E0     		b	.L222
 3966              	.L216:
2022:Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2023:Src/SEGGER_RTT.c ****       //
2024:Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2025:Src/SEGGER_RTT.c ****       //
2026:Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 3967              		.loc 1 2026 7
 3968 00d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3969 00d8 1946     		mov	r1, r3
 3970 00da 7869     		ldr	r0, [r7, #20]
 3971 00dc FFF7FEFF 		bl	_PostTerminalSwitch
2027:Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3972              		.loc 1 2027 21
 3973 00e0 3A69     		ldr	r2, [r7, #16]
 3974 00e2 3968     		ldr	r1, [r7]
 3975 00e4 7869     		ldr	r0, [r7, #20]
 3976 00e6 FFF7FEFF 		bl	_WriteBlocking
 3977 00ea 0346     		mov	r3, r0
 3978              		.loc 1 2027 14
 3979 00ec FB61     		str	r3, [r7, #28]
2028:Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3980              		.loc 1 2028 7
 3981 00ee 0D4B     		ldr	r3, .L227+8
 3982 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3983 00f2 1946     		mov	r1, r3
 3984 00f4 7869     		ldr	r0, [r7, #20]
 3985 00f6 FFF7FEFF 		bl	_PostTerminalSwitch
2029:Src/SEGGER_RTT.c ****       break;
 3986              		.loc 1 2029 7
 3987 00fa 03E0     		b	.L222
 3988              	.L217:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 106


2030:Src/SEGGER_RTT.c ****     default:
2031:Src/SEGGER_RTT.c ****       Status = -1;
 3989              		.loc 1 2031 14
 3990 00fc 4FF0FF33 		mov	r3, #-1
 3991 0100 FB61     		str	r3, [r7, #28]
2032:Src/SEGGER_RTT.c ****       break;
 3992              		.loc 1 2032 7
 3993 0102 00BF     		nop
 3994              	.L222:
2033:Src/SEGGER_RTT.c ****     }
2034:Src/SEGGER_RTT.c ****     //
2035:Src/SEGGER_RTT.c ****     // Finish up.
2036:Src/SEGGER_RTT.c ****     //
2037:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3995              		.loc 1 2037 5
 3996 0104 FB68     		ldr	r3, [r7, #12]
 3997              		.syntax unified
 3998              	@ 2037 "Src/SEGGER_RTT.c" 1
 3999 0106 83F31188 		msr   basepri, r3  
 4000              		
 4001              	@ 0 "" 2
 4002              		.thumb
 4003              		.syntax unified
 4004              	.LBE34:
 4005 010a 02E0     		b	.L225
 4006              	.L215:
2038:Src/SEGGER_RTT.c ****   } else {
2039:Src/SEGGER_RTT.c ****     Status = -1;
 4007              		.loc 1 2039 12
 4008 010c 4FF0FF33 		mov	r3, #-1
 4009 0110 FB61     		str	r3, [r7, #28]
 4010              	.L225:
2040:Src/SEGGER_RTT.c ****   }
2041:Src/SEGGER_RTT.c ****   return Status;
 4011              		.loc 1 2041 10
 4012 0112 FB69     		ldr	r3, [r7, #28]
2042:Src/SEGGER_RTT.c **** }
 4013              		.loc 1 2042 1
 4014 0114 1846     		mov	r0, r3
 4015 0116 2037     		adds	r7, r7, #32
 4016              		.cfi_def_cfa_offset 8
 4017 0118 BD46     		mov	sp, r7
 4018              		.cfi_def_cfa_register 13
 4019              		@ sp needed
 4020 011a 80BD     		pop	{r7, pc}
 4021              	.L228:
 4022              		.align	2
 4023              	.L227:
 4024 011c 00000000 		.word	_SEGGER_RTT
 4025 0120 18000000 		.word	_SEGGER_RTT+24
 4026 0124 00000000 		.word	_ActiveTerminal
 4027              		.cfi_endproc
 4028              	.LFE33:
 4030              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 4031              		.align	1
 4032              		.global	SEGGER_RTT_GetAvailWriteSpace
 4033              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 107


 4034              		.thumb
 4035              		.thumb_func
 4037              	SEGGER_RTT_GetAvailWriteSpace:
 4038              	.LFB34:
2043:Src/SEGGER_RTT.c **** 
2044:Src/SEGGER_RTT.c **** /*********************************************************************
2045:Src/SEGGER_RTT.c **** *
2046:Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2047:Src/SEGGER_RTT.c **** *
2048:Src/SEGGER_RTT.c **** *  Function description
2049:Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2050:Src/SEGGER_RTT.c **** *
2051:Src/SEGGER_RTT.c **** *  Parameters
2052:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2053:Src/SEGGER_RTT.c **** *
2054:Src/SEGGER_RTT.c **** *  Return value
2055:Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2056:Src/SEGGER_RTT.c **** */
2057:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4039              		.loc 1 2057 63
 4040              		.cfi_startproc
 4041              		@ args = 0, pretend = 0, frame = 16
 4042              		@ frame_needed = 1, uses_anonymous_args = 0
 4043 0000 80B5     		push	{r7, lr}
 4044              		.cfi_def_cfa_offset 8
 4045              		.cfi_offset 7, -8
 4046              		.cfi_offset 14, -4
 4047 0002 84B0     		sub	sp, sp, #16
 4048              		.cfi_def_cfa_offset 24
 4049 0004 00AF     		add	r7, sp, #0
 4050              		.cfi_def_cfa_register 7
 4051 0006 7860     		str	r0, [r7, #4]
2058:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
2059:Src/SEGGER_RTT.c **** 
2060:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 4052              		.loc 1 2060 9
 4053 0008 7B68     		ldr	r3, [r7, #4]
 4054 000a 5A1C     		adds	r2, r3, #1
 4055 000c 1346     		mov	r3, r2
 4056 000e 5B00     		lsls	r3, r3, #1
 4057 0010 1344     		add	r3, r3, r2
 4058 0012 DB00     		lsls	r3, r3, #3
 4059 0014 054A     		ldr	r2, .L231
 4060 0016 1344     		add	r3, r3, r2
 4061 0018 FB60     		str	r3, [r7, #12]
2061:Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4062              		.loc 1 2061 10
 4063 001a F868     		ldr	r0, [r7, #12]
 4064 001c FFF7FEFF 		bl	_GetAvailWriteSpace
 4065 0020 0346     		mov	r3, r0
2062:Src/SEGGER_RTT.c **** }
 4066              		.loc 1 2062 1
 4067 0022 1846     		mov	r0, r3
 4068 0024 1037     		adds	r7, r7, #16
 4069              		.cfi_def_cfa_offset 8
 4070 0026 BD46     		mov	sp, r7
 4071              		.cfi_def_cfa_register 13
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 108


 4072              		@ sp needed
 4073 0028 80BD     		pop	{r7, pc}
 4074              	.L232:
 4075 002a 00BF     		.align	2
 4076              	.L231:
 4077 002c 00000000 		.word	_SEGGER_RTT
 4078              		.cfi_endproc
 4079              	.LFE34:
 4081              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4082              		.align	1
 4083              		.global	SEGGER_RTT_GetBytesInBuffer
 4084              		.syntax unified
 4085              		.thumb
 4086              		.thumb_func
 4088              	SEGGER_RTT_GetBytesInBuffer:
 4089              	.LFB35:
2063:Src/SEGGER_RTT.c **** 
2064:Src/SEGGER_RTT.c **** 
2065:Src/SEGGER_RTT.c **** /*********************************************************************
2066:Src/SEGGER_RTT.c **** *
2067:Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2068:Src/SEGGER_RTT.c **** *
2069:Src/SEGGER_RTT.c **** *  Function description
2070:Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2071:Src/SEGGER_RTT.c **** *
2072:Src/SEGGER_RTT.c **** *  Parameters
2073:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2074:Src/SEGGER_RTT.c **** *
2075:Src/SEGGER_RTT.c **** *  Return value
2076:Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2077:Src/SEGGER_RTT.c **** */
2078:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4090              		.loc 1 2078 60
 4091              		.cfi_startproc
 4092              		@ args = 0, pretend = 0, frame = 24
 4093              		@ frame_needed = 1, uses_anonymous_args = 0
 4094              		@ link register save eliminated.
 4095 0000 80B4     		push	{r7}
 4096              		.cfi_def_cfa_offset 4
 4097              		.cfi_offset 7, -4
 4098 0002 87B0     		sub	sp, sp, #28
 4099              		.cfi_def_cfa_offset 32
 4100 0004 00AF     		add	r7, sp, #0
 4101              		.cfi_def_cfa_register 7
 4102 0006 7860     		str	r0, [r7, #4]
2079:Src/SEGGER_RTT.c ****   unsigned RdOff;
2080:Src/SEGGER_RTT.c ****   unsigned WrOff;
2081:Src/SEGGER_RTT.c ****   unsigned r;
2082:Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
2083:Src/SEGGER_RTT.c ****   //
2084:Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2085:Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2086:Src/SEGGER_RTT.c ****   //
2087:Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4103              		.loc 1 2087 10
 4104 0008 194B     		ldr	r3, .L237
 4105 000a 3B61     		str	r3, [r7, #16]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 109


2088:Src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4106              		.loc 1 2088 9
 4107 000c 3969     		ldr	r1, [r7, #16]
 4108 000e 7A68     		ldr	r2, [r7, #4]
 4109 0010 1346     		mov	r3, r2
 4110 0012 5B00     		lsls	r3, r3, #1
 4111 0014 1344     		add	r3, r3, r2
 4112 0016 DB00     		lsls	r3, r3, #3
 4113 0018 0B44     		add	r3, r3, r1
 4114 001a 2833     		adds	r3, r3, #40
 4115 001c 1B68     		ldr	r3, [r3]
 4116 001e FB60     		str	r3, [r7, #12]
2089:Src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4117              		.loc 1 2089 9
 4118 0020 3969     		ldr	r1, [r7, #16]
 4119 0022 7A68     		ldr	r2, [r7, #4]
 4120 0024 1346     		mov	r3, r2
 4121 0026 5B00     		lsls	r3, r3, #1
 4122 0028 1344     		add	r3, r3, r2
 4123 002a DB00     		lsls	r3, r3, #3
 4124 002c 0B44     		add	r3, r3, r1
 4125 002e 2433     		adds	r3, r3, #36
 4126 0030 1B68     		ldr	r3, [r3]
 4127 0032 BB60     		str	r3, [r7, #8]
2090:Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4128              		.loc 1 2090 6
 4129 0034 FA68     		ldr	r2, [r7, #12]
 4130 0036 BB68     		ldr	r3, [r7, #8]
 4131 0038 9A42     		cmp	r2, r3
 4132 003a 04D8     		bhi	.L234
2091:Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4133              		.loc 1 2091 7
 4134 003c BA68     		ldr	r2, [r7, #8]
 4135 003e FB68     		ldr	r3, [r7, #12]
 4136 0040 D31A     		subs	r3, r2, r3
 4137 0042 7B61     		str	r3, [r7, #20]
 4138 0044 0DE0     		b	.L235
 4139              	.L234:
2092:Src/SEGGER_RTT.c ****   } else {
2093:Src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4140              		.loc 1 2093 33
 4141 0046 3969     		ldr	r1, [r7, #16]
 4142 0048 7A68     		ldr	r2, [r7, #4]
 4143 004a 1346     		mov	r3, r2
 4144 004c 5B00     		lsls	r3, r3, #1
 4145 004e 1344     		add	r3, r3, r2
 4146 0050 DB00     		lsls	r3, r3, #3
 4147 0052 0B44     		add	r3, r3, r1
 4148 0054 2033     		adds	r3, r3, #32
 4149 0056 1A68     		ldr	r2, [r3]
 4150              		.loc 1 2093 47
 4151 0058 F968     		ldr	r1, [r7, #12]
 4152 005a BB68     		ldr	r3, [r7, #8]
 4153 005c CB1A     		subs	r3, r1, r3
 4154              		.loc 1 2093 7
 4155 005e 1344     		add	r3, r3, r2
 4156 0060 7B61     		str	r3, [r7, #20]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 110


 4157              	.L235:
2094:Src/SEGGER_RTT.c ****   }
2095:Src/SEGGER_RTT.c ****   return r;
 4158              		.loc 1 2095 10
 4159 0062 7B69     		ldr	r3, [r7, #20]
2096:Src/SEGGER_RTT.c **** }
 4160              		.loc 1 2096 1
 4161 0064 1846     		mov	r0, r3
 4162 0066 1C37     		adds	r7, r7, #28
 4163              		.cfi_def_cfa_offset 4
 4164 0068 BD46     		mov	sp, r7
 4165              		.cfi_def_cfa_register 13
 4166              		@ sp needed
 4167 006a 5DF8047B 		ldr	r7, [sp], #4
 4168              		.cfi_restore 7
 4169              		.cfi_def_cfa_offset 0
 4170 006e 7047     		bx	lr
 4171              	.L238:
 4172              		.align	2
 4173              	.L237:
 4174 0070 00000000 		.word	_SEGGER_RTT
 4175              		.cfi_endproc
 4176              	.LFE35:
 4178              		.section	.rodata._aInitStr.0,"a"
 4179              		.align	2
 4182              	_aInitStr.0:
 4183 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4183      00005454 
 4183      52205245 
 4183      47474553 
 4183      00
 4184              		.text
 4185              	.Letext0:
 4186              		.file 2 "Inc/SEGGER_RTT.h"
 4187              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 4188              		.file 4 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 111


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SEGGER_RTT.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:19     .data._aTerminalId:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:22     .data._aTerminalId:0000000000000000 _aTerminalId
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:29     .bss._SEGGER_RTT:0000000000000000 _SEGGER_RTT
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:26     .bss._SEGGER_RTT:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:32     .bss._acUpBuffer:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:35     .bss._acUpBuffer:0000000000000000 _acUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:38     .bss._acDownBuffer:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:41     .bss._acDownBuffer:0000000000000000 _acDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:46     .bss._ActiveTerminal:0000000000000000 _ActiveTerminal
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:47     .bss._ActiveTerminal:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:49     .rodata:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:53     .text._DoInit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:58     .text._DoInit:0000000000000000 _DoInit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:191    .text._DoInit:00000000000000a0 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4182   .rodata._aInitStr.0:0000000000000000 _aInitStr.0
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:200    .text._WriteBlocking:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:205    .text._WriteBlocking:0000000000000000 _WriteBlocking
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:352    .text._WriteNoCheck:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:357    .text._WriteNoCheck:0000000000000000 _WriteNoCheck
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:477    .text._PostTerminalSwitch:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:482    .text._PostTerminalSwitch:0000000000000000 _PostTerminalSwitch
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:525    .text._PostTerminalSwitch:0000000000000030 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:530    .text._GetAvailWriteSpace:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:535    .text._GetAvailWriteSpace:0000000000000000 _GetAvailWriteSpace
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:602    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:608    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 SEGGER_RTT_ReadUpBufferNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:795    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000108 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:800    .text.SEGGER_RTT_ReadNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:806    .text.SEGGER_RTT_ReadNoLock:0000000000000000 SEGGER_RTT_ReadNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:993    .text.SEGGER_RTT_ReadNoLock:0000000000000108 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:998    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1004   .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 SEGGER_RTT_ReadUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1063   .text.SEGGER_RTT_Read:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1069   .text.SEGGER_RTT_Read:0000000000000000 SEGGER_RTT_Read
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1128   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1134   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 SEGGER_RTT_WriteWithOverwriteNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1366   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000120 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1371   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1377   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 SEGGER_RTT_WriteDownBufferNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1494   .text.SEGGER_RTT_WriteDownBufferNoLock:000000000000009c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1499   .text.SEGGER_RTT_WriteNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1505   .text.SEGGER_RTT_WriteNoLock:0000000000000000 SEGGER_RTT_WriteNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1622   .text.SEGGER_RTT_WriteNoLock:000000000000009c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1627   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1633   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 SEGGER_RTT_WriteDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1704   .text.SEGGER_RTT_WriteDownBuffer:0000000000000048 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1709   .text.SEGGER_RTT_Write:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1715   .text.SEGGER_RTT_Write:0000000000000000 SEGGER_RTT_Write
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1786   .text.SEGGER_RTT_Write:0000000000000048 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1791   .text.SEGGER_RTT_WriteString:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1797   .text.SEGGER_RTT_WriteString:0000000000000000 SEGGER_RTT_WriteString
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1835   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1841   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 SEGGER_RTT_PutCharSkipNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1942   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000074 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1947   .text.SEGGER_RTT_PutCharSkip:0000000000000000 $t
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 112


/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:1953   .text.SEGGER_RTT_PutCharSkip:0000000000000000 SEGGER_RTT_PutCharSkip
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2086   .text.SEGGER_RTT_PutCharSkip:0000000000000094 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2091   .text.SEGGER_RTT_PutChar:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2097   .text.SEGGER_RTT_PutChar:0000000000000000 SEGGER_RTT_PutChar
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2247   .text.SEGGER_RTT_PutChar:00000000000000a8 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2252   .text.SEGGER_RTT_GetKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2258   .text.SEGGER_RTT_GetKey:0000000000000000 SEGGER_RTT_GetKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2309   .text.SEGGER_RTT_WaitKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2315   .text.SEGGER_RTT_WaitKey:0000000000000000 SEGGER_RTT_WaitKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2351   .text.SEGGER_RTT_HasKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2357   .text.SEGGER_RTT_HasKey:0000000000000000 SEGGER_RTT_HasKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2420   .text.SEGGER_RTT_HasKey:0000000000000040 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2426   .text.SEGGER_RTT_HasData:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2432   .text.SEGGER_RTT_HasData:0000000000000000 SEGGER_RTT_HasData
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2481   .text.SEGGER_RTT_HasData:0000000000000034 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2486   .text.SEGGER_RTT_HasDataUp:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2492   .text.SEGGER_RTT_HasDataUp:0000000000000000 SEGGER_RTT_HasDataUp
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2541   .text.SEGGER_RTT_HasDataUp:0000000000000034 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2546   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2552   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 SEGGER_RTT_AllocDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2741   .text.SEGGER_RTT_AllocDownBuffer:0000000000000100 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2746   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2752   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 SEGGER_RTT_AllocUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2943   .text.SEGGER_RTT_AllocUpBuffer:0000000000000104 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2948   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:2954   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 SEGGER_RTT_ConfigUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3075   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000090 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3080   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3086   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 SEGGER_RTT_ConfigDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3215   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000094 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3220   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3226   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 SEGGER_RTT_SetNameUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3320   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000068 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3325   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3331   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 SEGGER_RTT_SetNameDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3425   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000068 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3430   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3436   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 SEGGER_RTT_SetFlagsUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3530   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000068 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3535   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3541   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 SEGGER_RTT_SetFlagsDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3635   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000068 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3640   .text.SEGGER_RTT_Init:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3646   .text.SEGGER_RTT_Init:0000000000000000 SEGGER_RTT_Init
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3667   .text.SEGGER_RTT_SetTerminal:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3673   .text.SEGGER_RTT_SetTerminal:0000000000000000 SEGGER_RTT_SetTerminal
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3806   .text.SEGGER_RTT_SetTerminal:00000000000000a8 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3814   .text.SEGGER_RTT_TerminalOut:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:3820   .text.SEGGER_RTT_TerminalOut:0000000000000000 SEGGER_RTT_TerminalOut
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4024   .text.SEGGER_RTT_TerminalOut:000000000000011c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4031   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4037   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 SEGGER_RTT_GetAvailWriteSpace
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4077   .text.SEGGER_RTT_GetAvailWriteSpace:000000000000002c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4082   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4088   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 SEGGER_RTT_GetBytesInBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4174   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000070 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s:4179   .rodata._aInitStr.0:0000000000000000 $d
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccupj8vY.s 			page 113



UNDEFINED SYMBOLS
memset
memcpy
strlen
